<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= session.title %> - Whiteboard Session</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        body {
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #f8f9fa;
            overflow: hidden;
        }

        .session-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 0.75rem 1rem;
            display: flex;
            justify-content: between;
            align-items: center;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            z-index: 1000;
            position: relative;
        }

        .session-info {
            flex: 1;
        }

        .session-title {
            font-size: 1.2rem;
            font-weight: 600;
            margin: 0;
        }

        .session-meta {
            font-size: 0.875rem;
            opacity: 0.9;
            margin: 0;
        }

        .session-controls {
            display: flex;
            gap: 0.5rem;
            align-items: center;
        }

        .main-container {
            display: flex;
            height: calc(100vh - 70px);
        }

        .whiteboard-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: white;
        }

        .toolbar {
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
            padding: 0.75rem;
            display: flex;
            gap: 0.5rem;
            align-items: center;
            flex-wrap: wrap;
        }

        .tool-group {
            display: flex;
            gap: 0.25rem;
            align-items: center;
            margin-right: 1rem;
        }

        .tool-btn {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 0.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .tool-btn:hover {
            background: #e9ecef;
            border-color: #adb5bd;
        }

        .tool-btn.active {
            background: #667eea;
            color: white;
            border-color: #667eea;
        }

        .color-picker {
            width: 40px;
            height: 40px;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            cursor: pointer;
        }

        .size-slider {
            width: 100px;
        }

        .canvas-container {
            flex: 1;
            position: relative;
            overflow: hidden;
        }

        #whiteboardCanvas {
            display: block;
            cursor: crosshair;
            background: white;
        }

        .sidebar {
            width: 350px;
            background: white;
            border-left: 1px solid #dee2e6;
            display: flex;
            flex-direction: column;
        }

        .video-container {
            background: #000;
            border-radius: 10px;
            margin-bottom: 1rem;
            position: relative;
            overflow: hidden;
        }

        .teacher-video {
            width: 100%;
            height: 200px;
            object-fit: cover;
            border-radius: 10px;
        }

        .student-videos {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 0.5rem;
            margin-bottom: 1rem;
        }

        .student-video {
            width: 80px;
            height: 60px;
            object-fit: cover;
            border-radius: 6px;
            border: 2px solid #dee2e6;
        }

        .student-video.speaking {
            border-color: #28a745;
            box-shadow: 0 0 10px rgba(40, 167, 69, 0.5);
        }

        .video-controls {
            background: rgba(0, 0, 0, 0.8);
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 0.5rem;
            display: flex;
            justify-content: center;
            gap: 0.5rem;
        }

        .video-btn {
            background: rgba(255, 255, 255, 0.2);
            border: none;
            color: white;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .video-btn:hover {
            background: rgba(255, 255, 255, 0.3);
        }

        .video-btn.active {
            background: #28a745;
        }

        .video-btn.muted {
            background: #dc3545;
        }

        .audio-controls {
            background: #f8f9fa;
            border-radius: 10px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .audio-controls h6 {
            margin-bottom: 0.75rem;
            color: #495057;
        }

        .control-group {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 0.5rem;
        }

        .control-btn {
            background: #6c757d;
            border: none;
            color: white;
            border-radius: 6px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 0.875rem;
        }

        .control-btn:hover {
            background: #5a6268;
        }

        .control-btn.active {
            background: #28a745;
        }

        .control-btn.danger {
            background: #dc3545;
        }

        .control-btn.danger:hover {
            background: #c82333;
        }

        .volume-control {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .volume-slider {
            flex: 1;
        }

        .permission-request-audio {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 0.75rem;
            margin-bottom: 1rem;
            text-align: center;
            font-size: 0.875rem;
        }

        .video-placeholder {
            width: 100%;
            height: 200px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 1.2rem;
            margin-bottom: 1rem;
        }

        .sidebar-tabs {
            display: flex;
            background: #f8f9fa;
            border-bottom: 1px solid #dee2e6;
        }

        .sidebar-tab {
            flex: 1;
            padding: 0.75rem;
            text-align: center;
            cursor: pointer;
            border: none;
            background: transparent;
            transition: all 0.2s ease;
        }

        .sidebar-tab.active {
            background: white;
            border-bottom: 2px solid #667eea;
            color: #667eea;
        }

        .sidebar-content {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
        }

        .participants-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }

        .participant-item {
            display: flex;
            align-items: center;
            padding: 0.5rem;
            border-radius: 6px;
            margin-bottom: 0.5rem;
            background: #f8f9fa;
        }

        .participant-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #667eea;
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            margin-right: 0.75rem;
        }

        .participant-info {
            flex: 1;
        }

        .participant-name {
            font-weight: 500;
            margin: 0;
        }

        .participant-role {
            font-size: 0.75rem;
            color: #6c757d;
            margin: 0;
        }

        .participant-status {
            padding: 0.25rem 0.5rem;
            border-radius: 12px;
            font-size: 0.75rem;
            font-weight: 500;
        }

        .status-online {
            background: #d1edff;
            color: #0c5460;
        }

        .status-drawing {
            background: #fff3cd;
            color: #856404;
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 0.5rem;
            max-height: 300px;
        }

        .chat-message {
            margin-bottom: 0.75rem;
            padding: 0.5rem;
            border-radius: 8px;
            background: #f8f9fa;
        }

        .chat-message.own {
            background: #e3f2fd;
            margin-left: 2rem;
        }

        .chat-message.system {
            background: #fff3cd;
            font-style: italic;
            text-align: center;
        }

        .message-sender {
            font-weight: 600;
            font-size: 0.875rem;
            color: #667eea;
            margin-bottom: 0.25rem;
        }

        .message-text {
            margin: 0;
            font-size: 0.875rem;
        }

        .message-time {
            font-size: 0.75rem;
            color: #6c757d;
            margin-top: 0.25rem;
        }

        .chat-input {
            border-top: 1px solid #dee2e6;
            padding: 0.75rem;
        }

        .chat-form {
            display: flex;
            gap: 0.5rem;
        }

        .chat-form input {
            flex: 1;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 0.5rem;
        }

        .chat-form button {
            background: #667eea;
            color: white;
            border: none;
            border-radius: 6px;
            padding: 0.5rem 1rem;
            cursor: pointer;
        }

        .permission-request {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
            text-align: center;
        }

        .waiting-participant {
            margin-bottom: 0.5rem;
        }

        .waiting-participant .participant-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background: #ffc107;
            color: #000;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: 600;
            font-size: 0.875rem;
        }

        .permission-request h6 {
            color: #856404;
            margin-bottom: 1rem;
        }

        .permission-request .btn-group .btn {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
        }

        .student-audio-indicator {
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .audio-indicator-content {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }

        .btn-sm {
            padding: 0.375rem 0.75rem;
            font-size: 0.875rem;
            border-radius: 4px;
            border: none;
            cursor: pointer;
            margin: 0.25rem;
        }

        .btn-success {
            background: #28a745;
            color: white;
        }

        .btn-danger {
            background: #dc3545;
            color: white;
        }

        .btn-primary {
            background: #667eea;
            color: white;
        }

        .session-status {
            padding: 0.25rem 0.75rem;
            border-radius: 12px;
            font-size: 0.875rem;
            font-weight: 500;
            margin-left: 1rem;
        }

        .status-active {
            background: #d1edff;
            color: #0c5460;
        }

        .status-waiting {
            background: #fff3cd;
            color: #856404;
        }

        @media (max-width: 768px) {
            .main-container {
                flex-direction: column;
            }
            
            .sidebar {
                width: 100%;
                height: 200px;
            }
            
            .session-controls {
                flex-wrap: wrap;
            }
        }
    </style>
</head>
<body>
    <!-- Session Header -->
    <div class="session-header">
        <div class="session-info">
            <h1 class="session-title"><%= session.title %></h1>
            <p class="session-meta">
                Teacher: <%= session.teacherName %> | 
                Grade: <%= session.gradeLevel %> | 
                Subject: <%= session.subject %>
            </p>
        </div>
        <div class="session-controls">
            <span class="session-status status-<%= session.status %>">
                <i class="fas fa-circle me-1"></i><%= session.status %>
            </span>
            <% if (user.role === 'teacher') { %>
                <button class="btn btn-sm btn-danger" onclick="endSession()">
                    <i class="fas fa-stop me-1"></i>End Session
                </button>
            <% } %>
            <button class="btn btn-sm btn-outline-light" onclick="leaveSession()">
                <i class="fas fa-sign-out-alt me-1"></i>Leave
            </button>
        </div>
    </div>

    <!-- Main Container -->
    <div class="main-container">
        <!-- Whiteboard Area -->
        <div class="whiteboard-area">
            <!-- Toolbar -->
            <div class="toolbar">
                <div class="tool-group">
                    <button class="tool-btn active" data-tool="pen" title="Pen">
                        <i class="fas fa-pen"></i>
                    </button>
                    <button class="tool-btn" data-tool="eraser" title="Eraser">
                        <i class="fas fa-eraser"></i>
                    </button>
                    <button class="tool-btn" data-tool="text" title="Text">
                        <i class="fas fa-font"></i>
                    </button>
                    <button class="tool-btn" data-tool="shapes" title="Shapes">
                        <i class="fas fa-shapes"></i>
                    </button>
                </div>

                <div class="tool-group">
                    <input type="color" class="color-picker" id="colorPicker" value="#000000" title="Color">
                    <input type="range" class="size-slider" id="sizeSlider" min="1" max="20" value="3" title="Size">
                </div>

                <div class="tool-group">
                    <button class="tool-btn" onclick="clearCanvas()" title="Clear All">
                        <i class="fas fa-trash"></i>
                    </button>
                    <button class="tool-btn" onclick="undoAction()" title="Undo">
                        <i class="fas fa-undo"></i>
                    </button>
                    <button class="tool-btn" onclick="redoAction()" title="Redo">
                        <i class="fas fa-redo"></i>
                    </button>
                </div>

                <% if (user.role === 'teacher') { %>
                <div class="tool-group">
                    <input type="file" id="imageUpload" accept="image/*" style="display: none;" onchange="uploadImage(this)">
                    <button class="tool-btn" onclick="document.getElementById('imageUpload').click()" title="Upload Image">
                        <i class="fas fa-image"></i>
                    </button>
                </div>
                <% } %>
            </div>

            <!-- Canvas Container -->
            <div class="canvas-container">
                <canvas id="whiteboardCanvas"></canvas>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="sidebar">
            <!-- Sidebar Tabs -->
            <div class="sidebar-tabs">
                <button class="sidebar-tab active" onclick="showSidebarTab('video')">
                    <i class="fas fa-video me-1"></i>Video
                </button>
                <button class="sidebar-tab" onclick="showSidebarTab('participants')">
                    <i class="fas fa-users me-1"></i>Participants
                    <span id="waitingBadge" class="badge bg-warning text-dark ms-1" style="display: none;">0</span>
                </button>
                <button class="sidebar-tab" onclick="showSidebarTab('chat')">
                    <i class="fas fa-comments me-1"></i>Chat
                </button>
            </div>

            <!-- Sidebar Content -->
            <div class="sidebar-content">
                <!-- Video Tab -->
                <div id="videoTab" class="tab-content">
                    <!-- Teacher Video Section -->
                    <div class="video-container">
                        <video id="teacherVideo" class="teacher-video" autoplay muted playsinline style="display: none;"></video>
                        <div id="teacherVideoPlaceholder" class="video-placeholder">
                            <div>
                                <i class="fas fa-video-slash fa-2x mb-2"></i>
                                <div>Teacher Video Off</div>
                            </div>
                        </div>
                        <div class="video-controls" id="teacherVideoControls" style="display: none;">
                            <button class="video-btn" id="teacherMuteBtn" onclick="toggleTeacherAudio()">
                                <i class="fas fa-microphone"></i>
                            </button>
                            <button class="video-btn" id="teacherVideoBtn" onclick="toggleTeacherVideo()">
                                <i class="fas fa-video"></i>
                            </button>
                        </div>
                    </div>

                    <!-- Audio Controls -->
                    <div class="audio-controls">
                        <h6><i class="fas fa-volume-up me-2"></i>Audio Controls</h6>

                        <% if (user.role === 'teacher') { %>
                        <!-- Teacher Audio Controls -->
                        <div class="control-group">
                            <span>Microphone:</span>
                            <button class="control-btn" id="micBtn" onclick="toggleMicrophone()">
                                <i class="fas fa-microphone-slash"></i> Off
                            </button>
                        </div>
                        <div class="control-group">
                            <span>Camera:</span>
                            <button class="control-btn" id="cameraBtn" onclick="toggleCamera()">
                                <i class="fas fa-video-slash"></i> Off
                            </button>
                        </div>
                        <div class="control-group">
                            <span>Student Audio:</span>
                            <button class="control-btn" id="studentAudioBtn" onclick="toggleStudentAudio()">
                                <i class="fas fa-microphone-slash"></i> Muted
                            </button>
                        </div>
                        <div class="control-group">
                            <span>Debug:</span>
                            <button class="control-btn" onclick="debugVideoStatus()">
                                <i class="fas fa-bug"></i> Check Video
                            </button>
                        </div>
                        <% } else { %>
                        <!-- Student Audio Controls -->
                        <% if (participant && participant.permissions && participant.permissions.canSpeak) { %>
                        <div class="control-group">
                            <span>Microphone:</span>
                            <button class="control-btn" id="micBtn" onclick="toggleMicrophone()">
                                <i class="fas fa-microphone-slash"></i> Off
                            </button>
                        </div>
                        <% } else { %>
                        <div class="permission-request-audio">
                            <i class="fas fa-microphone-slash me-2"></i>
                            Microphone access not granted by teacher
                        </div>
                        <% } %>
                        <% } %>

                        <!-- Volume Control -->
                        <div class="volume-control">
                            <i class="fas fa-volume-down"></i>
                            <input type="range" class="volume-slider" id="volumeSlider" min="0" max="100" value="50">
                            <i class="fas fa-volume-up"></i>
                        </div>
                    </div>

                    <!-- Student Videos Grid -->
                    <div id="studentVideosContainer">
                        <h6><i class="fas fa-users me-2"></i>Student Videos</h6>
                        <div class="student-videos" id="studentVideos">
                            <!-- Student video elements will be added here -->
                        </div>
                    </div>
                </div>

                <!-- Participants Tab -->
                <div id="participantsTab" class="tab-content" style="display: none;">
                    <% if (user.role === 'teacher' && waitingParticipants && waitingParticipants.length > 0) { %>
                    <div class="permission-request">
                        <h6><i class="fas fa-clock me-2"></i>Waiting for Approval</h6>
                        <div id="waitingList">
                            <!-- Waiting participants will be loaded here -->
                        </div>
                    </div>
                    <% } %>

                    <h6><i class="fas fa-users me-2"></i>Active Participants</h6>
                    <ul class="participants-list" id="participantsList">
                        <!-- Participants will be loaded here -->
                    </ul>
                </div>

                <!-- Chat Tab -->
                <div id="chatTab" class="tab-content" style="display: none;">
                    <div class="chat-container">
                        <div class="chat-messages" id="chatMessages">
                            <!-- Chat messages will appear here -->
                        </div>
                        <% if (participant && participant.permissions && participant.permissions.canChat) { %>
                        <div class="chat-input">
                            <form class="chat-form" onsubmit="sendMessage(event)">
                                <input type="text" id="messageInput" placeholder="Type a message..." maxlength="1000" required>
                                <button type="submit">
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </form>
                        </div>
                        <% } else { %>
                        <div class="chat-input">
                            <p class="text-muted text-center mb-0">Chat is disabled for you</p>
                        </div>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        // Session data
        const sessionData = {
            sessionId: '<%= session.sessionId %>',
            user: {
                id: '<%= user._id %>',
                name: '<%= user.displayName %>',
                role: '<%= user.role %>'
            },
            participant: <%- JSON.stringify(participant || {}) %>
        };

        // Production environment check for logging
        const isProduction = window.location.hostname !== 'localhost' && window.location.hostname !== '127.0.0.1';
        const log = isProduction ? () => {} : console.log;
        const logError = console.error; // Always log errors

        // Initialize socket connection
        const socket = io();

        // WebRTC variables
        let localStream = null;
        let peerConnections = {};
        let isAudioEnabled = false;
        let isVideoEnabled = false;
        let isStudentAudioAllowed = false;

        // WebRTC configuration
        const rtcConfig = {
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' }
            ]
        };
        
        // Canvas setup
        const canvas = document.getElementById('whiteboardCanvas');
        const ctx = canvas.getContext('2d');
        let isDrawing = false;
        let currentTool = 'pen';
        let currentColor = '#000000';
        let currentSize = 3;

        // Initialize canvas size
        function resizeCanvas() {
            const container = canvas.parentElement;
            canvas.width = container.clientWidth;
            canvas.height = container.clientHeight;
        }

        // Initialize the whiteboard
        function initializeWhiteboard() {
            resizeCanvas();

            // Join the session room with user data
            socket.emit('join-session', {
                sessionId: sessionData.sessionId,
                userId: sessionData.user.id,
                userName: sessionData.user.name,
                userRole: sessionData.user.role
            });

            // Set up canvas event listeners
            setupCanvasEvents();

            // Set up socket event listeners
            setupSocketEvents();

            // Initialize audio/video
            initializeMediaDevices();

            // Load initial participants list
            setTimeout(() => {
                updateParticipantsList();

                // After loading participants, initiate WebRTC connections
                setTimeout(() => {
                    initiateWebRTCForExistingParticipants();
                }, 2000);
            }, 1000);

            // Request notification permission for teachers
            if (sessionData.user.role === 'teacher' && 'Notification' in window) {
                if (Notification.permission === 'default') {
                    Notification.requestPermission();
                }
            }

            log('Whiteboard initialized for user:', sessionData.user.name);
        }

        // Initialize media devices
        async function initializeMediaDevices() {
            try {
                // Check if user has permissions for audio/video
                const hasAudioPermission = sessionData.user.role === 'teacher' ||
                    (sessionData.participant.permissions && sessionData.participant.permissions.canSpeak);
                const hasVideoPermission = sessionData.user.role === 'teacher' ||
                    (sessionData.participant.permissions && sessionData.participant.permissions.canVideo);

                if (hasAudioPermission || hasVideoPermission) {
                    // Request media permissions but don't start streaming yet
                    const constraints = {
                        audio: hasAudioPermission,
                        video: hasVideoPermission
                    };

                    localStream = await navigator.mediaDevices.getUserMedia(constraints);

                    // Mute by default
                    if (localStream.getAudioTracks().length > 0) {
                        localStream.getAudioTracks()[0].enabled = false;
                    }
                    if (localStream.getVideoTracks().length > 0) {
                        localStream.getVideoTracks()[0].enabled = false;
                    }

                    console.log('Media devices initialized');
                    updateMediaControls();
                }
            } catch (error) {
                console.error('Error accessing media devices:', error);
                showMediaError(error.message);
            }
        }

        // Canvas event handlers
        function setupCanvasEvents() {
            canvas.addEventListener('mousedown', startDrawing);
            canvas.addEventListener('mousemove', draw);
            canvas.addEventListener('mouseup', stopDrawing);
            canvas.addEventListener('mouseout', stopDrawing);
            
            // Touch events for mobile
            canvas.addEventListener('touchstart', handleTouch);
            canvas.addEventListener('touchmove', handleTouch);
            canvas.addEventListener('touchend', stopDrawing);
        }

        function startDrawing(e) {
            if (!sessionData.participant.permissions?.canDraw && sessionData.user.role !== 'teacher') {
                return;
            }

            isDrawing = true;
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            ctx.beginPath();
            ctx.moveTo(x, y);

            // Emit start drawing event
            socket.emit('drawing', {
                sessionId: sessionData.sessionId,
                x: x,
                y: y,
                tool: currentTool,
                color: currentColor,
                size: currentSize,
                type: 'start'
            });
        }

        function draw(e) {
            if (!isDrawing) return;

            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            // Draw locally
            drawLine(x, y, currentTool, currentColor, currentSize);

            // Emit drawing data to other participants
            socket.emit('drawing', {
                sessionId: sessionData.sessionId,
                x: x,
                y: y,
                tool: currentTool,
                color: currentColor,
                size: currentSize,
                drawing: isDrawing,
                type: 'draw'
            });
        }

        // Separate function for actual drawing
        function drawLine(x, y, tool, color, size) {
            ctx.lineWidth = size;
            ctx.lineCap = 'round';
            ctx.strokeStyle = tool === 'eraser' ? '#FFFFFF' : color;

            ctx.lineTo(x, y);
            ctx.stroke();
        }

        function stopDrawing() {
            if (isDrawing) {
                isDrawing = false;
                ctx.beginPath();

                // Emit stop drawing event
                socket.emit('drawing', {
                    sessionId: sessionData.sessionId,
                    type: 'end'
                });
            }
        }

        function handleTouch(e) {
            e.preventDefault();
            const touch = e.touches[0];
            const mouseEvent = new MouseEvent(e.type === 'touchstart' ? 'mousedown' : 
                                            e.type === 'touchmove' ? 'mousemove' : 'mouseup', {
                clientX: touch.clientX,
                clientY: touch.clientY
            });
            canvas.dispatchEvent(mouseEvent);
        }

        // Socket event handlers
        function setupSocketEvents() {
            socket.on('drawing', (data) => {
                // Reduced logging for high-frequency drawing events
                // console.log('Received drawing data:', data);
                if (data.userId !== sessionData.user.id) {
                    drawFromRemote(data);
                }
            });

            socket.on('participant-joined', (participant) => {
                console.log('Participant joined:', participant);
                addSystemMessage(`${participant.name} joined the session`);
                updateParticipantsList();

                if (localStream) {
                    if (sessionData.user.role === 'teacher' && participant.role === 'student') {
                        // Teacher initiates connection to new student
                        console.log('Teacher initiating WebRTC connection to new student:', participant.name);
                        setTimeout(() => {
                            initiateWebRTCConnection(participant.userId);
                        }, 1500);
                    } else if (sessionData.user.role === 'student' && participant.role === 'teacher') {
                        // Student initiates connection to teacher if they have permissions
                        const hasAudioPermission = sessionData.participant.permissions && sessionData.participant.permissions.canSpeak;
                        const hasVideoPermission = sessionData.participant.permissions && sessionData.participant.permissions.canVideo;

                        if (hasAudioPermission || hasVideoPermission) {
                            console.log('Student initiating WebRTC connection to teacher for audio/video');
                            setTimeout(() => {
                                initiateWebRTCConnection(participant.userId);
                            }, 2000);
                        }
                    }
                }
            });

            socket.on('participant-left', (participant) => {
                console.log('Participant left:', participant);
                addSystemMessage(`${participant.name} left the session`);
                updateParticipantsList();
            });

            socket.on('participants-list', (participants) => {
                console.log('Received participants list:', participants);
                displayParticipants(participants);

                // Check for waiting participants and notify teacher
                if (sessionData.user.role === 'teacher') {
                    const waitingCount = participants.filter(p => p.status === 'waiting').length;
                    if (waitingCount > 0) {
                        // Show browser notification if permission granted
                        if (Notification.permission === 'granted') {
                            new Notification(`${waitingCount} student(s) waiting for admission`, {
                                body: 'Click to view and admit students',
                                icon: '/favicon.ico'
                            });
                        }
                    }
                }

                // Initiate WebRTC connections with admitted participants
                participants.filter(p => p.status === 'admitted' && p.userId !== sessionData.user.id).forEach(participant => {
                    if (!peerConnections[participant.userId] && localStream) {
                        setTimeout(() => {
                            initiateWebRTCConnection(participant.userId);
                        }, 1000);
                    }
                });
            });

            socket.on('chat-message', (message) => {
                console.log('Received chat message:', message);
                addChatMessage(message);

                // If it's a system message about session ending, show visual indicator
                if (message.isSystemMessage && message.message.includes('ended')) {
                    showSessionEndingIndicator();
                }
            });

            socket.on('chat-history', (messages) => {
                console.log('Received chat history:', messages);
                messages.forEach(message => addChatMessage(message, false));
            });

            socket.on('clear-canvas', () => {
                console.log('Canvas cleared by teacher');
                ctx.clearRect(0, 0, canvas.width, canvas.height);
            });

            socket.on('session-ended', (data) => {
                console.log('Session ended:', data);

                // Show detailed notification to students
                if (sessionData.user.role === 'student') {
                    showSessionEndNotification(data);
                } else {
                    // For teachers, show simple confirmation
                    alert(`Session ended successfully. Duration: ${data.duration} minutes.`);
                    window.location.href = '/whiteboard/dashboard';
                }
            });

            socket.on('session-end-confirmed', (data) => {
                console.log('Session end confirmed:', data);
                alert(`${data.message}\nDuration: ${data.duration} minutes\nParticipants: ${data.participantCount}`);
                window.location.href = '/whiteboard/dashboard';
            });

            socket.on('session-deleted', (data) => {
                console.log('Session deleted:', data);

                // Show deletion notification
                alert(`Session Deleted\n\n${data.message}\n\nSession: ${data.sessionTitle}\nTeacher: ${data.teacherName}`);

                // Redirect to appropriate dashboard
                window.location.href = sessionData.user.role === 'teacher' ? '/whiteboard/dashboard' : '/student/dashboard';
            });

            socket.on('error', (error) => {
                console.error('Socket error:', error);
                alert(error.message || 'An error occurred');
            });

            // Audio/Video event handlers
            socket.on('audio-toggle', (data) => {
                console.log('Audio toggle received:', data);
                updateParticipantAudioStatus(data.userId, data.enabled);
            });

            socket.on('video-toggle', (data) => {
                console.log('Video toggle received:', data);
                updateParticipantVideoStatus(data.userId, data.enabled);
            });

            socket.on('student-audio-permission', (data) => {
                console.log('Student audio permission changed:', data);
                if (sessionData.user.role === 'student') {
                    updateStudentAudioPermission(data.allowed);
                }
            });

            // WebRTC signaling events
            socket.on('webrtc-offer', async (data) => {
                // Reduced logging for WebRTC events
                // console.log('Received WebRTC offer:', data);
                await handleWebRTCOffer(data);
            });

            socket.on('webrtc-answer', async (data) => {
                // Reduced logging for WebRTC events
                // console.log('Received WebRTC answer:', data);
                await handleWebRTCAnswer(data);
            });

            socket.on('webrtc-ice-candidate', async (data) => {
                // Reduced logging for ICE candidates
                // console.log('Received ICE candidate:', data);
                await handleICECandidate(data);
            });

            // Participant admission events
            socket.on('participant-admitted', (data) => {
                console.log('Participant admitted:', data);
                if (sessionData.user.role === 'teacher') {
                    updateParticipantsList();
                }
                addSystemMessage(`${data.userName} was admitted to the session`);
            });

            socket.on('participant-denied', (data) => {
                console.log('Participant denied:', data);
                if (sessionData.user.role === 'teacher') {
                    updateParticipantsList();
                }
                addSystemMessage(`${data.userName} was denied access to the session`);
            });

            socket.on('participant-status-updated', (data) => {
                console.log('Participant status updated:', data);

                // If this is about the current user
                if (data.userId === sessionData.user.id) {
                    if (data.status === 'admitted') {
                        // Student was admitted - reload the page to get full access
                        location.reload();
                    } else if (data.status === 'denied') {
                        alert('Your request to join this session was denied by the teacher.');
                        window.location.href = '/student/dashboard';
                    }
                } else {
                    // Update participant list for teachers
                    if (sessionData.user.role === 'teacher') {
                        updateParticipantsList();
                    }
                }
            });
        }

        // Draw from remote user
        function drawFromRemote(data) {
            const prevStrokeStyle = ctx.strokeStyle;
            const prevLineWidth = ctx.lineWidth;

            ctx.lineWidth = data.size;
            ctx.lineCap = 'round';
            ctx.strokeStyle = data.tool === 'eraser' ? '#FFFFFF' : data.color;

            if (data.type === 'start') {
                ctx.beginPath();
                ctx.moveTo(data.x, data.y);
            } else if (data.type === 'draw') {
                ctx.lineTo(data.x, data.y);
                ctx.stroke();
            } else if (data.type === 'end') {
                ctx.beginPath();
            }

            // Restore previous settings
            ctx.strokeStyle = prevStrokeStyle;
            ctx.lineWidth = prevLineWidth;
        }

        // Tool selection
        document.querySelectorAll('.tool-btn[data-tool]').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.tool-btn[data-tool]').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentTool = btn.dataset.tool;
                
                if (currentTool === 'eraser') {
                    canvas.style.cursor = 'grab';
                } else {
                    canvas.style.cursor = 'crosshair';
                }
            });
        });

        // Color and size controls
        document.getElementById('colorPicker').addEventListener('change', (e) => {
            currentColor = e.target.value;
        });

        document.getElementById('sizeSlider').addEventListener('input', (e) => {
            currentSize = e.target.value;
        });

        // Media control functions
        function toggleMicrophone() {
            if (!localStream) return;

            const audioTrack = localStream.getAudioTracks()[0];
            if (audioTrack) {
                isAudioEnabled = !isAudioEnabled;
                audioTrack.enabled = isAudioEnabled;

                const micBtn = document.getElementById('micBtn');
                if (isAudioEnabled) {
                    micBtn.innerHTML = '<i class="fas fa-microphone"></i> On';
                    micBtn.classList.add('active');

                    // If student is enabling audio, ensure WebRTC connection exists
                    if (sessionData.user.role === 'student') {
                        ensureWebRTCConnectionToTeacher();
                    }
                } else {
                    micBtn.innerHTML = '<i class="fas fa-microphone-slash"></i> Off';
                    micBtn.classList.remove('active');
                }

                // Update audio track in existing peer connections
                Object.keys(peerConnections).forEach(async (userId) => {
                    const pc = peerConnections[userId];
                    const sender = pc.getSenders().find(s => s.track && s.track.kind === 'audio');
                    if (sender) {
                        try {
                            await sender.replaceTrack(isAudioEnabled ? audioTrack : null);
                            console.log('Audio track updated for user:', userId);
                        } catch (error) {
                            console.error('Error updating audio track:', error);
                        }
                    }
                });

                // Notify other participants
                socket.emit('audio-toggle', {
                    sessionId: sessionData.sessionId,
                    userId: sessionData.user.id,
                    enabled: isAudioEnabled
                });

                console.log('Microphone toggled:', isAudioEnabled);
            }
        }

        // Ensure WebRTC connection exists for student to send audio to teacher
        async function ensureWebRTCConnectionToTeacher() {
            if (sessionData.user.role !== 'student') return;

            try {
                const response = await fetch(`/api/whiteboard/${sessionData.sessionId}/participants`);
                const data = await response.json();

                if (data.success) {
                    const teacherParticipant = data.participants.find(p => p.role === 'teacher' && p.status === 'admitted');
                    if (teacherParticipant && !peerConnections[teacherParticipant.userId]) {
                        console.log('Creating WebRTC connection to teacher for audio');
                        await initiateWebRTCConnection(teacherParticipant.userId);
                    }
                }
            } catch (error) {
                console.error('Error ensuring WebRTC connection to teacher:', error);
            }
        }

        function toggleCamera() {
            if (!localStream) return;

            const videoTrack = localStream.getVideoTracks()[0];
            if (videoTrack) {
                isVideoEnabled = !isVideoEnabled;
                videoTrack.enabled = isVideoEnabled;

                const cameraBtn = document.getElementById('cameraBtn');
                const teacherVideo = document.getElementById('teacherVideo');
                const placeholder = document.getElementById('teacherVideoPlaceholder');

                if (isVideoEnabled) {
                    cameraBtn.innerHTML = '<i class="fas fa-video"></i> On';
                    cameraBtn.classList.add('active');

                    if (sessionData.user.role === 'teacher') {
                        teacherVideo.srcObject = localStream;
                        teacherVideo.style.display = 'block';
                        placeholder.style.display = 'none';
                        document.getElementById('teacherVideoControls').style.display = 'flex';
                    }

                    // Re-establish WebRTC connections with video
                    Object.keys(peerConnections).forEach(async (userId) => {
                        const pc = peerConnections[userId];
                        const sender = pc.getSenders().find(s => s.track && s.track.kind === 'video');
                        if (sender) {
                            try {
                                await sender.replaceTrack(videoTrack);
                                console.log('Video track replaced for user:', userId);
                            } catch (error) {
                                console.error('Error replacing video track:', error);
                            }
                        } else {
                            // Add video track if it doesn't exist
                            try {
                                pc.addTrack(videoTrack, localStream);
                                console.log('Video track added for user:', userId);
                            } catch (error) {
                                console.error('Error adding video track:', error);
                            }
                        }
                    });
                } else {
                    cameraBtn.innerHTML = '<i class="fas fa-video-slash"></i> Off';
                    cameraBtn.classList.remove('active');

                    if (sessionData.user.role === 'teacher') {
                        teacherVideo.style.display = 'none';
                        placeholder.style.display = 'flex';
                        document.getElementById('teacherVideoControls').style.display = 'none';
                    }

                    // Remove video track from peer connections
                    Object.keys(peerConnections).forEach(userId => {
                        const pc = peerConnections[userId];
                        const sender = pc.getSenders().find(s => s.track && s.track.kind === 'video');
                        if (sender) {
                            sender.replaceTrack(null);
                        }
                    });
                }

                // Notify other participants
                socket.emit('video-toggle', {
                    sessionId: sessionData.sessionId,
                    userId: sessionData.user.id,
                    enabled: isVideoEnabled
                });

                console.log('Camera toggled:', isVideoEnabled);
            }
        }

        function toggleStudentAudio() {
            if (sessionData.user.role !== 'teacher') return;

            isStudentAudioAllowed = !isStudentAudioAllowed;
            const btn = document.getElementById('studentAudioBtn');

            if (isStudentAudioAllowed) {
                btn.innerHTML = '<i class="fas fa-microphone"></i> Allowed';
                btn.classList.add('active');
            } else {
                btn.innerHTML = '<i class="fas fa-microphone-slash"></i> Muted';
                btn.classList.remove('active');
            }

            // Notify all students about audio permission change
            socket.emit('student-audio-permission', {
                sessionId: sessionData.sessionId,
                allowed: isStudentAudioAllowed
            });
        }

        function toggleTeacherAudio() {
            if (sessionData.user.role === 'teacher') {
                toggleMicrophone();
            }
        }

        function toggleTeacherVideo() {
            if (sessionData.user.role === 'teacher') {
                toggleCamera();
            }
        }

        function updateMediaControls() {
            // Update button states based on current media state
            const micBtn = document.getElementById('micBtn');
            const cameraBtn = document.getElementById('cameraBtn');

            if (micBtn) {
                micBtn.innerHTML = isAudioEnabled ?
                    '<i class="fas fa-microphone"></i> On' :
                    '<i class="fas fa-microphone-slash"></i> Off';
                micBtn.classList.toggle('active', isAudioEnabled);
            }

            if (cameraBtn) {
                cameraBtn.innerHTML = isVideoEnabled ?
                    '<i class="fas fa-video"></i> On' :
                    '<i class="fas fa-video-slash"></i> Off';
                cameraBtn.classList.toggle('active', isVideoEnabled);
            }
        }

        function showMediaError(message) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'permission-request-audio';
            errorDiv.innerHTML = `
                <i class="fas fa-exclamation-triangle me-2"></i>
                Media Error: ${message}
            `;

            const videoTab = document.getElementById('videoTab');
            videoTab.insertBefore(errorDiv, videoTab.firstChild);
        }

        // Volume control
        document.addEventListener('DOMContentLoaded', function() {
            const volumeSlider = document.getElementById('volumeSlider');
            if (volumeSlider) {
                volumeSlider.addEventListener('input', function() {
                    const volume = this.value / 100;

                    // Apply volume to all audio elements
                    document.querySelectorAll('video, audio').forEach(element => {
                        element.volume = volume;
                    });
                });
            }
        });

        // Sidebar tab switching
        function showSidebarTab(tabName) {
            document.querySelectorAll('.sidebar-tab').forEach(tab => tab.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.style.display = 'none');

            event.target.classList.add('active');
            document.getElementById(tabName + 'Tab').style.display = 'block';
        }

        // Display participants in the sidebar
        function displayParticipants(participants) {
            const participantsList = document.getElementById('participantsList');

            participantsList.innerHTML = participants.map(participant => {
                const avatar = participant.name.charAt(0).toUpperCase();
                const statusClass = participant.status === 'admitted' ? 'status-online' : 'status-waiting';
                const roleIcon = participant.role === 'teacher' ? 'fas fa-chalkboard-teacher' : 'fas fa-user-graduate';

                return `
                    <li class="participant-item">
                        <div class="participant-avatar">${avatar}</div>
                        <div class="participant-info">
                            <p class="participant-name">
                                <i class="${roleIcon} me-1"></i>${participant.name}
                            </p>
                            <p class="participant-role">${participant.role}</p>
                        </div>
                        <span class="participant-status ${statusClass}">${participant.status}</span>
                    </li>
                `;
            }).join('');
        }

        // Update participants list
        function updateParticipantsList() {
            fetch(`/api/whiteboard/${sessionData.sessionId}/participants`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        displayParticipants(data.participants.filter(p => p.status === 'admitted'));

                        // Update waiting participants for teachers
                        if (sessionData.user.role === 'teacher') {
                            displayWaitingParticipants(data.participants.filter(p => p.status === 'waiting'));
                        }
                    }
                })
                .catch(error => {
                    console.error('Error fetching participants:', error);
                });
        }

        // Display waiting participants (for teachers)
        function displayWaitingParticipants(waitingParticipants) {
            const waitingList = document.getElementById('waitingList');
            const waitingSection = document.querySelector('.permission-request');
            const waitingBadge = document.getElementById('waitingBadge');

            if (!waitingList) return;

            // Update badge
            if (waitingBadge) {
                if (waitingParticipants.length > 0) {
                    waitingBadge.textContent = waitingParticipants.length;
                    waitingBadge.style.display = 'inline';
                } else {
                    waitingBadge.style.display = 'none';
                }
            }

            if (waitingParticipants.length === 0) {
                if (waitingSection) {
                    waitingSection.style.display = 'none';
                }
                return;
            }

            if (waitingSection) {
                waitingSection.style.display = 'block';
            }

            waitingList.innerHTML = waitingParticipants.map(participant => `
                <div class="waiting-participant" data-user-id="${participant.userId}">
                    <div class="d-flex align-items-center justify-content-between mb-2 p-2 border rounded">
                        <div class="d-flex align-items-center">
                            <div class="participant-avatar me-2">${participant.name.charAt(0).toUpperCase()}</div>
                            <div>
                                <strong>${participant.name}</strong>
                                <br>
                                <small class="text-muted">${participant.email}</small>
                                <br>
                                <small class="text-muted">Joined: ${new Date(participant.joinedAt).toLocaleTimeString()}</small>
                            </div>
                        </div>
                        <div class="btn-group">
                            <button class="btn btn-sm btn-success" onclick="admitParticipant('${participant.userId}', '${participant.name}')">
                                <i class="fas fa-check me-1"></i>Admit
                            </button>
                            <button class="btn btn-sm btn-danger" onclick="denyParticipant('${participant.userId}', '${participant.name}')">
                                <i class="fas fa-times me-1"></i>Deny
                            </button>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Admit participant (teacher only)
        async function admitParticipant(userId, userName) {
            if (sessionData.user.role !== 'teacher') return;

            try {
                const response = await fetch(`/api/whiteboard/${sessionData.sessionId}/participants/${userId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: 'admitted' })
                });

                const data = await response.json();

                if (data.success) {
                    console.log(`${userName} admitted successfully`);

                    // Update participants list
                    updateParticipantsList();

                    // Add system message
                    addSystemMessage(`${userName} was admitted to the session`);

                    // Notify via socket
                    socket.emit('participant-admitted', {
                        sessionId: sessionData.sessionId,
                        userId: userId,
                        userName: userName
                    });
                } else {
                    alert('Error admitting participant: ' + data.error);
                }
            } catch (error) {
                console.error('Error admitting participant:', error);
                alert('Error admitting participant. Please try again.');
            }
        }

        // Deny participant (teacher only)
        async function denyParticipant(userId, userName) {
            if (sessionData.user.role !== 'teacher') return;

            if (!confirm(`Are you sure you want to deny ${userName} access to this session?`)) {
                return;
            }

            try {
                const response = await fetch(`/api/whiteboard/${sessionData.sessionId}/participants/${userId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ status: 'denied' })
                });

                const data = await response.json();

                if (data.success) {
                    console.log(`${userName} denied successfully`);

                    // Update participants list
                    updateParticipantsList();

                    // Add system message
                    addSystemMessage(`${userName} was denied access to the session`);

                    // Notify via socket
                    socket.emit('participant-denied', {
                        sessionId: sessionData.sessionId,
                        userId: userId,
                        userName: userName
                    });
                } else {
                    alert('Error denying participant: ' + data.error);
                }
            } catch (error) {
                console.error('Error denying participant:', error);
                alert('Error denying participant. Please try again.');
            }
        }

        // Send chat message
        function sendMessage(e) {
            e.preventDefault();
            const input = document.getElementById('messageInput');
            const message = input.value.trim();

            if (message) {
                console.log('Sending message:', message);
                socket.emit('chat-message', {
                    sessionId: sessionData.sessionId,
                    message: message
                });
                input.value = '';
            }
        }

        // Add chat message to UI
        function addChatMessage(message, scrollToBottom = true) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');

            // Determine if this is the current user's message
            const isOwnMessage = message.userId && message.userId.toString() === sessionData.user.id;
            const isSystemMessage = message.isSystemMessage || false;

            let messageClass = 'chat-message';
            if (isOwnMessage) messageClass += ' own';
            if (isSystemMessage) messageClass += ' system';

            messageDiv.className = messageClass;

            if (isSystemMessage) {
                messageDiv.innerHTML = `<p class="message-text">${message.message}</p>`;
            } else {
                const timestamp = message.timestamp ? new Date(message.timestamp) : new Date();
                messageDiv.innerHTML = `
                    <div class="message-sender">${message.userName || 'Unknown'}</div>
                    <p class="message-text">${message.message}</p>
                    <div class="message-time">${timestamp.toLocaleTimeString()}</div>
                `;
            }

            chatMessages.appendChild(messageDiv);

            if (scrollToBottom) {
                chatMessages.scrollTop = chatMessages.scrollHeight;
            }
        }

        // Add system message
        function addSystemMessage(text) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = 'chat-message system';
            messageDiv.innerHTML = `<p class="message-text">${text}</p>`;
            
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Canvas actions
        function clearCanvas() {
            if (sessionData.user.role === 'teacher') {
                if (confirm('Are you sure you want to clear the entire canvas?')) {
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    socket.emit('clear-canvas', sessionData.sessionId);
                }
            } else {
                alert('Only teachers can clear the canvas');
            }
        }

        function undoAction() {
            // Implement undo functionality
            console.log('Undo action');
        }

        function redoAction() {
            // Implement redo functionality
            console.log('Redo action');
        }

        // Show session end notification for students
        function showSessionEndNotification(data) {
            // Create a modal-like notification
            const notification = document.createElement('div');
            notification.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                display: flex;
                align-items: center;
                justify-content: center;
                z-index: 10000;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            `;

            const modal = document.createElement('div');
            modal.style.cssText = `
                background: white;
                border-radius: 15px;
                padding: 2rem;
                max-width: 500px;
                width: 90%;
                text-align: center;
                box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            `;

            const endTime = new Date(data.endTime).toLocaleTimeString();

            modal.innerHTML = `
                <div style="color: #dc3545; font-size: 3rem; margin-bottom: 1rem;">
                    <i class="fas fa-stop-circle"></i>
                </div>
                <h2 style="color: #333; margin-bottom: 1rem;">Live Class Ended</h2>
                <p style="color: #666; font-size: 1.1rem; margin-bottom: 1.5rem;">
                    ${data.message}
                </p>
                <div style="background: #f8f9fa; border-radius: 10px; padding: 1rem; margin-bottom: 1.5rem;">
                    <p style="margin: 0.5rem 0; color: #555;">
                        <strong>Session:</strong> ${data.sessionTitle}
                    </p>
                    <p style="margin: 0.5rem 0; color: #555;">
                        <strong>Teacher:</strong> ${data.teacherName}
                    </p>
                    <p style="margin: 0.5rem 0; color: #555;">
                        <strong>Duration:</strong> ${data.duration} minutes
                    </p>
                    <p style="margin: 0.5rem 0; color: #555;">
                        <strong>Ended at:</strong> ${endTime}
                    </p>
                </div>
                <button onclick="redirectToDashboard()" style="
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    border-radius: 25px;
                    padding: 1rem 2rem;
                    font-size: 1.1rem;
                    font-weight: 600;
                    cursor: pointer;
                    transition: transform 0.3s ease;
                " onmouseover="this.style.transform='translateY(-2px)'" onmouseout="this.style.transform='translateY(0)'">
                    <i class="fas fa-home" style="margin-right: 0.5rem;"></i>
                    Return to Dashboard
                </button>
            `;

            notification.appendChild(modal);
            document.body.appendChild(notification);

            // Auto-redirect after 10 seconds
            setTimeout(() => {
                redirectToDashboard();
            }, 10000);
        }

        function redirectToDashboard() {
            window.location.href = '/student/dashboard';
        }

        // Show session ending indicator
        function showSessionEndingIndicator() {
            // Add a red banner at the top
            const banner = document.createElement('div');
            banner.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                background: linear-gradient(135deg, #dc3545, #c82333);
                color: white;
                text-align: center;
                padding: 0.75rem;
                font-weight: 600;
                z-index: 9999;
                box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
                animation: slideDown 0.5s ease-out;
            `;

            banner.innerHTML = `
                <i class="fas fa-exclamation-triangle me-2"></i>
                Session is ending... You will be redirected shortly.
                <i class="fas fa-exclamation-triangle ms-2"></i>
            `;

            // Add animation keyframes
            if (!document.getElementById('sessionEndingStyles')) {
                const style = document.createElement('style');
                style.id = 'sessionEndingStyles';
                style.textContent = `
                    @keyframes slideDown {
                        from { transform: translateY(-100%); }
                        to { transform: translateY(0); }
                    }
                    @keyframes pulse {
                        0%, 100% { opacity: 1; }
                        50% { opacity: 0.7; }
                    }
                `;
                document.head.appendChild(style);
            }

            banner.style.animation = 'slideDown 0.5s ease-out, pulse 1s infinite';
            document.body.appendChild(banner);

            // Disable drawing and interactions
            const canvas = document.getElementById('whiteboardCanvas');
            canvas.style.pointerEvents = 'none';
            canvas.style.opacity = '0.7';

            // Disable toolbar
            const toolbar = document.querySelector('.toolbar');
            if (toolbar) {
                toolbar.style.opacity = '0.5';
                toolbar.style.pointerEvents = 'none';
            }
        }

        // Session actions
        function endSession() {
            if (confirm('Are you sure you want to end this session? All students will be notified and disconnected.')) {
                socket.emit('end-session', sessionData.sessionId);
            }
        }

        function leaveSession() {
            if (confirm('Are you sure you want to leave this session?')) {
                socket.emit('leave-session', sessionData.sessionId);
                window.location.href = sessionData.user.role === 'teacher' ? '/whiteboard/dashboard' : '/student/dashboard';
            }
        }

        // WebRTC functions
        async function createPeerConnection(userId) {
            // console.log('Creating peer connection for user:', userId);
            const peerConnection = new RTCPeerConnection(rtcConfig);

            // Add local stream to peer connection
            if (localStream) {
                localStream.getTracks().forEach(track => {
                    // console.log('Adding track to peer connection:', track.kind);
                    peerConnection.addTrack(track, localStream);
                });
            }

            // Handle remote stream
            peerConnection.ontrack = (event) => {
                console.log('Received remote stream from:', userId);
                const remoteStream = event.streams[0];
                if (remoteStream) {
                    displayRemoteVideo(userId, remoteStream);
                }
            };

            // Handle ICE candidates
            peerConnection.onicecandidate = (event) => {
                if (event.candidate) {
                    // console.log('Sending ICE candidate to:', userId);
                    socket.emit('webrtc-ice-candidate', {
                        sessionId: sessionData.sessionId,
                        targetUserId: userId,
                        candidate: event.candidate
                    });
                }
            };

            // Handle connection state changes
            peerConnection.onconnectionstatechange = () => {
                if (peerConnection.connectionState === 'failed' || peerConnection.connectionState === 'disconnected') {
                    console.log('Connection issue for', userId, ':', peerConnection.connectionState);
                }
            };

            peerConnections[userId] = peerConnection;
            return peerConnection;
        }

        // Initiate WebRTC connection (called by the initiator)
        async function initiateWebRTCConnection(targetUserId) {
            try {
                console.log('Initiating WebRTC connection to:', targetUserId);

                if (!localStream) {
                    console.log('No local stream available, skipping WebRTC initiation');
                    return;
                }

                // Don't create duplicate connections
                if (peerConnections[targetUserId]) {
                    console.log('Peer connection already exists for:', targetUserId);
                    return;
                }

                const peerConnection = await createPeerConnection(targetUserId);
                const offer = await peerConnection.createOffer();
                await peerConnection.setLocalDescription(offer);

                console.log('Sending WebRTC offer to:', targetUserId);
                socket.emit('webrtc-offer', {
                    sessionId: sessionData.sessionId,
                    targetUserId: targetUserId,
                    offer: offer
                });
            } catch (error) {
                console.error('Error initiating WebRTC connection:', error);
            }
        }

        // Initiate WebRTC for existing participants
        async function initiateWebRTCForExistingParticipants() {
            try {
                const response = await fetch(`/api/whiteboard/${sessionData.sessionId}/participants`);
                const data = await response.json();

                if (data.success) {
                    const admittedParticipants = data.participants.filter(p =>
                        p.status === 'admitted' && p.userId !== sessionData.user.id
                    );

                    console.log('Found admitted participants:', admittedParticipants);

                    if (sessionData.user.role === 'teacher') {
                        // Teacher initiates connections to all students
                        for (const participant of admittedParticipants) {
                            if (localStream && !peerConnections[participant.userId]) {
                                console.log('Teacher initiating connection to student:', participant.name);
                                await new Promise(resolve => setTimeout(resolve, 500));
                                await initiateWebRTCConnection(participant.userId);
                            }
                        }
                    } else if (sessionData.user.role === 'student') {
                        // Student initiates connection to teacher if they have audio/video permissions
                        const teacherParticipant = admittedParticipants.find(p => p.role === 'teacher');
                        if (teacherParticipant && localStream && !peerConnections[teacherParticipant.userId]) {
                            const hasAudioPermission = sessionData.participant.permissions && sessionData.participant.permissions.canSpeak;
                            const hasVideoPermission = sessionData.participant.permissions && sessionData.participant.permissions.canVideo;

                            if (hasAudioPermission || hasVideoPermission) {
                                console.log('Student initiating connection to teacher for audio/video');
                                await new Promise(resolve => setTimeout(resolve, 1000));
                                await initiateWebRTCConnection(teacherParticipant.userId);
                            }
                        }
                    }
                }
            } catch (error) {
                console.error('Error initiating WebRTC for existing participants:', error);
            }
        }

        async function handleWebRTCOffer(data) {
            try {
                const peerConnection = await createPeerConnection(data.fromUserId);
                await peerConnection.setRemoteDescription(data.offer);

                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);

                socket.emit('webrtc-answer', {
                    sessionId: sessionData.sessionId,
                    targetUserId: data.fromUserId,
                    answer: answer
                });
            } catch (error) {
                console.error('Error handling WebRTC offer:', error);
            }
        }

        async function handleWebRTCAnswer(data) {
            try {
                const peerConnection = peerConnections[data.fromUserId];
                if (peerConnection) {
                    await peerConnection.setRemoteDescription(data.answer);
                }
            } catch (error) {
                console.error('Error handling WebRTC answer:', error);
            }
        }

        async function handleICECandidate(data) {
            try {
                const peerConnection = peerConnections[data.fromUserId];
                if (peerConnection) {
                    await peerConnection.addIceCandidate(data.candidate);
                }
            } catch (error) {
                console.error('Error handling ICE candidate:', error);
            }
        }

        function displayRemoteVideo(userId, stream) {
            console.log('Displaying remote video for user:', userId);
            // console.log('Current user role:', sessionData.user.role);

            // For students viewing teacher video
            if (sessionData.user.role === 'student') {
                const teacherVideoElement = document.getElementById('teacherVideo');
                const placeholder = document.getElementById('teacherVideoPlaceholder');
                const controls = document.getElementById('teacherVideoControls');

                if (teacherVideoElement && stream) {
                    console.log('Setting teacher video stream for student');
                    teacherVideoElement.srcObject = stream;
                    teacherVideoElement.style.display = 'block';
                    teacherVideoElement.muted = false; // Students should hear teacher

                    // Hide placeholder and show controls
                    if (placeholder) {
                        placeholder.style.display = 'none';
                    }
                    if (controls) {
                        controls.style.display = 'flex';
                    }

                    // Ensure video plays
                    teacherVideoElement.play().catch(e => {
                        console.error('Error playing teacher video:', e);
                    });

                    console.log('Teacher video should now be visible to student');
                }
            } else if (sessionData.user.role === 'teacher') {
                // Teacher receiving student audio/video

                // Remove existing video element if it exists
                const existingVideo = document.getElementById(`video-${userId}`);
                if (existingVideo) {
                    existingVideo.remove();
                }

                // Create new video element for student
                const video = document.createElement('video');
                video.id = `video-${userId}`;
                video.srcObject = stream;
                video.autoplay = true;
                video.playsInline = true;
                video.muted = false; // Teacher should hear student audio
                video.controls = false;
                video.className = 'student-video';

                // Add error handling
                video.onerror = (e) => {
                    console.error('Student video error:', e);
                };

                video.onloadedmetadata = () => {
                    console.log('Student video metadata loaded for user:', userId);
                    video.play().catch(e => console.error('Error playing student video:', e));
                };

                // Check if stream has video tracks
                const hasVideo = stream.getVideoTracks().length > 0;
                const hasAudio = stream.getAudioTracks().length > 0;

                console.log(`Student ${userId} stream - Video: ${hasVideo}, Audio: ${hasAudio}`);

                if (hasVideo) {
                    // Add to student videos grid if there's video
                    const studentVideos = document.getElementById('studentVideos');
                    if (studentVideos) {
                        studentVideos.appendChild(video);
                        console.log('Student video added to grid for user:', userId);
                    }
                } else if (hasAudio) {
                    // For audio-only, create a hidden video element to play audio
                    video.style.display = 'none';
                    document.body.appendChild(video);
                    console.log('Student audio-only stream added for user:', userId);

                    // Show audio indicator in student list
                    updateStudentAudioIndicator(userId, true);
                }
            }
        }

        function updateParticipantAudioStatus(userId, enabled) {
            const video = document.getElementById(`video-${userId}`);
            if (video) {
                // Add visual indicator for audio status
                video.classList.toggle('speaking', enabled);
            }

            // Update audio indicator
            updateStudentAudioIndicator(userId, enabled);

            // Update participant list if needed
            updateParticipantsList();
        }

        function updateStudentAudioIndicator(userId, hasAudio) {
            // Find or create audio indicator for student
            let indicator = document.getElementById(`audio-indicator-${userId}`);

            if (hasAudio && !indicator) {
                // Create audio indicator
                indicator = document.createElement('div');
                indicator.id = `audio-indicator-${userId}`;
                indicator.className = 'student-audio-indicator';
                indicator.innerHTML = `
                    <div class="audio-indicator-content">
                        <i class="fas fa-microphone text-success"></i>
                        <span>Student Audio Active</span>
                    </div>
                `;
                indicator.style.cssText = `
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    background: rgba(40, 167, 69, 0.9);
                    color: white;
                    padding: 0.5rem 1rem;
                    border-radius: 20px;
                    font-size: 0.875rem;
                    z-index: 1000;
                    animation: fadeIn 0.3s ease;
                `;

                document.body.appendChild(indicator);

                // Auto-hide after 3 seconds
                setTimeout(() => {
                    if (indicator && indicator.parentNode) {
                        indicator.remove();
                    }
                }, 3000);
            } else if (!hasAudio && indicator) {
                // Remove audio indicator
                indicator.remove();
            }
        }

        function updateParticipantVideoStatus(userId, enabled) {
            const video = document.getElementById(`video-${userId}`);
            if (video && !enabled) {
                // Hide video when disabled
                video.style.display = 'none';
            } else if (video && enabled) {
                video.style.display = 'block';
            }
        }

        function updateStudentAudioPermission(allowed) {
            const micBtn = document.getElementById('micBtn');
            const permissionDiv = document.querySelector('.permission-request-audio');

            if (allowed) {
                if (permissionDiv) {
                    permissionDiv.style.display = 'none';
                }
                if (micBtn) {
                    micBtn.style.display = 'block';
                }

                // If student now has audio permission, initiate WebRTC connection to teacher
                if (sessionData.user.role === 'student' && localStream) {
                    setTimeout(async () => {
                        try {
                            const response = await fetch(`/api/whiteboard/${sessionData.sessionId}/participants`);
                            const data = await response.json();

                            if (data.success) {
                                const teacherParticipant = data.participants.find(p => p.role === 'teacher' && p.status === 'admitted');
                                if (teacherParticipant && !peerConnections[teacherParticipant.userId]) {
                                    console.log('Student initiating WebRTC connection to teacher after audio permission granted');
                                    await initiateWebRTCConnection(teacherParticipant.userId);
                                }
                            }
                        } catch (error) {
                            console.error('Error initiating WebRTC after audio permission:', error);
                        }
                    }, 1000);
                }
            } else {
                if (permissionDiv) {
                    permissionDiv.style.display = 'block';
                }
                if (micBtn) {
                    micBtn.style.display = 'none';
                }

                // Mute student if audio was enabled
                if (isAudioEnabled) {
                    toggleMicrophone();
                }
            }
        }

        // Debug function to check audio/video status
        function debugVideoStatus() {
            console.log('=== AUDIO/VIDEO DEBUG STATUS ===');
            console.log('User role:', sessionData.user.role);
            console.log('Local stream:', localStream);
            console.log('Audio enabled:', isAudioEnabled);
            console.log('Video enabled:', isVideoEnabled);
            console.log('Peer connections:', Object.keys(peerConnections));

            // Check permissions
            if (sessionData.participant && sessionData.participant.permissions) {
                console.log('Student permissions:', {
                    canSpeak: sessionData.participant.permissions.canSpeak,
                    canVideo: sessionData.participant.permissions.canVideo
                });
            }

            const teacherVideo = document.getElementById('teacherVideo');
            const placeholder = document.getElementById('teacherVideoPlaceholder');

            console.log('Teacher video element:', teacherVideo);
            console.log('Teacher video src:', teacherVideo ? teacherVideo.srcObject : 'N/A');
            console.log('Teacher video display:', teacherVideo ? teacherVideo.style.display : 'N/A');
            console.log('Placeholder display:', placeholder ? placeholder.style.display : 'N/A');

            if (localStream) {
                console.log('Local stream tracks:', localStream.getTracks().map(t => ({
                    kind: t.kind,
                    enabled: t.enabled,
                    readyState: t.readyState
                })));
            }

            Object.keys(peerConnections).forEach(userId => {
                const pc = peerConnections[userId];
                console.log(`Peer connection ${userId}:`, {
                    connectionState: pc.connectionState,
                    iceConnectionState: pc.iceConnectionState,
                    signalingState: pc.signalingState,
                    senders: pc.getSenders().map(s => ({
                        track: s.track ? s.track.kind : 'no track',
                        enabled: s.track ? s.track.enabled : 'N/A'
                    })),
                    receivers: pc.getReceivers().map(r => ({
                        track: r.track ? r.track.kind : 'no track'
                    }))
                });
            });

            // Check for student video elements
            const studentVideos = document.querySelectorAll('.student-video');
            console.log('Student video elements:', studentVideos.length);
            studentVideos.forEach((video, index) => {
                console.log(`Student video ${index}:`, {
                    id: video.id,
                    srcObject: video.srcObject,
                    muted: video.muted,
                    display: video.style.display
                });
            });

            console.log('=== END AUDIO/VIDEO DEBUG ===');
        }

        // Make debug function available globally
        window.debugVideoStatus = debugVideoStatus;

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', initializeWhiteboard);
        window.addEventListener('resize', resizeCanvas);
    </script>
</body>
</html>
