<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Podcast - SkillOns</title>
    <link rel="stylesheet" href="/css/style.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
        .podcast-creation-container {
            max-width: 1200px;
            margin: 20px auto;
            padding: 20px;
        }
        
        .creation-tabs {
            display: flex;
            border-bottom: 2px solid #e0e0e0;
            margin-bottom: 30px;
        }
        
        .tab-btn {
            padding: 15px 30px;
            border: none;
            background: none;
            cursor: pointer;
            font-size: 16px;
            color: #666;
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
        }
        
        .tab-btn.active {
            color: #007bff;
            border-bottom-color: #007bff;
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .recording-section {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
        }
        
        .recording-controls {
            display: flex;
            gap: 15px;
            margin: 20px 0;
            flex-wrap: wrap;
        }
        
        .record-btn {
            background: #dc3545;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
        }
        
        .record-btn:hover {
            background: #c82333;
            transform: scale(1.05);
        }
        
        .record-btn.recording {
            background: #28a745;
            animation: pulse 1.5s infinite;
        }
        
        .control-btn {
            background: #6c757d;
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.3s ease;
        }
        
        .control-btn:hover {
            background: #5a6268;
        }
        
        .control-btn:disabled {
            background: #dee2e6;
            cursor: not-allowed;
        }
        
        .audio-visualizer {
            width: 100%;
            height: 100px;
            background: #fff;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            margin: 20px 0;
            position: relative;
            overflow: hidden;
        }
        
        .waveform {
            width: 100%;
            height: 100%;
        }
        
        .recording-timer {
            font-size: 24px;
            font-weight: bold;
            color: #dc3545;
            text-align: center;
            margin: 20px 0;
        }
        
        .upload-section {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
        }
        
        .file-upload-area {
            border: 3px dashed #dee2e6;
            border-radius: 15px;
            padding: 60px 20px;
            text-align: center;
            background: white;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .file-upload-area:hover {
            border-color: #007bff;
            background: #f8f9ff;
        }
        
        .file-upload-area.dragover {
            border-color: #28a745;
            background: #f8fff8;
        }
        
        .upload-icon {
            font-size: 48px;
            color: #6c757d;
            margin-bottom: 15px;
        }
        
        .upload-text {
            font-size: 18px;
            color: #666;
            margin-bottom: 10px;
        }
        
        .upload-hint {
            font-size: 14px;
            color: #999;
        }
        
        .audio-preview {
            margin: 20px 0;
            padding: 20px;
            background: white;
            border-radius: 10px;
            border: 1px solid #dee2e6;
        }
        
        .audio-player {
            width: 100%;
            margin: 15px 0;
        }
        
        .upload-actions {
            text-align: center;
            margin-top: 15px;
        }
        
        .upload-actions .btn {
            margin: 0 5px;
        }
        
        .editing-tools {
            background: #f8f9fa;
            padding: 30px;
            border-radius: 15px;
            margin-bottom: 30px;
        }
        
        .tool-group {
            margin-bottom: 25px;
        }
        
        .tool-label {
            font-weight: bold;
            margin-bottom: 10px;
            display: block;
        }
        
        .trim-controls {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        
        .trim-input {
            width: 120px;
            padding: 8px;
            border: 1px solid #ced4da;
            border-radius: 5px;
        }
        
        .form-group {
            margin-bottom: 20px;
        }
        
        .form-label {
            font-weight: bold;
            margin-bottom: 8px;
            display: block;
        }
        
        .form-input {
            width: 100%;
            padding: 12px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            font-size: 16px;
        }
        
        .form-textarea {
            width: 100%;
            padding: 12px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            font-size: 16px;
            min-height: 100px;
            resize: vertical;
        }
        
        .form-select {
            width: 100%;
            padding: 12px;
            border: 1px solid #ced4da;
            border-radius: 8px;
            font-size: 16px;
            background: white;
        }
        
        .checkbox-group {
            display: flex;
            align-items: center;
            gap: 10px;
            margin: 15px 0;
        }
        
        .checkbox-input {
            width: 18px;
            height: 18px;
        }
        
        .submit-btn {
            background: #28a745;
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 8px;
            font-size: 18px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .submit-btn:hover {
            background: #218838;
            transform: translateY(-2px);
        }
        
        .submit-btn:disabled {
            background: #6c757d;
            cursor: not-allowed;
        }
        
        .audio-status {
            margin: 15px 0;
            padding: 10px 15px;
            border-radius: 8px;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .audio-status.text-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .audio-status.text-warning {
            background: #fff3cd;
            color: #856404;
            border: 1px solid #ffeaa7;
        }
        
        .status-message {
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            display: none;
        }
        
        .status-success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .status-error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
        
        .progress-bar {
            width: 100%;
            height: 8px;
            background: #e9ecef;
            border-radius: 4px;
            overflow: hidden;
            margin: 15px 0;
        }
        
        .progress-fill {
            height: 100%;
            background: #007bff;
            width: 0%;
            transition: width 0.3s ease;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="/">SkillOns</a>
            </div>
            <div class="nav-menu">
                <a href="/teacher/dashboard" class="nav-link">Dashboard</a>
                <a href="/create-quiz" class="nav-link">Create Quiz</a>
                <a href="/create-podcast" class="nav-link active">Create Podcast</a>
                <a href="/logout" class="nav-link logout-btn">Logout</a>
            </div>
        </div>
    </nav>

    <main class="main-content">
        <div class="podcast-creation-container">
            <h1><i class="fas fa-podcast"></i> Create Podcast</h1>
            
            <div class="creation-tabs">
                <button class="tab-btn active" onclick="switchTab('recording')">
                    <i class="fas fa-microphone"></i> Record Audio
                </button>
                <button class="tab-btn" onclick="switchTab('upload')">
                    <i class="fas fa-upload"></i> Upload Audio
                </button>
                <button class="tab-btn" onclick="switchTab('editing')">
                    <i class="fas fa-edit"></i> Edit & Enhance
                </button>
                <button class="tab-btn" onclick="switchTab('details')">
                    <i class="fas fa-info-circle"></i> Podcast Details
                </button>
            </div>

            <!-- Recording Tab -->
            <div id="recording" class="tab-content active">
                <div class="recording-section">
                    <h2><i class="fas fa-microphone"></i> Record Your Podcast</h2>
                    <p>Use your microphone to record audio directly in the browser.</p>
                    
                    <div class="recording-controls">
                        <button id="recordBtn" class="record-btn" onclick="toggleRecording()">
                            <i class="fas fa-microphone"></i> Start Recording
                        </button>
                        <button id="pauseBtn" class="control-btn" onclick="pauseRecording()" disabled>
                            <i class="fas fa-pause"></i> Pause
                        </button>
                        <button id="stopBtn" class="control-btn" onclick="stopRecording()" disabled>
                            <i class="fas fa-stop"></i> Stop
                        </button>
                        <button id="resetBtn" class="control-btn" onclick="resetRecording()" disabled>
                            <i class="fas fa-redo"></i> Re-record
                        </button>
                    </div>
                    
                    <div class="recording-timer" id="recordingTimer">00:00</div>
                    
                    <div class="audio-visualizer">
                        <canvas id="waveform" class="waveform"></canvas>
                    </div>
                    
                    <div id="recordingStatus" class="status-message"></div>
                </div>
            </div>

            <!-- Upload Tab -->
            <div id="upload" class="tab-content">
                <div class="upload-section">
                    <h2><i class="fas fa-upload"></i> Upload Audio File</h2>
                    <p>Upload an existing audio file (MP3, WAV, OGG, M4A).</p>
                    
                    <div class="file-upload-area" id="fileUploadArea" onclick="document.getElementById('audioFile').click()">
                        <div class="upload-icon">
                            <i class="fas fa-cloud-upload-alt"></i>
                        </div>
                        <div class="upload-text">Click to select audio file or drag & drop</div>
                        <div class="upload-hint">Supported formats: MP3, WAV, OGG, M4A (Max: 50MB)</div>
                    </div>
                    
                    <input type="file" id="audioFile" accept="audio/*" style="display: none;" onchange="handleFileUpload(event)">
                    
                    <div id="audioPreview" class="audio-preview" style="display: none;">
                        <h4>Audio Preview</h4>
                        <audio id="audioPlayer" class="audio-player" controls>
                            Your browser does not support the audio element.
                        </audio>
                        <div class="progress-bar">
                            <div class="progress-fill" id="uploadProgress"></div>
                        </div>
                    </div>
                    
                    <div id="uploadStatus" class="status-message"></div>
                    
                    <!-- Clear Upload Button -->
                    <div class="upload-actions" style="margin-top: 15px;">
                        <button type="button" class="btn btn-outline-secondary" onclick="clearUploadedFile()">
                            <i class="fas fa-times"></i> Clear Upload
                        </button>
                    </div>
                </div>
            </div>

            <!-- Editing Tab -->
            <div id="editing" class="tab-content">
                <div class="editing-tools">
                    <h2><i class="fas fa-edit"></i> Audio Editing Tools</h2>
                    <p>Enhance your podcast with basic editing features.</p>
                    
                    <div class="tool-group">
                        <label class="tool-label">Trim Audio</label>
                        <div class="trim-controls">
                            <div>
                                <label>Start (seconds):</label>
                                <input type="number" id="trimStart" class="trim-input" min="0" value="0" step="0.1">
                            </div>
                            <div>
                                <label>End (seconds):</label>
                                <input type="number" id="trimEnd" class="trim-input" min="0" value="0" step="0.1">
                            </div>
                        </div>
                    </div>
                    
                    <div class="tool-group">
                        <label class="tool-label">Audio Enhancement</label>
                        <div class="checkbox-group">
                            <input type="checkbox" id="noiseReduction" class="checkbox-input">
                            <label for="noiseReduction">Basic noise reduction</label>
                        </div>
                    </div>
                    
                    <div class="tool-group">
                        <label class="tool-label">Transcription</label>
                        <div class="checkbox-group">
                            <input type="checkbox" id="enableTranscription" class="checkbox-input">
                            <label for="enableTranscription">Generate automatic transcript</label>
                        </div>
                        <div id="transcriptionSection" style="display: none;">
                            <textarea id="transcriptionText" class="form-textarea" placeholder="Edit the generated transcript here..."></textarea>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Details Tab -->
            <div id="details" class="tab-content">
                <div class="editing-tools">
                    <h2><i class="fas fa-info-circle"></i> Podcast Information</h2>
                    <p>Fill in the details for your podcast.</p>
                    
                    <!-- Existing Podcasts Dropdown -->
                    <div class="form-group">
                        <label class="form-label">Select Existing Podcast (Optional)</label>
                        <select id="existingPodcastSelect" class="form-select" onchange="loadExistingPodcast()">
                            <option value="">-- Create New Podcast --</option>
                        </select>
                        <small class="form-text">Choose an existing podcast to edit, or leave as "Create New Podcast" to create a new one.</small>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Podcast Title *</label>
                        <input type="text" id="podcastTitle" class="form-input" placeholder="Enter podcast title" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Description *</label>
                        <textarea id="podcastDescription" class="form-textarea" placeholder="Describe your podcast content..." required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Grade Level *</label>
                        <select id="gradeLevel" class="form-select" required>
                            <option value="">Select Grade Level</option>
                            <option value="1st grade">1st Grade</option>
                            <option value="2nd grade">2nd Grade</option>
                            <option value="3rd grade">3rd Grade</option>
                            <option value="4th grade">4th Grade</option>
                            <option value="5th grade">5th Grade</option>
                            <option value="6th grade">6th Grade</option>
                            <option value="7th grade">7th Grade</option>
                            <option value="8th grade">8th Grade</option>
                            <option value="9th grade">9th Grade</option>
                            <option value="10th grade">10th Grade</option>
                            <option value="11th grade">11th Grade</option>
                            <option value="12th grade">12th Grade</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Subjects</label>
                        <select id="subjects" class="form-select" multiple>
                            <option value="English">English</option>
                            <option value="Science">Science</option>
                            <option value="Math">Math</option>
                            <option value="History">History</option>
                            <option value="Geography">Geography</option>
                            <option value="Literature">Literature</option>
                            <option value="Art">Art</option>
                            <option value="Music">Music</option>
                            <option value="Physical Education">Physical Education</option>
                            <option value="Computer Science">Computer Science</option>
                        </select>
                        <small>Hold Ctrl/Cmd to select multiple subjects</small>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">Tags</label>
                        <input type="text" id="podcastTags" class="form-input" placeholder="Enter tags separated by commas (e.g., math, algebra, equations)">
                    </div>
                    
                    <!-- Audio Status Indicator -->
                    <div id="audioStatus" class="audio-status text-warning">
                        <i class="fas fa-exclamation-circle"></i> No audio file
                    </div>
                    
                    <button id="submitBtn" class="submit-btn" onclick="createPodcast()" disabled>
                        <i class="fas fa-save"></i> Create Podcast
                    </button>
                    
                    <div id="submitStatus" class="status-message"></div>
                </div>
            </div>
        </div>
    </main>

    <script>
        let mediaRecorder;
        let audioChunks = [];
        let audioBlob;
        let recordingStartTime;
        let recordingTimer;
        let isRecording = false;
        let isPaused = false;
        let currentAudioFile = null;
        let currentAudioDuration = 0;

        // Tab switching
        function switchTab(tabName) {
            // Hide all tab contents
            document.querySelectorAll('.tab-content').forEach(tab => {
                tab.classList.remove('active');
            });
            
            // Remove active class from all tab buttons
            document.querySelectorAll('.tab-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            
            // Show selected tab content
            document.getElementById(tabName).classList.add('active');
            
            // Add active class to clicked button
            event.target.classList.add('active');
        }

        // Recording functions
        async function toggleRecording() {
            if (!isRecording) {
                await startRecording();
            } else {
                pauseRecording();
            }
        }

        async function startRecording() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
                mediaRecorder = new MediaRecorder(stream);
                audioChunks = [];
                
                mediaRecorder.ondataavailable = (event) => {
                    audioChunks.push(event.data);
                };
                
                mediaRecorder.onstop = () => {
                    audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                    // Convert Blob to File object for proper form submission
                    currentAudioFile = new File([audioBlob], 'recorded-audio.wav', { type: 'audio/wav' });
                    currentAudioDuration = Math.round(audioBlob.size / 16000); // Rough estimate
                    updateRecordingStatus('Recording completed!', 'success');
                    enableRecordingControls(false);
                    
                    // Enable submit button since we now have audio
                    checkFormValidity();
                };
                
                mediaRecorder.start();
                isRecording = true;
                isPaused = false;
                recordingStartTime = Date.now();
                startRecordingTimer();
                
                document.getElementById('recordBtn').innerHTML = '<i class="fas fa-pause"></i> Pause Recording';
                document.getElementById('recordBtn').classList.add('recording');
                document.getElementById('pauseBtn').disabled = false;
                document.getElementById('stopBtn').disabled = false;
                document.getElementById('resetBtn').disabled = false;
                
                updateRecordingStatus('Recording...', 'success');
            } catch (error) {
                console.error('Error starting recording:', error);
                updateRecordingStatus('Error: Could not access microphone', 'error');
            }
        }

        function pauseRecording() {
            if (mediaRecorder && isRecording) {
                if (isPaused) {
                    mediaRecorder.resume();
                    document.getElementById('pauseBtn').innerHTML = '<i class="fas fa-pause"></i> Pause';
                    isPaused = false;
                    startRecordingTimer();
                } else {
                    mediaRecorder.pause();
                    document.getElementById('pauseBtn').innerHTML = '<i class="fas fa-play"></i> Resume';
                    isPaused = true;
                    clearInterval(recordingTimer);
                }
            }
        }

        function stopRecording() {
            if (mediaRecorder && isRecording) {
                mediaRecorder.stop();
                isRecording = false;
                clearInterval(recordingTimer);
                
                // Stop all tracks
                mediaRecorder.stream.getTracks().forEach(track => track.stop());
                
                document.getElementById('recordBtn').innerHTML = '<i class="fas fa-microphone"></i> Start Recording';
                document.getElementById('recordBtn').classList.remove('recording');
            }
        }

        function resetRecording() {
            audioChunks = [];
            audioBlob = null;
            currentAudioFile = null;
            currentAudioDuration = 0;
            clearInterval(recordingTimer);
            document.getElementById('recordingTimer').textContent = '00:00';
            updateRecordingStatus('', '');
            enableRecordingControls(true);
        }

        function startRecordingTimer() {
            recordingTimer = setInterval(() => {
                const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);
                const minutes = Math.floor(elapsed / 60);
                const seconds = elapsed % 60;
                document.getElementById('recordingTimer').textContent = 
                    `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }, 1000);
        }

        function enableRecordingControls(enable) {
            document.getElementById('pauseBtn').disabled = enable;
            document.getElementById('stopBtn').disabled = enable;
            document.getElementById('resetBtn').disabled = enable;
        }

        function updateRecordingStatus(message, type) {
            const statusDiv = document.getElementById('recordingStatus');
            if (message) {
                statusDiv.textContent = message;
                statusDiv.className = `status-message status-${type}`;
                statusDiv.style.display = 'block';
            } else {
                statusDiv.style.display = 'none';
            }
        }

        // File upload functions
        function handleFileUpload(event) {
            const file = event.target.files[0];
            if (file) {
                if (file.size > 50 * 1024 * 1024) { // 50MB limit
                    updateUploadStatus('File size too large. Maximum size is 50MB.', 'error');
                    return;
                }
                
                console.log('=== FILE UPLOAD DEBUG ===');
                console.log('File uploaded:', file);
                console.log('File name:', file.name);
                console.log('File type:', file.type);
                console.log('File size:', file.size);
                
                currentAudioFile = file;
                currentAudioDuration = 0; // Will be calculated when audio loads
                
                // Create audio preview
                const audioPlayer = document.getElementById('audioPlayer');
                audioPlayer.src = URL.createObjectURL(file);
                
                // Calculate duration when audio loads
                audioPlayer.onloadedmetadata = () => {
                    currentAudioDuration = Math.round(audioPlayer.duration);
                    console.log('Audio duration calculated:', currentAudioDuration, 'seconds');
                    
                    // Update form validation after duration is calculated
                    checkFormValidity();
                };
                
                // Handle audio load errors
                audioPlayer.onerror = () => {
                    console.error('Error loading audio file');
                    updateUploadStatus('Error loading audio file. Please try a different file.', 'error');
                    currentAudioFile = null;
                    checkFormValidity();
                };
                
                // Show audio preview
                document.getElementById('audioPreview').style.display = 'block';
                updateUploadStatus('File uploaded successfully! Audio duration: Calculating...', 'success');
                
                // Update form validation immediately
                checkFormValidity();
                
                console.log('File upload completed. currentAudioFile:', currentAudioFile);
            }
        }

        function updateUploadStatus(message, type) {
            const statusDiv = document.getElementById('uploadStatus');
            statusDiv.textContent = message;
            statusDiv.className = `status-message status-${type}`;
            statusDiv.style.display = 'block';
        }

        // Function to clear uploaded file
        function clearUploadedFile() {
            currentAudioFile = null;
            currentAudioDuration = 0;
            
            // Clear file input
            document.getElementById('audioFile').value = '';
            
            // Hide audio preview
            document.getElementById('audioPreview').style.display = 'none';
            
            // Clear audio player
            const audioPlayer = document.getElementById('audioPlayer');
            audioPlayer.src = '';
            
            // Update form validation
            checkFormValidity();
            
            // Update upload status
            updateUploadStatus('No file uploaded', 'warning');
            
            console.log('Uploaded file cleared');
        }

        // Transcription toggle
        document.getElementById('enableTranscription').addEventListener('change', function() {
            const transcriptionSection = document.getElementById('transcriptionSection');
            transcriptionSection.style.display = this.checked ? 'block' : 'none';
        });

        // Create podcast function
        async function createPodcast() {
            console.log('=== PODCAST CREATION DEBUG ===');
            console.log('Current audio file:', currentAudioFile);
            console.log('Audio file type:', currentAudioFile ? currentAudioFile.type : 'No file');
            console.log('Audio file size:', currentAudioFile ? currentAudioFile.size : 'No file');
            console.log('Audio file name:', currentAudioFile ? currentAudioFile.name : 'No file');
            console.log('Audio file constructor:', currentAudioFile ? currentAudioFile.constructor.name : 'No file');
            
            if (!currentAudioFile) {
                updateSubmitStatus('Please record or upload an audio file first.', 'error');
                return;
            }
            
            const title = document.getElementById('podcastTitle').value.trim();
            const description = document.getElementById('podcastDescription').value.trim();
            const gradeLevel = document.getElementById('gradeLevel').value;
            
            console.log('Form data:', { title, description, gradeLevel });
            
            if (!title || !description || !gradeLevel) {
                updateSubmitStatus('Please fill in all required fields.', 'error');
                return;
            }
            
            // Get selected subjects
            const subjectsSelect = document.getElementById('subjects');
            const subjects = Array.from(subjectsSelect.selectedOptions).map(option => option.value);
            
            // Get tags
            const tagsInput = document.getElementById('podcastTags').value.trim();
            const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()) : [];
            
            // Get transcription
            const transcription = document.getElementById('transcriptionText').value.trim();
            const isTranscriptionEnabled = document.getElementById('enableTranscription').checked;
            
            console.log('Additional data:', { subjects, tags, transcription, isTranscriptionEnabled, currentAudioDuration });
            
            try {
                const formData = new FormData();
                formData.append('audioFile', currentAudioFile);
                formData.append('title', title);
                formData.append('description', description);
                formData.append('gradeLevel', gradeLevel);
                formData.append('subjects', JSON.stringify(subjects));
                formData.append('tags', JSON.stringify(tags));
                formData.append('transcription', transcription);
                formData.append('isTranscriptionEnabled', isTranscriptionEnabled);
                formData.append('duration', currentAudioDuration);
                
                console.log('FormData created, sending request...');
                
                const response = await fetch('/api/create-podcast', {
                    method: 'POST',
                    body: formData
                });
                
                console.log('Response status:', response.status);
                console.log('Response headers:', response.headers);
                
                const data = await response.json();
                console.log('Response data:', data);
                
                if (data.success) {
                    updateSubmitStatus('Podcast created successfully! Redirecting to dashboard...', 'success');
                    console.log('Podcast created successfully, redirecting...');
                    // Reset form
                    setTimeout(() => {
                        window.location.href = '/teacher/dashboard';
                    }, 2000);
                } else {
                    updateSubmitStatus('Error: ' + data.message, 'error');
                    console.error('Podcast creation failed:', data.message);
                }
            } catch (error) {
                console.error('Error creating podcast:', error);
                updateSubmitStatus('Error creating podcast: ' + error.message, 'error');
            }
        }

        function updateSubmitStatus(message, type) {
            const statusDiv = document.getElementById('submitStatus');
            statusDiv.textContent = message;
            statusDiv.className = `status-message status-${type}`;
            statusDiv.style.display = 'block';
        }

        // Enable submit button when audio is available
        function checkFormValidity() {
            const submitBtn = document.getElementById('submitBtn');
            const hasAudio = currentAudioFile !== null;
            const hasTitle = document.getElementById('podcastTitle').value.trim() !== '';
            const hasDescription = document.getElementById('podcastDescription').value.trim() !== '';
            const hasGrade = document.getElementById('gradeLevel').value !== '';
            
            submitBtn.disabled = !(hasAudio && hasTitle && hasDescription && hasGrade);
            
            // Update audio status indicator
            const audioStatus = document.getElementById('audioStatus');
            if (audioStatus) {
                if (hasAudio) {
                    audioStatus.innerHTML = '<i class="fas fa-check-circle text-success"></i> Audio ready';
                    audioStatus.className = 'audio-status text-success';
                } else {
                    audioStatus.innerHTML = '<i class="fas fa-exclamation-circle text-warning"></i> No audio file';
                    audioStatus.className = 'audio-status text-warning';
                }
            }
        }

        // Add event listeners for form validation
        document.getElementById('podcastTitle').addEventListener('input', checkFormValidity);
        document.getElementById('podcastDescription').addEventListener('input', checkFormValidity);
        document.getElementById('gradeLevel').addEventListener('change', checkFormValidity);

        // Load existing podcasts when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadExistingPodcasts();
            checkFormValidity(); // Set initial form state
        });

        // Function to load existing podcasts into dropdown
        async function loadExistingPodcasts() {
            try {
                const response = await fetch('/api/teacher-podcasts');
                if (response.ok) {
                    const data = await response.json();
                    populateExistingPodcastsDropdown(data.podcasts);
                } else {
                    console.error('Failed to load existing podcasts');
                }
            } catch (error) {
                console.error('Error loading existing podcasts:', error);
            }
        }

        // Function to populate the existing podcasts dropdown
        function populateExistingPodcastsDropdown(podcasts) {
            const select = document.getElementById('existingPodcastSelect');
            
            // Clear existing options except the first one
            while (select.children.length > 1) {
                select.removeChild(select.lastChild);
            }
            
            if (podcasts && podcasts.length > 0) {
                podcasts.forEach(podcast => {
                    const option = document.createElement('option');
                    option.value = podcast._id;
                    option.textContent = `${podcast.title} (${podcast.gradeLevel}) - ${new Date(podcast.createdAt).toLocaleDateString()}`;
                    select.appendChild(option);
                });
            } else {
                // Add a "no podcasts" option
                const option = document.createElement('option');
                option.value = "";
                option.textContent = "No existing podcasts found";
                option.disabled = true;
                select.appendChild(option);
            }
        }

        // Function to load an existing podcast for editing
        function loadExistingPodcast() {
            const selectedId = document.getElementById('existingPodcastSelect').value;
            
            if (!selectedId) {
                // Create new podcast mode
                resetForm();
                return;
            }
            
            // Load existing podcast data
            loadPodcastForEditing(selectedId);
        }

        // Function to load podcast data for editing
        async function loadPodcastForEditing(podcastId) {
            try {
                const response = await fetch(`/api/podcast/${podcastId}`);
                if (response.ok) {
                    const data = await response.json();
                    populateFormWithPodcast(data.podcast);
                } else {
                    alert('Error loading podcast data');
                }
            } catch (error) {
                console.error('Error loading podcast for editing:', error);
                alert('Error loading podcast data');
            }
        }

        // Function to populate form with existing podcast data
        function populateFormWithPodcast(podcast) {
            document.getElementById('podcastTitle').value = podcast.title;
            document.getElementById('podcastDescription').value = podcast.description;
            document.getElementById('gradeLevel').value = podcast.gradeLevel;
            
            // Set subjects
            const subjectsSelect = document.getElementById('subjects');
            Array.from(subjectsSelect.options).forEach(option => {
                option.selected = podcast.subjects.includes(option.value);
            });
            
            // Set tags
            document.getElementById('podcastTags').value = podcast.tags.join(', ');
            
            // Set transcription
            if (podcast.transcription) {
                document.getElementById('transcriptionText').value = podcast.transcription;
                document.getElementById('enableTranscription').checked = true;
                document.getElementById('transcriptionSection').style.display = 'block';
            }
            
            // Update submit button
            document.getElementById('submitBtn').innerHTML = '<i class="fas fa-save"></i> Update Podcast';
            document.getElementById('submitBtn').onclick = updateExistingPodcast;
            
            // Store podcast ID for update
            window.currentPodcastId = podcast._id;
            
            console.log('Form populated with podcast data:', podcast);
        }

        // Function to reset form to create new podcast
        function resetForm() {
            document.getElementById('podcastTitle').value = '';
            document.getElementById('podcastDescription').value = '';
            document.getElementById('gradeLevel').value = '';
            
            // Clear subjects
            const subjectsSelect = document.getElementById('subjects');
            Array.from(subjectsSelect.options).forEach(option => {
                option.selected = false;
            });
            
            // Clear tags
            document.getElementById('podcastTags').value = '';
            
            // Clear transcription
            document.getElementById('transcriptionText').value = '';
            document.getElementById('enableTranscription').checked = false;
            document.getElementById('transcriptionSection').style.display = 'none';
            
            // Reset submit button
            document.getElementById('submitBtn').innerHTML = '<i class="fas fa-save"></i> Create Podcast';
            document.getElementById('submitBtn').onclick = createPodcast;
            
            // Clear current podcast ID
            window.currentPodcastId = null;
            
            console.log('Form reset for new podcast creation');
        }

        // Function to update existing podcast
        async function updateExistingPodcast() {
            if (!window.currentPodcastId) {
                alert('No podcast selected for update');
                return;
            }
            
            const title = document.getElementById('podcastTitle').value.trim();
            const description = document.getElementById('podcastDescription').value.trim();
            const gradeLevel = document.getElementById('gradeLevel').value;
            
            if (!title || !description || !gradeLevel) {
                updateSubmitStatus('Please fill in all required fields.', 'error');
                return;
            }
            
            // Get selected subjects
            const subjectsSelect = document.getElementById('subjects');
            const subjects = Array.from(subjectsSelect.selectedOptions).map(option => option.value);
            
            // Get tags
            const tagsInput = document.getElementById('podcastTags').value.trim();
            const tags = tagsInput ? tagsInput.split(',').map(tag => tag.trim()) : [];
            
            // Get transcription
            const transcription = document.getElementById('transcriptionText').value.trim();
            const isTranscriptionEnabled = document.getElementById('enableTranscription').checked;
            
            try {
                const response = await fetch(`/api/update-podcast/${window.currentPodcastId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        title,
                        description,
                        gradeLevel,
                        subjects: JSON.stringify(subjects),
                        tags: JSON.stringify(tags),
                        transcription,
                        isTranscriptionEnabled
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    updateSubmitStatus('Podcast updated successfully! Redirecting to dashboard...', 'success');
                    setTimeout(() => {
                        window.location.href = '/teacher/dashboard';
                    }, 2000);
                } else {
                    updateSubmitStatus('Error: ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error updating podcast:', error);
                updateSubmitStatus('Error updating podcast: ' + error.message, 'error');
            }
        }

        // Drag and drop functionality
        const fileUploadArea = document.getElementById('fileUploadArea');
        
        fileUploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            fileUploadArea.classList.add('dragover');
        });
        
        fileUploadArea.addEventListener('dragleave', () => {
            fileUploadArea.classList.remove('dragover');
        });
        
        fileUploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            fileUploadArea.classList.remove('dragover');
            
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                console.log('=== DRAG & DROP DEBUG ===');
                console.log('Files dropped:', files);
                
                // Set the file input value
                const fileInput = document.getElementById('audioFile');
                fileInput.files = files;
                
                // Process the uploaded file
                handleFileUpload({ target: { files: files } });
            }
        });
    </script>
</body>
</html> 