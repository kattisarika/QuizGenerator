<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Competitive Quiz Sessions - <%= user.organizationName || 'SkillOns' %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container">
            <a class="navbar-brand" href="/teacher/dashboard">
                <i class="fas fa-graduation-cap me-2"></i>SkillOns
            </a>
            <div class="d-flex align-items-center">
                <span class="text-white me-3">Welcome, <%= user.displayName %></span>
                <a href="/logout" class="btn btn-outline-light btn-sm">
                    <i class="fas fa-sign-out-alt me-1"></i>Logout
                </a>
            </div>
        </div>
    </nav>

    <div class="main-content">
        <div class="container mt-4">
        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2><i class="fas fa-trophy me-2"></i>Competitive Quiz Sessions</h2>
                    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createSessionModal">
                        <i class="fas fa-plus me-2"></i>Create New Session
                    </button>
                </div>

                <!-- Active Sessions -->
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-play-circle me-2"></i>Active Sessions</h5>
                    </div>
                    <div class="card-body" id="active-sessions">
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-clock fa-2x mb-3"></i>
                            <p>No active sessions. Create a new competitive quiz session to get started!</p>
                        </div>
                    </div>
                </div>

                <!-- Recent Sessions -->
                <div class="card">
                    <div class="card-header">
                        <h5><i class="fas fa-history me-2"></i>Recent Sessions</h5>
                    </div>
                    <div class="card-body" id="recent-sessions">
                        <div class="text-center text-muted py-4">
                            <i class="fas fa-archive fa-2x mb-3"></i>
                            <p>No recent sessions found.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Create Session Modal -->
    <div class="modal fade" id="createSessionModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="fas fa-plus-circle me-2"></i>Create Competitive Quiz Session</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="create-session-form">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="quiz-select" class="form-label">Select Quiz</label>
                                <select class="form-select" id="quiz-select" required>
                                    <option value="">Choose a quiz...</option>
                                </select>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label for="duration" class="form-label">Duration (minutes)</label>
                                <input type="number" class="form-control" id="duration" value="30" min="5" max="120" required>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label for="max-participants" class="form-label">Max Participants</label>
                                <input type="number" class="form-control" id="max-participants" value="30" min="2" max="100" required>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Session Settings</label>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="show-leaderboard" checked>
                                    <label class="form-check-label" for="show-leaderboard">
                                        Show Live Leaderboard
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="allow-late-join" checked>
                                    <label class="form-check-label" for="allow-late-join">
                                        Allow Late Join
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="instant-results" checked>
                                    <label class="form-check-label" for="instant-results">
                                        Show Instant Results
                                    </label>
                                </div>
                            </div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="create-session-btn" onclick="console.log('Button clicked!'); createSession();">
                        <i class="fas fa-rocket me-2"></i>Create Session
                    </button>
                    <button type="button" class="btn btn-warning ms-2" onclick="alert('INLINE ALERT TEST')">
                        Test Inline
                    </button>
                    <button type="button" class="btn btn-info ms-2" onclick="console.log('INLINE CONSOLE TEST')">
                        Test Console  
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Session Management Modal -->
    <div class="modal fade" id="sessionManageModal" tabindex="-1">
        <div class="modal-dialog modal-xl">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="session-title"><i class="fas fa-users me-2"></i>Session Management</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="card bg-primary text-white mb-3">
                                <div class="card-body">
                                    <h6 class="card-title">Session Code</h6>
                                    <h3 id="display-session-code">------</h3>
                                    <button class="btn btn-light btn-sm" onclick="copySessionCode()">
                                        <i class="fas fa-copy me-1"></i>Copy Code
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-success text-white mb-3">
                                <div class="card-body">
                                    <h6 class="card-title">Participants</h6>
                                    <h3 id="participant-count">0</h3>
                                    <small>students joined</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-info text-white mb-3">
                                <div class="card-body">
                                    <h6 class="card-title">Status</h6>
                                    <h3 id="session-status">Waiting</h3>
                                    <button class="btn btn-light btn-sm" id="start-session-btn" onclick="startSession()" style="display: none;">
                                        <i class="fas fa-play me-1"></i>Start Quiz
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="row">
                        <div class="col-md-6">
                            <h6><i class="fas fa-users me-2"></i>Participants List</h6>
                            <div class="list-group" id="participants-list" style="max-height: 400px; overflow-y: auto;">
                                <!-- Participants will be listed here -->
                            </div>
                        </div>
                        <div class="col-md-6">
                            <h6><i class="fas fa-trophy me-2"></i>Live Leaderboard</h6>
                            <div id="live-leaderboard" style="max-height: 400px; overflow-y: auto;">
                                <!-- Live leaderboard will be shown here -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // IMMEDIATE TEST - This should execute when script loads
        console.log('🚀 SCRIPT STARTED LOADING');
        
        // Test alert immediately
        alert('IMMEDIATE ALERT: JavaScript is loading!');
        
        // Simple test function
        function testSimpleFunction() {
            console.log('🎯 Test button clicked!');
            alert('Test function works!');
            return true;
        }
        
        console.log('✅ Test function defined');

        let socket;
        let currentSessionId = null;
        let currentSessionCode = null;

        // Test function to check if JavaScript is working
        function testFunction() {
            console.log('✅ JavaScript is working! createSession function should be accessible.');
            alert('JavaScript is working! If you see this, the button should work.');
        }

        // Initialize Socket.IO connection
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM Content Loaded event fired');
            alert('DOM LOADED - Before Socket.IO');
            
            try {
                socket = io();
                console.log('Socket.IO initialized successfully');
                alert('Socket.IO initialized successfully');
            } catch (error) {
                console.error('Socket.IO initialization failed:', error);
                alert('Socket.IO failed: ' + error.message);
            }
            
            // Test that createSession function exists
            console.log('createSession function exists:', typeof createSession === 'function');
            
            // Add event listener as backup to onclick
            const createSessionBtn = document.getElementById('create-session-btn');
            if (createSessionBtn) {
                createSessionBtn.addEventListener('click', function() {
                    console.log('🎯 Event listener fired!');
                    createSession();
                });
                console.log('✅ Event listener added to Create Session button');
            } else {
                console.log('❌ Create Session button not found');
            }
            
            loadQuizzes();
            loadSessions();
            
            // Check if this is a redirect from creating a new competitive quiz
            const urlParams = new URLSearchParams(window.location.search);
            const newQuizId = urlParams.get('newQuiz');
            const quizTitle = urlParams.get('quizTitle');
            
            if (newQuizId && quizTitle) {
                // Show success message and auto-open create session modal
                setTimeout(() => {
                    showAlert('success', `🎉 Competitive quiz "${decodeURIComponent(quizTitle)}" created successfully! Ready to create your first session?`);
                    
                    // Auto-open the create session modal after a brief delay
                    setTimeout(() => {
                        const modal = new bootstrap.Modal(document.getElementById('createSessionModal'));
                        modal.show();
                        
                        // Pre-select the newly created quiz
                        const quizSelect = document.getElementById('quiz-select');
                        if (quizSelect) {
                            const option = Array.from(quizSelect.options).find(opt => opt.value === newQuizId);
                            if (option) {
                                quizSelect.value = newQuizId;
                            }
                        }
                    }, 2000);
                }, 1000);
                
                // Clean up URL parameters
                const cleanUrl = window.location.pathname;
                window.history.replaceState({}, document.title, cleanUrl);
            }
            
            // Set up real-time updates
            socket.on('participant-joined', function(data) {
                updateParticipantCount(data.participantCount);
                addParticipantToList(data.newParticipant);
            });
            
            socket.on('participant-progress', function(data) {
                updateParticipantProgress(data);
            });
            
            socket.on('participant-finished', function(data) {
                updateLeaderboard(data);
            });
        });

        async function loadQuizzes() {
            try {
                const response = await fetch('/api/teacher-quizzes');
                const data = await response.json();
                
                const select = document.getElementById('quiz-select');
                select.innerHTML = '<option value="">Choose a quiz...</option>';
                
                if (data.success && data.quizzes.length > 0) {
                    data.quizzes.forEach(quiz => {
                        const option = document.createElement('option');
                        option.value = quiz._id;
                        const approvalStatus = quiz.isApproved ? '✅' : '⏳';
                        const approvalText = quiz.isApproved ? 'Approved' : 'Pending';
                        option.textContent = `${quiz.title} (${quiz.questions.length} questions) ${approvalStatus} ${approvalText}`;
                        select.appendChild(option);
                    });
                } else if (data.success && data.quizzes.length === 0) {
                    const option = document.createElement('option');
                    option.value = '';
                    option.textContent = 'No quizzes found - Create your first quiz!';
                    option.disabled = true;
                    select.appendChild(option);
                }
            } catch (error) {
                console.error('Error loading quizzes:', error);
            }
        }

        async function loadSessions() {
            try {
                const response = await fetch('/quiz-session/teacher/my-sessions');
                const data = await response.json();
                
                if (data.success) {
                    displaySessions(data.sessions);
                }
            } catch (error) {
                console.error('Error loading sessions:', error);
            }
        }

        function displaySessions(sessions) {
            const activeSessions = sessions.filter(s => s.status === 'waiting' || s.status === 'active');
            const recentSessions = sessions.filter(s => s.status === 'completed' || s.status === 'cancelled');
            
            displayActiveSession(activeSessions);
            displayRecentSessions(recentSessions);
        }

        function displayActiveSession(sessions) {
            const container = document.getElementById('active-sessions');
            
            if (sessions.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-clock fa-2x mb-3"></i>
                        <p>No active sessions. Create a new competitive quiz session to get started!</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = sessions.map(session => `
                <div class="card border-primary mb-3">
                    <div class="card-body">
                        <div class="row align-items-center">
                            <div class="col-md-6">
                                <h6 class="card-title mb-1">${session.quizTitle}</h6>
                                <small class="text-muted">Session Code: <strong>${session.sessionCode}</strong></small>
                            </div>
                            <div class="col-md-3">
                                <span class="badge bg-${session.status === 'active' ? 'success' : 'warning'} fs-6">
                                    ${session.status.toUpperCase()}
                                </span>
                                <div class="mt-1">
                                    <small>${session.participants ? session.participants.length : 0} participants</small>
                                </div>
                            </div>
                            <div class="col-md-3 text-end">
                                <button class="btn btn-primary btn-sm" onclick="manageSession('${session._id}', '${session.sessionCode}')">
                                    <i class="fas fa-cog me-1"></i>Manage
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
        }

        function displayRecentSessions(sessions) {
            const container = document.getElementById('recent-sessions');
            
            if (sessions.length === 0) {
                container.innerHTML = `
                    <div class="text-center text-muted py-4">
                        <i class="fas fa-archive fa-2x mb-3"></i>
                        <p>No recent sessions found.</p>
                    </div>
                `;
                return;
            }
            
            container.innerHTML = sessions.slice(0, 5).map(session => `
                <div class="d-flex justify-content-between align-items-center py-2 border-bottom">
                    <div>
                        <strong>${session.quizTitle}</strong>
                        <br>
                        <small class="text-muted">
                            ${new Date(session.createdAt).toLocaleDateString()} - 
                            ${session.participants ? session.participants.length : 0} participants
                        </small>
                    </div>
                    <span class="badge bg-${session.status === 'completed' ? 'success' : 'secondary'}">
                        ${session.status}
                    </span>
                </div>
            `).join('');
        }

        async function createSession() {
            console.log('=== CREATE SESSION BUTTON CLICKED ===');
            
            // Get button and disable it to prevent multiple clicks
            const createBtn = document.getElementById('create-session-btn');
            const originalText = createBtn.innerHTML;
            createBtn.disabled = true;
            createBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Creating...';
            
            const quizId = document.getElementById('quiz-select').value;
            const duration = document.getElementById('duration').value;
            const maxParticipants = document.getElementById('max-participants').value;
            
            console.log('Form values:', {
                quizId,
                duration,
                maxParticipants
            });
            
            const settings = {
                showLeaderboard: document.getElementById('show-leaderboard').checked,
                allowLateJoin: document.getElementById('allow-late-join').checked,
                instantResults: document.getElementById('instant-results').checked
            };
            
            console.log('Settings:', settings);
            
            if (!quizId) {
                console.log('❌ No quiz selected');
                alert('Please select a quiz');
                // Restore button state
                createBtn.disabled = false;
                createBtn.innerHTML = originalText;
                return;
            }
            
            console.log('✅ Quiz selected, proceeding with session creation');
            
            try {
                console.log('Creating session with data:', {
                    quizId,
                    duration: parseInt(duration),
                    maxParticipants: parseInt(maxParticipants),
                    settings
                });
                
                const response = await fetch('/quiz-session/create', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        quizId,
                        duration: parseInt(duration),
                        maxParticipants: parseInt(maxParticipants),
                        settings
                    })
                });
                
                console.log('Response status:', response.status);
                const data = await response.json();
                console.log('Response data:', data);
                
                if (data.success) {
                    bootstrap.Modal.getInstance(document.getElementById('createSessionModal')).hide();
                    loadSessions(); // Refresh the sessions list
                    
                    // Show success message
                    showAlert('success', `🎉 Session created successfully! Session Code: ${data.session.sessionCode}`);
                    
                    // Reset button (will be hidden by modal close, but good practice)
                    createBtn.disabled = false;
                    createBtn.innerHTML = originalText;
                } else {
                    console.error('Session creation failed:', data);
                    showAlert('danger', `❌ ${data.message || 'Error creating session'}`);
                    // Restore button state on error
                    createBtn.disabled = false;
                    createBtn.innerHTML = originalText;
                }
            } catch (error) {
                console.error('Error creating session:', error);
                showAlert('danger', '❌ Network error - please check your connection and try again');
                // Restore button state on network error
                createBtn.disabled = false;
                createBtn.innerHTML = originalText;
            }
        }

        async function manageSession(sessionId, sessionCode) {
            currentSessionId = sessionId;
            currentSessionCode = sessionCode;
            
            try {
                const response = await fetch(`/quiz-session/${sessionId}`);
                const data = await response.json();
                
                if (data.success) {
                    const session = data.session;
                    
                    document.getElementById('session-title').innerHTML = 
                        `<i class="fas fa-users me-2"></i>${session.quizTitle}`;
                    document.getElementById('display-session-code').textContent = session.sessionCode;
                    document.getElementById('participant-count').textContent = session.participantCount;
                    document.getElementById('session-status').textContent = session.status.toUpperCase();
                    
                    // Show start button if session is waiting and has participants
                    const startBtn = document.getElementById('start-session-btn');
                    if (session.status === 'waiting' && session.participantCount > 0) {
                        startBtn.style.display = 'inline-block';
                    } else {
                        startBtn.style.display = 'none';
                    }
                    
                    // Join socket room for real-time updates
                    socket.emit('join-session', sessionId);
                    
                    // Show the modal
                    new bootstrap.Modal(document.getElementById('sessionManageModal')).show();
                } else {
                    showAlert('danger', data.message || 'Error loading session');
                }
            } catch (error) {
                console.error('Error loading session:', error);
                showAlert('danger', 'Error loading session');
            }
        }

        async function startSession() {
            if (!currentSessionId) return;
            
            try {
                const response = await fetch(`/quiz-session/${currentSessionId}/start`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    document.getElementById('session-status').textContent = 'ACTIVE';
                    document.getElementById('start-session-btn').style.display = 'none';
                    showAlert('success', 'Session started successfully!');
                } else {
                    showAlert('danger', data.message || 'Error starting session');
                }
            } catch (error) {
                console.error('Error starting session:', error);
                showAlert('danger', 'Error starting session');
            }
        }

        function copySessionCode() {
            if (currentSessionCode) {
                navigator.clipboard.writeText(currentSessionCode).then(() => {
                    showAlert('success', 'Session code copied to clipboard!');
                });
            }
        }

        function updateParticipantCount(count) {
            document.getElementById('participant-count').textContent = count;
        }

        function addParticipantToList(participant) {
            // Update participants list in real-time
            console.log('New participant joined:', participant);
        }

        function updateParticipantProgress(data) {
            // Update participant progress in real-time
            console.log('Participant progress:', data);
        }

        function updateLeaderboard(data) {
            // Update leaderboard in real-time
            console.log('Participant finished:', data);
        }

        function showAlert(type, message) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
            alertDiv.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            document.body.appendChild(alertDiv);
            
            setTimeout(() => {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 5000);
        }
    </script>
</body>
</html>