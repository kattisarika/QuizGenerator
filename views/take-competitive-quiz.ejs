<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= quiz.title %> - Competitive Quiz</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">

    <!-- MathJax for Math Equation Support -->
    <script>
    window.MathJax = {
        tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']],
            processEscapes: true,
            processEnvironments: true
        },
        options: {
            skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
        }
    };
    </script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <style>
        .competitive-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1000;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        .competitive-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .quiz-timer {
            font-size: 24px;
            font-weight: bold;
            background: rgba(255,255,255,0.2);
            padding: 10px 20px;
            border-radius: 10px;
        }
        .live-stats {
            display: flex;
            gap: 20px;
            align-items: center;
        }
        .stat-item {
            background: rgba(255,255,255,0.2);
            padding: 8px 15px;
            border-radius: 8px;
        }
        .main-content {
            margin-top: 80px;
            display: flex;
            gap: 20px;
            padding: 20px;
        }
        .quiz-section {
            flex: 1;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }
        .leaderboard-section {
            width: 300px;
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
            position: sticky;
            top: 100px;
            height: fit-content;
        }
        .leaderboard-title {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 20px;
            color: #667eea;
        }
        .leaderboard-list {
            max-height: 400px;
            overflow-y: auto;
        }
        .leaderboard-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
            margin-bottom: 8px;
            background: #f8f9fa;
            border-radius: 8px;
            transition: all 0.3s ease;
        }
        .leaderboard-item.current-user {
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            border: 2px solid #667eea;
        }
        .rank-display {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 14px;
        }
        .rank-1 { background: gold; color: #333; }
        .rank-2 { background: silver; color: #333; }
        .rank-3 { background: #cd7f32; color: white; }
        .rank-other { background: #667eea; color: white; }
        .question-progress {
            display: flex;
            justify-content: center;
            gap: 5px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }
        .progress-dot {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            border: 2px solid #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .progress-dot.answered {
            background: #28a745;
            color: white;
            border-color: #28a745;
        }
        .progress-dot.current {
            border-color: #667eea;
            background: #667eea;
            color: white;
            transform: scale(1.2);
        }
        .answer-feedback {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            padding: 20px 40px;
            border-radius: 15px;
            font-size: 24px;
            font-weight: bold;
            z-index: 2000;
            display: none;
            animation: feedbackPulse 0.5s ease;
        }
        .answer-feedback.correct {
            background: #28a745;
            color: white;
        }
        .answer-feedback.incorrect {
            background: #dc3545;
            color: white;
        }
        @keyframes feedbackPulse {
            0% { transform: translate(-50%, -50%) scale(0.8); opacity: 0; }
            50% { transform: translate(-50%, -50%) scale(1.1); }
            100% { transform: translate(-50%, -50%) scale(1); opacity: 1; }
        }
        .submit-section {
            margin-top: 30px;
            text-align: center;
        }
        .submit-btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 40px;
            border-radius: 25px;
            font-size: 18px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        .submit-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(102, 126, 234, 0.3);
        }

        /* Question Image Styles */
        .question-image-container {
            margin: 20px 0;
            text-align: center;
        }
        .question-image-loading {
            color: #667eea;
            font-style: italic;
        }
        .question-image {
            border: 2px solid #e9ecef;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        .question-image:hover {
            border-color: #667eea;
            transform: scale(1.02);
        }

        /* Text Answer Styles */
        .text-answer-section {
            margin: 20px 0;
        }
        .text-answer-label {
            display: block;
            font-weight: 600;
            color: #667eea;
            margin-bottom: 10px;
            font-size: 16px;
        }
        .text-answer-input {
            width: 100%;
            padding: 15px;
            border: 2px solid #e9ecef;
            border-radius: 10px;
            font-size: 16px;
            font-family: 'Inter', sans-serif;
            resize: vertical;
            min-height: 100px;
            transition: all 0.3s ease;
            background: #f8f9fa;
        }
        .text-answer-input:focus {
            outline: none;
            border-color: #667eea;
            background: white;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }
        .text-answer-input::placeholder {
            color: #6c757d;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="competitive-header">
        <div class="competitive-container">
            <div class="quiz-info">
                <h3><i class="fas fa-trophy"></i> <%= quiz.title %></h3>
                <small>Session Code: <%= session.sessionCode %></small>
            </div>
            <div class="quiz-timer" id="timer">
                <i class="fas fa-clock"></i> <span id="time-display">00:00</span>
            </div>
            <div class="live-stats">
                <div class="stat-item">
                    <i class="fas fa-check-circle"></i> 
                    Answered: <span id="answered-count">0</span>/<%= quiz.questions.length %>
                </div>
                <div class="stat-item" style="font-size: 14px; background: rgba(255,255,255,0.3);">
                    <i class="fas fa-info-circle"></i> 
                    Results shown after submission
                </div>
            </div>
        </div>
    </div>

    <div class="main-content">
        <div class="quiz-section">
            <div class="question-progress">
                <% quiz.questions.forEach((q, index) => { %>
                    <div class="progress-dot <%= index === 0 ? 'current' : '' %>" 
                         id="progress-<%= index %>" 
                         onclick="jumpToQuestion(<%= index %>)">
                        <%= index + 1 %>
                    </div>
                <% }); %>
            </div>

            <div id="quiz-container">
                <% quiz.questions.forEach((question, index) => { %>
                    <div class="question-container" id="question-<%= index %>" style="<%= index === 0 ? '' : 'display: none;' %>">
                        <h4 class="question-number">Question <%= index + 1 %> of <%= quiz.questions.length %></h4>
                        <div class="question-text">
                            <p><%- question.question %></p>
                        </div>

                        <!-- Question Image Display -->
                        <% if (question.image) { %>
                            <div class="question-image-container" data-s3-key="<%= question.image %>" data-question-index="<%= index %>">
                                <div class="question-image-loading" style="text-align: center; padding: 20px;">
                                    <i class="fas fa-spinner fa-spin"></i> Loading question image...
                                </div>
                                <img class="question-image" style="max-width: 100%; max-height: 400px; margin-top: 15px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); display: none;" alt="Question Image">
                            </div>
                        <% } %>

                        <!-- Question Type Handling -->
                        <% if (question.type === 'multiple-choice' && question.options && question.options.length > 0) { %>
                            <!-- Multiple Choice Options -->
                            <div class="options-container">
                                <% question.options.forEach((option, optionIndex) => { %>
                                    <div class="option-item"
                                         onclick="selectCompetitiveOption('<%= index %>', '<%= optionIndex %>')"
                                         data-question="<%= index %>"
                                         data-option="<%= optionIndex %>">
                                        <input type="radio"
                                               id="q<%= index %>-opt<%= optionIndex %>"
                                               name="question-<%= index %>"
                                               value="<%= option %>"
                                               data-question="<%= index %>"
                                               data-option="<%= optionIndex %>">
                                        <label for="q<%= index %>-opt<%= optionIndex %>" class="option-label">
                                            <%= String.fromCharCode(65 + optionIndex) %>)
                                        </label>
                                        <span class="option-text"><%- option %></span>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else if (question.type === 'short-answer' || question.isTextAnswer) { %>
                            <!-- Text Answer Section -->
                            <div class="text-answer-section">
                                <label for="text-answer-<%= index %>" class="text-answer-label">
                                    <i class="fas fa-edit"></i> Your Answer:
                                </label>
                                <textarea
                                    id="text-answer-<%= index %>"
                                    name="text-answer-<%= index %>"
                                    class="text-answer-input"
                                    placeholder="Type your answer here..."
                                    rows="4"
                                    data-question="<%= index %>"></textarea>

                                <small class="text-muted">
                                    <i class="fas fa-info-circle me-1"></i>
                                    This is a text answer question. You can use math equations with $ symbols.
                                </small>
                            </div>
                        <% } else if (question.options && question.options.length > 0) { %>
                            <!-- Fallback to multiple choice if type is not specified but options exist -->
                            <div class="options-container">
                                <% question.options.forEach((option, optionIndex) => { %>
                                    <div class="option-item"
                                         onclick="selectCompetitiveOption('<%= index %>', '<%= optionIndex %>')"
                                         data-question="<%= index %>"
                                         data-option="<%= optionIndex %>">
                                        <input type="radio"
                                               id="q<%= index %>-opt<%= optionIndex %>"
                                               name="question-<%= index %>"
                                               value="<%= option %>"
                                               data-question="<%= index %>"
                                               data-option="<%= optionIndex %>">
                                        <label for="q<%= index %>-opt<%= optionIndex %>" class="option-label">
                                            <%= String.fromCharCode(65 + optionIndex) %>)
                                        </label>
                                        <span class="option-text"><%- option %></span>
                                    </div>
                                <% }); %>
                            </div>
                        <% } else { %>
                            <!-- No options available - show text input as fallback -->
                            <div class="text-answer-section">
                                <label for="text-answer-<%= index %>" class="text-answer-label">
                                    <i class="fas fa-edit"></i> Your Answer:
                                </label>
                                <textarea
                                    id="text-answer-<%= index %>"
                                    name="text-answer-<%= index %>"
                                    class="text-answer-input"
                                    placeholder="Type your answer here..."
                                    rows="4"
                                    data-question="<%= index %>"></textarea>
                            </div>
                        <% } %>
                        <div class="navigation-buttons">
                            <% if (index > 0) { %>
                                <button class="btn btn-secondary" onclick="previousQuestion()">
                                    <i class="fas fa-arrow-left"></i> Previous
                                </button>
                            <% } %>
                            <% if (index < quiz.questions.length - 1) { %>
                                <button class="btn btn-primary float-end" onclick="nextQuestion()">
                                    Next <i class="fas fa-arrow-right"></i>
                                </button>
                            <% } %>
                        </div>
                    </div>
                <% }); %>
            </div>

            <div class="submit-section">
                <button class="submit-btn" onclick="submitCompetitiveQuiz()">
                    <i class="fas fa-flag-checkered"></i> Submit Quiz
                </button>
            </div>
        </div>

        <% if (settings.showLiveLeaderboard) { %>
        <div class="leaderboard-section">
            <h4 class="leaderboard-title">
                <i class="fas fa-trophy"></i> Live Leaderboard
            </h4>
            <div class="leaderboard-list" id="leaderboard">
                <!-- Leaderboard will be updated dynamically -->
                <div class="text-center text-muted">
                    <i class="fas fa-spinner fa-spin"></i> Loading...
                </div>
            </div>
        </div>
        <% } %>
    </div>



    <script>
        const sessionId = '<%= sessionId %>';
        const userId = '<%= user._id %>';
        const totalQuestions = <%= quiz.questions.length %>;
        const questions = <%- JSON.stringify(quiz.questions) %>;
        let currentQuestion = 0;
        let answers = {};
        let startTime = Date.now();
        let timerInterval;
        let leaderboardInterval;
        let currentScore = 0;
        let correctCount = 0;
        let totalAnswered = 0;

        // Initialize timer
        function startTimer() {
            timerInterval = setInterval(() => {
                const elapsed = Math.floor((Date.now() - startTime) / 1000);
                const minutes = Math.floor(elapsed / 60);
                const seconds = elapsed % 60;
                document.getElementById('time-display').textContent = 
                    `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
            }, 1000);
        }

        // Select answer (no server submission until quiz completion)
        function selectCompetitiveOption(questionIndex, optionIndex) {
            questionIndex = parseInt(questionIndex);
            optionIndex = parseInt(optionIndex);

            // Select the radio button
            const radioButton = document.getElementById(`q${questionIndex}-opt${optionIndex}`);
            if (radioButton) {
                radioButton.checked = true;

                // Update visual selection
                document.querySelectorAll(`[data-question="${questionIndex}"]`).forEach(el => {
                    if (el.classList.contains('option-item')) {
                        el.classList.remove('option-selected');
                    }
                });
                document.querySelector(`.option-item[data-question="${questionIndex}"][data-option="${optionIndex}"]`)
                    ?.classList.add('option-selected');

                // Store answer locally
                const selectedAnswer = radioButton.value;
                answers[questionIndex] = { selectedAnswer };

                // Mark progress dot as answered
                document.getElementById(`progress-${questionIndex}`).classList.add('answered');

                // Update answered count (client-side only)
                updateAnsweredCount();
            }
        }

        // Handle text answer input
        function handleTextAnswer(questionIndex) {
            const textInput = document.getElementById(`text-answer-${questionIndex}`);
            if (textInput) {
                textInput.addEventListener('input', function() {
                    const answer = this.value.trim();

                    if (answer) {
                        // Store answer locally
                        answers[questionIndex] = { textAnswer: answer };

                        // Mark progress dot as answered
                        document.getElementById(`progress-${questionIndex}`).classList.add('answered');
                    } else {
                        // Remove answer if empty
                        delete answers[questionIndex];

                        // Remove answered status
                        document.getElementById(`progress-${questionIndex}`).classList.remove('answered');
                    }

                    // Update answered count
                    updateAnsweredCount();

                    // Process MathJax for the text input content
                    if (window.MathJax && answer.includes('$')) {
                        setTimeout(() => {
                            MathJax.typesetPromise([this]).catch(console.error);
                        }, 300);
                    }
                });
            }
        }

        // Update answered count
        function updateAnsweredCount() {
            totalAnswered = Object.keys(answers).length;
            document.getElementById('answered-count').textContent = totalAnswered;
        }

        function jumpToQuestion(index) {
            // Hide current question
            document.getElementById(`question-${currentQuestion}`).style.display = 'none';
            document.getElementById(`progress-${currentQuestion}`).classList.remove('current');
            
            // Show selected question
            currentQuestion = index;
            document.getElementById(`question-${index}`).style.display = 'block';
            document.getElementById(`progress-${index}`).classList.add('current');
        }

        function nextQuestion() {
            if (currentQuestion < totalQuestions - 1) {
                jumpToQuestion(currentQuestion + 1);
            }
        }

        function previousQuestion() {
            if (currentQuestion > 0) {
                jumpToQuestion(currentQuestion - 1);
            }
        }

        async function submitCompetitiveQuiz() {
            if (!confirm('Are you sure you want to submit your quiz? You can only submit once.')) return;
            
            // Check if all questions are answered (optional)
            const totalQuestions = <%= quiz.questions.length %>;
            const answeredCount = Object.keys(answers).length;
            
            if (answeredCount < totalQuestions) {
                if (!confirm(`You have only answered ${answeredCount} out of ${totalQuestions} questions. Submit anyway?`)) {
                    return;
                }
            }
            
            clearInterval(timerInterval);
            clearInterval(leaderboardInterval);
            
            // Disable submit button to prevent double submission
            const submitBtn = document.querySelector('.submit-btn');
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
            
            try {
                const response = await fetch(`/api/quiz-session/submit-complete/${sessionId}`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ answers: answers })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showCompletionScreen(data.results);
                } else {
                    alert('Error: ' + data.message);
                    // Re-enable button if error
                    submitBtn.disabled = false;
                    submitBtn.innerHTML = '<i class="fas fa-flag-checkered"></i> Submit Quiz';
                    
                    // Restart timers if submission failed
                    startTimer();
                    if (<%= settings.showLiveLeaderboard %>) {
                        leaderboardInterval = setInterval(updateLeaderboard, 5000);
                    }
                }
            } catch (error) {
                console.error('Error submitting quiz:', error);
                alert('Error submitting quiz. Please try again.');
                
                // Re-enable button if error
                submitBtn.disabled = false;
                submitBtn.innerHTML = '<i class="fas fa-flag-checkered"></i> Submit Quiz';
                
                // Restart timers if submission failed
                startTimer();
                if (<%= settings.showLiveLeaderboard %>) {
                    leaderboardInterval = setInterval(updateLeaderboard, 5000);
                }
            }
        }

        function showCompletionScreen(results) {
            document.querySelector('.main-content').innerHTML = `
                <div class="quiz-completion-container" style="max-width: 600px; margin: 0 auto; text-align: center; background: white; padding: 40px; border-radius: 20px; box-shadow: 0 10px 40px rgba(0,0,0,0.1);">
                    <i class="fas fa-trophy" style="font-size: 80px; color: gold; margin-bottom: 20px;"></i>
                    <h2 style="color: #28a745; margin-bottom: 20px;">Quiz Completed!</h2>
                    
                    <div style="background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1)); padding: 30px; border-radius: 15px; margin: 20px 0;">
                        <h3 style="color: #667eea; margin-bottom: 20px;">Your Rank: #${results.rank}</h3>
                        <div style="font-size: 48px; font-weight: bold; color: #667eea;">
                            ${results.accuracy.toFixed(0)}%
                        </div>
                        <div style="margin-top: 15px; font-size: 20px;">
                            ${results.correctAnswers} out of ${results.totalQuestions} correct
                        </div>
                        <div style="margin-top: 10px; color: #666;">
                            Time: ${Math.floor(results.timeTaken / 60)}:${(results.timeTaken % 60).toString().padStart(2, '0')}
                        </div>
                    </div>
                    
                    <div style="margin-top: 30px;">
                        <a href="/student/dashboard" class="btn btn-primary btn-lg">
                            <i class="fas fa-home"></i> Return to Dashboard
                        </a>
                    </div>
                </div>
            `;
        }

        // Load and update leaderboard
        async function updateLeaderboard() {
            if (!<%= settings.showLiveLeaderboard %>) return;
            
            try {
                const response = await fetch(`/api/quiz-session/leaderboard/${sessionId}`);
                const data = await response.json();
                
                if (data.success) {
                    const leaderboardDiv = document.getElementById('leaderboard');
                    leaderboardDiv.innerHTML = '';
                    
                    data.leaderboard.forEach((entry, index) => {
                        const isCurrentUser = entry.studentId === userId;
                        const rankClass = index === 0 ? 'rank-1' : index === 1 ? 'rank-2' : index === 2 ? 'rank-3' : 'rank-other';
                        
                        const item = document.createElement('div');
                        item.className = `leaderboard-item ${isCurrentUser ? 'current-user' : ''}`;
                        item.innerHTML = `
                            <div style="display: flex; align-items: center; gap: 10px;">
                                <div class="rank-display ${rankClass}">${entry.rank}</div>
                                <div>
                                    <strong>${entry.studentName}</strong>
                                    <br>
                                    <small>Score: ${entry.score}</small>
                                </div>
                            </div>
                            <div>
                                <span class="badge bg-success">${entry.correctAnswers}</span>
                            </div>
                        `;
                        leaderboardDiv.appendChild(item);
                    });
                    
                    if (data.leaderboard.length === 0) {
                        leaderboardDiv.innerHTML = '<div class="text-center text-muted">No submissions yet</div>';
                    }
                }
            } catch (error) {
                console.error('Error updating leaderboard:', error);
            }
        }

        // Function to load question images
        function loadQuestionImages() {
            console.log('🔄 Loading competitive quiz question images...');

            const questionImageContainers = document.querySelectorAll('.question-image-container[data-s3-key]');
            console.log(`📸 Found ${questionImageContainers.length} question images to load`);

            questionImageContainers.forEach((container) => {
                const s3Key = container.dataset.s3Key;
                const questionIndex = container.dataset.questionIndex;
                const loadingDiv = container.querySelector('.question-image-loading');
                const img = container.querySelector('.question-image');

                if (!s3Key || !loadingDiv || !img) {
                    console.log(`❌ Missing required elements for question ${questionIndex}`);
                    return;
                }

                // Handle both S3 keys and full URLs
                let s3Url;
                if (s3Key.startsWith('https://')) {
                    // Already a full URL - fix region if needed
                    s3Url = s3Key.replace('s3.us-east-1.amazonaws.com', 's3.us-west-1.amazonaws.com');
                } else {
                    // S3 key only - construct full URL
                    s3Url = `https://skillon-test.s3.us-west-1.amazonaws.com/${s3Key}`;
                }
                console.log(`🔗 Loading image for question ${questionIndex}: ${s3Url}`);

                // Load the image
                img.onload = function() {
                    loadingDiv.style.display = 'none';
                    img.style.display = 'block';
                    console.log(`✅ Image loaded for question ${questionIndex}`);
                };

                img.onerror = function() {
                    console.error(`❌ Failed to load image for question ${questionIndex}: ${s3Url}`);
                    loadingDiv.innerHTML = '<div class="text-muted"><i class="fas fa-exclamation-triangle"></i> Image failed to load</div>';
                };

                // Set the image source to start loading
                img.src = s3Url;
            });
        }

        // Initialize on page load
        document.addEventListener('DOMContentLoaded', function() {
            startTimer();
            updateLeaderboard();
            loadQuestionImages(); // Load question images

            // Initialize text answer handlers for all questions
            <% quiz.questions.forEach((question, index) => { %>
                <% if (question.type === 'short-answer' || question.isTextAnswer || (!question.options || question.options.length === 0)) { %>
                    handleTextAnswer(<%= index %>);
                <% } %>
            <% }); %>

            // Process MathJax for initial question display
            if (window.MathJax) {
                setTimeout(() => {
                    MathJax.typesetPromise().catch(function (err) {
                        console.log('MathJax typeset error on initial load:', err.message);
                    });
                }, 500);
            }

            // Update leaderboard every 5 seconds
            leaderboardInterval = setInterval(updateLeaderboard, 5000);
        });
    </script>
</body>
</html>