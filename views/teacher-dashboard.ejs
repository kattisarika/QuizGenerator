<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Dashboard - SkillOns</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* Enhanced Professional Styles for Teacher Dashboard */
        :root {
            --primary-color: #4F46E5;
            --primary-dark: #4338CA;
            --secondary-color: #7C3AED;
            --success-color: #10B981;
            --warning-color: #F59E0B;
            --danger-color: #EF4444;
            --info-color: #3B82F6;
            --dark-color: #1F2937;
            --light-color: #F9FAFB;
            --border-radius: 12px;
            --shadow-sm: 0 1px 3px rgba(0,0,0,0.12);
            --shadow-md: 0 4px 6px rgba(0,0,0,0.1);
            --shadow-lg: 0 10px 25px rgba(0,0,0,0.1);
            --shadow-xl: 0 20px 40px rgba(0,0,0,0.15);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: var(--dark-color);
        }

        /* Enhanced Navbar */
        .navbar {
            background: rgba(255, 255, 255, 0.98);
            backdrop-filter: blur(10px);
            box-shadow: var(--shadow-md);
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .nav-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 10px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            height: 70px;
            overflow: visible;
            min-width: 1200px;
        }

        .nav-logo a {
            font-size: 24px;
            font-weight: 700;
            color: var(--primary-color);
            text-decoration: none;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .nav-logo a::before {
            content: "üë®‚Äçüè´";
            font-size: 28px;
        }

        /* Hamburger Menu */
        .hamburger {
            display: none;
            flex-direction: column;
            cursor: pointer;
            padding: 5px;
            z-index: 1001;
        }

        .hamburger span {
            width: 25px;
            height: 3px;
            background: var(--primary-color);
            margin: 3px 0;
            transition: all 0.3s ease;
            border-radius: 3px;
        }

        .hamburger.active span:nth-child(1) {
            transform: rotate(45deg) translate(6px, 6px);
        }

        .hamburger.active span:nth-child(2) {
            opacity: 0;
        }

        .hamburger.active span:nth-child(3) {
            transform: rotate(-45deg) translate(7px, -7px);
        }

        .nav-menu {
            display: flex;
            gap: 8px;
            align-items: center;
            flex-wrap: nowrap;
            overflow: visible;
        }

        .nav-link {
            padding: 8px 12px;
            color: var(--dark-color);
            text-decoration: none;
            border-radius: var(--border-radius);
            transition: all 0.3s ease;
            font-weight: 500;
            white-space: nowrap;
            display: flex;
            align-items: center;
            gap: 6px;
            font-size: 14px;
        }

        .nav-link:hover {
            background: var(--light-color);
            color: var(--primary-color);
            transform: translateY(-2px);
        }

        .nav-link.logout-btn {
            background: var(--danger-color);
            color: white;
            position: relative;
            z-index: 1002;
            white-space: nowrap;
        }

        .nav-link.logout-btn:hover {
            background: #DC2626;
            transform: translateY(-2px);
        }

        /* Mobile Menu Overlay */
        .mobile-menu-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: none;
            z-index: 999;
        }

        .mobile-menu-overlay.active {
            display: block;
        }

        /* Main Content */
        .main-content {
            margin-top: 70px;
            padding: 20px;
            min-height: calc(100vh - 70px);
        }

        .dashboard-container {
            max-width: 1400px;
            margin: 0 auto;
            animation: fadeInUp 0.6s ease;
        }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Enhanced Dashboard Header */
        .dashboard-header {
            background: white;
            border-radius: var(--border-radius);
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: var(--shadow-lg);
        }

        .user-info {
            display: flex;
            align-items: center;
            gap: 20px;
            flex-wrap: wrap;
        }

        .user-avatar, .user-avatar-placeholder {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 32px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            box-shadow: var(--shadow-md);
        }

        .user-avatar {
            object-fit: cover;
        }

        .user-details h1 {
            font-size: 28px;
            color: var(--dark-color);
            margin-bottom: 5px;
        }

        .user-details p {
            color: #6B7280;
            margin-bottom: 10px;
        }

        .role-badge {
            display: inline-block;
            padding: 6px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            background: linear-gradient(135deg, var(--info-color), var(--primary-color));
            color: white;
        }

        /* Organization Info */
        .organization-info {
            margin-top: 20px;
            padding: 20px;
            background: linear-gradient(135deg, rgba(79, 70, 229, 0.05), rgba(124, 58, 237, 0.05));
            border-radius: var(--border-radius);
            border-left: 4px solid var(--primary-color);
        }

        .organization-info h3 {
            color: var(--dark-color);
            margin-bottom: 15px;
            font-size: 20px;
        }

        .organization-code-section {
            margin-top: 15px;
        }

        .code-display {
            display: flex;
            gap: 10px;
            align-items: center;
            margin-top: 10px;
        }

        .code-input {
            flex: 1;
            padding: 12px;
            border: 2px solid #E5E7EB;
            border-radius: var(--border-radius);
            font-size: 16px;
            font-weight: 600;
            color: var(--primary-color);
            background: var(--light-color);
        }

        .copy-btn {
            padding: 12px 20px;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .copy-btn:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
        }

        /* Enhanced Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .stat-card {
            background: white;
            border-radius: var(--border-radius);
            padding: 25px;
            display: flex;
            align-items: center;
            gap: 20px;
            box-shadow: var(--shadow-md);
            transition: all 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-xl);
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
        }

        .stat-card:nth-child(1) .stat-icon {
            background: linear-gradient(135deg, #3B82F6, #2563EB);
            color: white;
        }

        .stat-card:nth-child(2) .stat-icon {
            background: linear-gradient(135deg, #10B981, #059669);
            color: white;
        }

        .stat-card:nth-child(3) .stat-icon {
            background: linear-gradient(135deg, #F59E0B, #D97706);
            color: white;
        }

        .stat-info h3 {
            font-size: 14px;
            color: #6B7280;
            margin-bottom: 5px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .stat-number {
            font-size: 32px;
            font-weight: 700;
            color: var(--dark-color);
        }

        /* Action Cards */
        .action-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .action-card {
            background: white;
            border-radius: var(--border-radius);
            padding: 30px;
            text-align: center;
            box-shadow: var(--shadow-md);
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .action-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 4px;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
        }

        .action-card:hover {
            transform: translateY(-5px);
            box-shadow: var(--shadow-xl);
        }

        .action-card-icon {
            font-size: 48px;
            margin-bottom: 15px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .action-card h3 {
            font-size: 20px;
            margin-bottom: 10px;
            color: var(--dark-color);
        }

        .action-card p {
            color: #6B7280;
            margin-bottom: 20px;
            line-height: 1.6;
        }

        /* Podcast Management Section */
        .podcasts-container {
            margin-top: 20px;
        }

        .podcast-card {
            background: white;
            border: 1px solid #e5e7eb;
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
            transition: all 0.3s ease;
            box-shadow: var(--shadow-sm);
        }

        .podcast-card:hover {
            box-shadow: var(--shadow-md);
            transform: translateY(-2px);
        }

        .podcast-info {
            flex: 1;
            margin-right: 20px;
        }

        .podcast-info h4 {
            color: var(--primary-color);
            margin-bottom: 10px;
            font-size: 18px;
        }

        .podcast-description {
            color: #6b7280;
            margin-bottom: 15px;
            line-height: 1.5;
        }

        .podcast-meta {
            margin-bottom: 15px;
        }

        .podcast-meta .badge {
            margin-right: 8px;
            margin-bottom: 5px;
        }

        .podcast-stats {
            display: flex;
            gap: 20px;
        }

        .podcast-stats small {
            color: #9ca3af;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .podcast-actions {
            display: flex;
            flex-direction: column;
            gap: 10px;
            min-width: 120px;
        }

        .podcast-actions .btn {
            width: 100%;
        }

        /* Podcast Player Modal */
        .podcast-player-modal {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .podcast-player-content {
            background: white;
            border-radius: 12px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
        }

        .podcast-player-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 20px 25px;
            border-bottom: 1px solid #e5e7eb;
        }

        .podcast-player-header h3 {
            margin: 0;
            color: var(--primary-color);
            font-size: 20px;
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 24px;
            cursor: pointer;
            color: #6b7280;
            padding: 0;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 50%;
            transition: all 0.2s ease;
        }

        .close-btn:hover {
            background: #f3f4f6;
            color: #374151;
        }

        .podcast-player-body {
            padding: 25px;
        }

        .podcast-player-body .podcast-description {
            margin-bottom: 20px;
            color: #6b7280;
            line-height: 1.6;
        }

        .podcast-player-body .podcast-meta {
            margin-bottom: 20px;
        }

        .audio-player-container {
            margin: 25px 0;
            text-align: center;
        }

        .audio-player-container audio {
            width: 100%;
            max-width: 400px;
        }

        .audio-loading {
            text-align: center;
            padding: 20px;
            color: #6b7280;
            font-size: 16px;
        }

        .audio-error {
            text-align: center;
            padding: 20px;
            color: #dc3545;
            font-size: 16px;
            background: #f8d7da;
            border: 1px solid #f5c6cb;
            border-radius: 8px;
            margin: 15px 0;
        }

        .audio-controls {
            text-align: center;
            margin: 20px 0;
        }

        .audio-controls .btn {
            margin: 0 8px;
        }

        .podcast-player-body .podcast-stats {
            display: flex;
            gap: 20px;
            justify-content: center;
            margin-top: 20px;
        }

        /* Recorrection Requests Section */
        .dashboard-section {
            background: white;
            border-radius: var(--border-radius);
            padding: 30px;
            margin-bottom: 30px;
            box-shadow: var(--shadow-md);
        }

        .section-header {
            margin-bottom: 25px;
            text-align: center;
        }

        .section-header h2 {
            font-size: 24px;
            color: var(--dark-color);
            margin-bottom: 10px;
        }

        .section-header p {
            color: #6B7280;
            font-size: 16px;
        }

        .recorrection-requests {
            min-height: 200px;
        }

        .loading-state {
            text-align: center;
            padding: 40px;
            color: #6B7280;
        }

        .loading-state i {
            font-size: 32px;
            margin-bottom: 15px;
            color: var(--primary-color);
        }

        .recorrection-card {
            background: #f9fafb;
            border: 1px solid #e5e7eb;
            border-radius: var(--border-radius);
            padding: 20px;
            margin-bottom: 20px;
            transition: all 0.3s ease;
        }

        .recorrection-card:hover {
            border-color: var(--primary-color);
            box-shadow: var(--shadow-sm);
        }

        .recorrection-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .student-info h4 {
            color: var(--dark-color);
            margin-bottom: 5px;
        }

        .student-info p {
            color: #6B7280;
            font-size: 14px;
        }

        .recorrection-status {
            padding: 6px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 600;
            background: #fbbf24;
            color: #92400e;
        }

        .recorrection-details {
            margin-bottom: 20px;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            padding: 8px 0;
            border-bottom: 1px solid #f3f4f6;
        }

        .detail-row:last-child {
            border-bottom: none;
        }

        .detail-label {
            font-weight: 600;
            color: var(--dark-color);
        }

        .detail-value {
            color: #6B7280;
        }

        .recorrection-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .btn-sm {
            padding: 8px 16px;
            font-size: 14px;
            border-radius: 6px;
        }

        .btn-outline-primary {
            background: transparent;
            border: 2px solid var(--primary-color);
            color: var(--primary-color);
        }

        .btn-outline-primary:hover {
            background: var(--primary-color);
            color: white;
        }

        .btn-success {
            background: var(--success-color);
            border-color: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background: #059669;
            border-color: #059669;
        }

        /* Pagination Styles */
        .pagination-container {
            margin-top: 30px;
            padding: 20px;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .pagination-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #e5e7eb;
        }

        .page-size-selector {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .page-size-selector label {
            font-size: 14px;
            color: #4B5563;
        }

        .page-size-selector select {
            padding: 8px 12px;
            border: 1px solid #D1D5DB;
            border-radius: 6px;
            font-size: 14px;
            color: #374151;
            background-color: #F9FAFB;
        }

        .pagination-info {
            text-align: center;
            margin-bottom: 15px;
            color: #6b7280;
            font-size: 14px;
        }

        .pagination-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 20px;
            flex-wrap: wrap;
        }

        .page-indicator {
            background: #f3f4f6;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 14px;
            font-weight: 600;
            color: #374151;
            min-width: 120px;
            text-align: center;
        }

        .pagination-controls .btn {
            min-width: 100px;
        }

        .pagination-controls .btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .pagination-controls .btn:not(:disabled):hover {
            transform: translateY(-1px);
        }

        /* Grade Tabs Styles */
        .grade-tabs-section {
            margin-bottom: 30px;
        }

        .grade-tabs-section h3 {
            margin-bottom: 20px;
            color: var(--dark-color);
            font-size: 1.3rem;
        }

        .grade-tabs {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-bottom: 20px;
        }

        .grade-tab {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 12px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 100px;
            text-align: center;
        }

        .grade-tab:hover {
            border-color: var(--primary-color);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.15);
        }

        .grade-tab.active {
            border-color: var(--primary-color);
            background: var(--primary-color);
            color: white;
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
        }

        .grade-label {
            font-size: 14px;
            font-weight: 600;
            margin-bottom: 4px;
        }

        .grade-count {
            font-size: 12px;
            opacity: 0.8;
            background: rgba(255, 255, 255, 0.2);
            padding: 2px 8px;
            border-radius: 10px;
            min-width: 20px;
        }

        .grade-tab:not(.active) .grade-count {
            background: #f3f4f6;
            color: #6b7280;
        }

        /* Recorrection Grade Tabs Styles */
        .recorrection-grade-tabs-section {
            margin-bottom: 25px;
        }

        .recorrection-grade-tabs-section h4 {
            margin-bottom: 15px;
            color: var(--dark-color);
            font-size: 1.1rem;
            font-weight: 600;
        }

        .recorrection-grade-tabs {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-bottom: 20px;
        }

        .recorrection-grade-tab {
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 10px 14px;
            border: 2px solid #e5e7eb;
            border-radius: 10px;
            background: white;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 90px;
            text-align: center;
        }

        .recorrection-grade-tab:hover {
            border-color: var(--primary-color);
            transform: translateY(-1px);
            box-shadow: 0 3px 8px rgba(79, 70, 229, 0.15);
        }

        .recorrection-grade-tab.active {
            border-color: var(--primary-color);
            background: var(--primary-color);
            color: white;
            box-shadow: 0 3px 8px rgba(79, 70, 229, 0.3);
        }

        .recorrection-grade-tab .grade-label {
            font-size: 13px;
            font-weight: 600;
            margin-bottom: 3px;
        }

        .recorrection-grade-tab .grade-count {
            font-size: 11px;
            opacity: 0.8;
            background: rgba(255, 255, 255, 0.2);
            padding: 2px 6px;
            border-radius: 8px;
            min-width: 18px;
        }

        .recorrection-grade-tab:not(.active) .grade-count {
            background: #f3f4f6;
            color: #6b7280;
        }

        /* Error and Empty States */
        .error-state {
            text-align: center;
            padding: 40px;
            color: #dc2626;
        }

        .error-state i {
            font-size: 32px;
            margin-bottom: 15px;
            color: #dc2626;
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #6b7280;
        }

        .empty-state i {
            font-size: 48px;
            margin-bottom: 15px;
            color: #10b981;
        }

        .empty-state h3 {
            font-size: 20px;
            margin-bottom: 10px;
            color: #374151;
        }

        .empty-state p {
            font-size: 16px;
            line-height: 1.5;
        }

        /* Enhanced Buttons */
        .btn {
            padding: 12px 24px;
            border-radius: var(--border-radius);
            font-weight: 600;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            border: none;
            cursor: pointer;
            font-size: 16px;
        }

        .btn-primary {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(79, 70, 229, 0.3);
        }

        .btn-secondary {
            background: var(--light-color);
            color: var(--dark-color);
            border: 2px solid #E5E7EB;
        }

        .btn-secondary:hover {
            background: white;
            transform: translateY(-2px);
            box-shadow: var(--shadow-md);
        }

        /* Recent Activity Styles */
        .recent-activity {
            background: white;
            border-radius: var(--border-radius);
            padding: 30px;
            box-shadow: var(--shadow-md);
            margin-bottom: 30px;
        }

        .recent-activity h3 {
            font-size: 22px;
            color: var(--dark-color);
            margin-bottom: 20px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .quiz-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .quiz-item {
            display: flex;
            align-items: center;
            gap: 20px;
            padding: 20px;
            background: var(--light-color);
            border-radius: var(--border-radius);
            transition: all 0.3s ease;
            border: 2px solid transparent;
        }

        .quiz-item:hover {
            transform: translateX(5px);
            border-color: var(--primary-color);
            box-shadow: var(--shadow-md);
        }

        .quiz-icon {
            width: 50px;
            height: 50px;
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 20px;
            flex-shrink: 0;
        }

        .quiz-content {
            flex: 1;
            min-width: 0;
        }

        .quiz-content h4 {
            font-size: 18px;
            color: var(--dark-color);
            margin-bottom: 5px;
        }

        .quiz-content p {
            color: #6B7280;
            font-size: 14px;
            margin-bottom: 10px;
            overflow: hidden;
            text-overflow: ellipsis;
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
        }

        .quiz-meta {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }

        .quiz-status {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        .quiz-status.approved {
            background: #D1FAE5;
            color: #065F46;
        }

        .quiz-status.pending {
            background: #FEF3C7;
            color: #92400E;
        }

        .quiz-date {
            color: #9CA3AF;
            font-size: 13px;
        }

        .quiz-actions {
            display: flex;
            gap: 10px;
            flex-shrink: 0;
        }

        .quiz-actions .btn {
            padding: 8px 16px;
            font-size: 14px;
        }

        /* Quiz Preview Styles */
        .quiz-preview {
            margin: 15px 0;
            padding: 12px;
            background: #f8f9fa;
            border-radius: 6px;
            border: 1px solid #e9ecef;
        }

        .complex-quiz-preview,
        .regular-quiz-preview {
            margin-top: 8px;
        }

        .preview-content {
            margin-top: 10px;
        }

        .preview-questions {
            margin-top: 8px;
        }

        .preview-question {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 6px;
            font-size: 13px;
            line-height: 1.4;
        }

        .question-number {
            font-weight: 600;
            color: #667eea;
            min-width: 25px;
        }

        .question-text {
            flex: 1;
            color: #495057;
        }

        .question-image-preview {
            background: #e3f2fd;
            color: #1976d2;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 11px;
            font-weight: 500;
        }

        .more-questions {
            margin-top: 8px;
            text-align: center;
        }

        .complex-element-preview {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            padding: 8px;
            margin-bottom: 6px;
            font-size: 12px;
        }

        .complex-element-preview:last-child {
            margin-bottom: 0;
        }

        .element-type-badge {
            display: inline-block;
            padding: 2px 6px;
            border-radius: 3px;
            font-size: 10px;
            font-weight: 600;
            text-transform: uppercase;
            margin-right: 6px;
        }

        .element-type-question {
            background: #e3f2fd;
            color: #1976d2;
        }

        .element-type-text {
            background: #e8f5e8;
            color: #2e7d32;
        }

        .element-type-image {
            background: #fff3e0;
            color: #f57c00;
        }

        .element-content-preview {
            color: #495057;
            line-height: 1.3;
        }

        .preview-image {
            max-width: 60px;
            max-height: 40px;
            border-radius: 3px;
            margin-left: 8px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

        .badge {
            display: inline-block;
            padding: 4px 10px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            margin-left: 8px;
        }

        .bg-warning {
            background: #FEF3C7;
            color: #92400E;
        }

        .bg-info {
            background: #DBEAFE;
            color: #1E40AF;
        }

        /* Footer Styles */
        .footer {
            background: white;
            padding: 20px 0;
            margin-top: 60px;
            box-shadow: 0 -2px 10px rgba(0,0,0,0.05);
        }

        .footer-content {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
            text-align: center;
            color: #6B7280;
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 2000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            animation: fadeIn 0.3s ease;
        }

        .modal.show {
            display: block;
        }

        .modal-content {
            background: white;
            margin: 50px auto;
            padding: 0;
            border-radius: var(--border-radius);
            width: 90%;
            max-width: 800px;
            max-height: 80vh;
            overflow: hidden;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .modal-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 20px 30px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h2 {
            font-size: 24px;
            margin: 0;
        }

        .close {
            color: white;
            font-size: 32px;
            font-weight: bold;
            cursor: pointer;
            background: none;
            border: none;
            padding: 0;
            line-height: 1;
        }

        .close:hover {
            opacity: 0.8;
        }

        .modal-body {
            padding: 30px;
            max-height: calc(80vh - 80px);
            overflow-y: auto;
        }

        /* Laptop and Desktop Styles */
        @media (min-width: 769px) and (max-width: 1200px) {
            .nav-container {
                padding: 0 15px;
                min-width: 1100px;
            }

            .nav-menu {
                gap: 6px;
                flex-shrink: 0;
            }

            .nav-link {
                padding: 6px 10px;
                font-size: 13px;
                flex-shrink: 0;
            }

            .nav-logo a {
                font-size: 20px;
            }

            .nav-logo a::before {
                font-size: 24px;
            }
        }

        /* Responsive Styles */
        @media (max-width: 768px) {
            .hamburger {
                display: flex;
            }

            .nav-menu {
                position: fixed;
                top: 70px;
                right: -100%;
                width: 280px;
                height: calc(100vh - 70px);
                background: white;
                flex-direction: column;
                padding: 30px 20px;
                gap: 15px;
                transition: all 0.3s ease;
                box-shadow: -5px 0 15px rgba(0,0,0,0.1);
                overflow-y: auto;
                align-items: stretch;
            }

            .nav-menu.active {
                right: 0;
            }

            .nav-link {
                padding: 15px 20px;
                border-radius: var(--border-radius);
                justify-content: flex-start;
            }

            .main-content {
                padding: 15px;
            }

            .dashboard-header {
                padding: 20px;
            }

            .user-details h1 {
                font-size: 22px;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }

            .action-cards {
                grid-template-columns: 1fr;
            }

            .stat-number {
                font-size: 28px;
            }

            .code-display {
                flex-direction: column;
            }

            .code-input {
                width: 100%;
            }

            .copy-btn {
                width: 100%;
            }
        }

        @media (max-width: 480px) {
            .nav-logo a {
                font-size: 18px;
            }

            .nav-logo a::before {
                font-size: 22px;
            }

            .user-avatar, .user-avatar-placeholder {
                width: 60px;
                height: 60px;
                font-size: 24px;
            }

            .user-details h1 {
                font-size: 20px;
            }

            .btn {
                padding: 10px 20px;
                font-size: 14px;
            }

            .action-card {
                padding: 20px;
            }

            .action-card-icon {
                font-size: 36px;
            }

            .recent-activity {
                padding: 20px;
            }

            .quiz-item {
                flex-direction: column;
                text-align: center;
                padding: 15px;
            }

            .quiz-content h4 {
                white-space: normal;
            }

            .quiz-meta {
                justify-content: center;
            }

            .quiz-actions {
                width: 100%;
                flex-direction: column;
            }

            .quiz-actions .btn {
                width: 100%;
            }

            .modal-content {
                width: 95%;
                margin: 20px auto;
            }

            .modal-header {
                padding: 15px 20px;
            }

            .modal-header h2 {
                font-size: 20px;
            }

            .modal-body {
                padding: 20px;
            }
        }

        /* Ensure navigation is visible on all screen sizes */
        @media (min-width: 1201px) {
            .nav-container {
                padding: 0 30px;
            }

            .nav-menu {
                gap: 10px;
            }

            .nav-link {
                padding: 10px 16px;
                font-size: 14px;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
          
            <div class="hamburger" onclick="toggleMobileMenu()">
                <span></span>
                <span></span>
                <span></span>
            </div>
            <div class="nav-menu" id="navMenu">
                <a href="/teacher/dashboard" class="nav-link active">
                    <i class="fas fa-home"></i> Dashboard
                </a>
                <a href="/create-quiz" class="nav-link">
                    <i class="fas fa-plus-circle"></i> Create Quiz
                </a>
                <a href="/create-podcast" class="nav-link">
                    <i class="fas fa-podcast"></i> Create Podcast
                </a>
                <a href="/competitive-quiz" class="nav-link">
                    <i class="fas fa-trophy"></i> Competitive Sessions
                </a>
                <a href="/teacher/post-content" class="nav-link">
                    <i class="fas fa-upload"></i> Post Content
                </a>
                <a href="/teacher/assign-students" class="nav-link">
                    <i class="fas fa-user-plus"></i> Assign Students
                </a>
                <a href="/teacher/student-results" class="nav-link">
                    <i class="fas fa-chart-bar"></i> Student Results
                </a>
                <a href="/teacher/complex-quiz-grading" class="nav-link">
                    <i class="fas fa-clipboard-check"></i> Grade Complex Quizzes
                </a>
                <a href="/logout" class="nav-link logout-btn">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </a>
            </div>
        </div>
    </nav>
    <div class="mobile-menu-overlay" onclick="toggleMobileMenu()"></div>

    <main class="main-content">
        <div class="dashboard-container">
            <div class="dashboard-header">
                <div class="user-info">
                    <% if (user.photos && user.photos.length > 0) { %>
                        <img src="<%= user.photos[0].value %>" alt="Profile" class="user-avatar">
                    <% } else { %>
                        <div class="user-avatar-placeholder">
                            <i class="fas fa-chalkboard-teacher"></i>
                        </div>
                    <% } %>
                    <div class="user-details">
                        <h1>Welcome, <%= user.displayName %>!</h1>
                        <p><%= user.email %></p>
                        <span class="role-badge teacher-badge">Teacher</span>
                        <% if (organization) { %>
                            <div class="organization-info">
                                <h3><i class="fas fa-school me-2"></i><%= organization.name %></h3>
                                <div class="organization-code-section">
                                    <div class="organization-code">
                                        <label>Student Signup Code:</label>
                                        <div class="code-display">
                                            <input type="text" value="<%= organization.subdomain %>" readonly id="orgCode" class="code-input">
                                            <button onclick="copyOrgCode()" class="copy-btn" title="Copy to clipboard">
                                                <i class="fas fa-copy"></i>
                                            </button>
                                        </div>
                                        <small class="help-text">
                                            <i class="fas fa-info-circle me-1"></i>
                                            Share this code with students so they can join your organization
                                        </small>
                                    </div>
                                </div>
                            </div>
                        <% } %>
                    </div>
                </div>
            </div>

            <div class="dashboard-content">
                <div class="stats-grid">
                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-file-alt"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Total Quizzes</h3>
                            <p class="stat-number"><%= quizzes.length %></p>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-check-circle"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Approved Quizzes</h3>
                            <p class="stat-number"><%= quizzes.filter(q => q.isApproved).length %></p>
                        </div>
                    </div>

                    <div class="stat-card">
                        <div class="stat-icon">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="stat-info">
                            <h3>Pending Approval</h3>
                            <p class="stat-number"><%= quizzes.filter(q => !q.isApproved).length %></p>
                        </div>
                    </div>
                </div>

                <div class="action-cards">
                    <div class="action-card">
                        <div class="action-card-icon">
                            <i class="fas fa-plus-circle"></i>
                        </div>
                        <h3>Create New Quiz</h3>
                        <p>Design engaging quizzes with multiple question types and instant feedback</p>
                        <a href="/create-quiz" class="btn btn-primary">
                            <i class="fas fa-magic"></i> Create Quiz
                        </a>
                    </div>

                    <div class="action-card">
                        <div class="action-card-icon">
                            <i class="fas fa-trophy"></i>
                        </div>
                        <h3>Competitive Sessions</h3>
                        <p>Host live competitive quiz sessions with real-time leaderboards</p>
                        <a href="/competitive-quiz" class="btn btn-primary">
                            <i class="fas fa-bolt"></i> Manage Sessions
                        </a>
                    </div>

                    <div class="action-card">
                        <div class="action-card-icon">
                            <i class="fas fa-chalkboard-teacher"></i>
                        </div>
                        <h3>Whiteboard Sessions</h3>
                        <p>Create interactive whiteboard sessions for live teaching and collaboration</p>
                        <a href="/whiteboard/dashboard" class="btn btn-primary">
                            <i class="fas fa-chalkboard-teacher"></i> Manage Sessions
                        </a>
                    </div>

                    <div class="action-card">
                        <div class="action-card-icon">
                            <i class="fas fa-folder-open"></i>
                        </div>
                        <h3>My Quizzes</h3>
                        <p>View, edit, and manage all your created quizzes in one place</p>
                        <button class="btn btn-secondary" onclick="showQuizModal()">
                            <i class="fas fa-eye"></i> View Quizzes
                        </button>
                    </div>

                    <div class="action-card">
                        <div class="action-card-icon">
                            <i class="fas fa-chart-line"></i>
                        </div>
                        <h3>Student Analytics</h3>
                        <p>Track student performance with detailed insights and progress reports</p>
                        <a href="/teacher/student-results" class="btn btn-secondary">
                            <i class="fas fa-chart-bar"></i> View Analytics
                        </a>
                    </div>

                    <div class="action-card">
                        <div class="action-card-icon">
                            <i class="fas fa-upload"></i>
                        </div>
                        <h3>Study Materials</h3>
                        <p>Upload and share educational content with your students</p>
                        <a href="/teacher/post-content" class="btn btn-secondary">
                            <i class="fas fa-cloud-upload-alt"></i> Post Content
                        </a>
                    </div>

                    <div class="action-card">
                        <div class="action-card-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <h3>Student Management</h3>
                        <p>Assign quizzes and manage student access to your content</p>
                        <a href="/teacher/assign-students" class="btn btn-secondary">
                            <i class="fas fa-user-plus"></i> Manage Students
                        </a>
                    </div>
                </div>

                <!-- Grade Tabs for Quiz Organization -->
                <div class="grade-tabs-section">
                    <h3><i class="fas fa-layer-group me-2"></i>Quiz Organization by Grade</h3>
                    <div class="grade-tabs">
                        <% gradeTabs.forEach(tab => { %>
                            <button class="grade-tab <%= tab.grade === selectedGrade ? 'active' : '' %>"
                                    onclick="switchGradeTab('<%= tab.grade %>')"
                                    data-grade="<%= tab.grade %>">
                                <span class="grade-label"><%= tab.label %></span>
                                <span class="grade-count"><%= tab.count %></span>
                            </button>
                        <% }); %>
                    </div>
                </div>

                <div class="recent-activity" id="recentQuizzesSection">
                    <h3>Recent Quizzes <% if (selectedGrade !== 'all') { %><small class="text-muted">(<%= selectedGrade %>)</small><% } %></h3>
                    <% if (quizzes.length > 0) { %>
                        <div class="quiz-list">
                            <% quizzes.forEach(quiz => { %>
                                <div class="quiz-item" data-quiz-id="<%= quiz._id %>">
                                    <div class="quiz-icon">
                                        <i class="fas <%= quiz.quizType === 'competitive' ? 'fa-trophy' : 'fa-file-alt' %>"></i>
                                    </div>
                                    <div class="quiz-content">
                                        <h4>
                                            <%= quiz.title %>
                                            <% if (quiz.quizType === 'competitive') { %>
                                                <span class="badge bg-warning text-dark ms-2" style="font-size: 12px;">
                                                    <i class="fas fa-trophy"></i> Competitive
                                                </span>
                                            <% } else { %>
                                                <span class="badge bg-info text-white ms-2" style="font-size: 12px;">
                                                    <i class="fas fa-book"></i> Regular
                                                </span>
                                            <% } %>
                                        </h4>
                                        <p><%= quiz.description %></p>

                                        <!-- Quiz Content Preview -->
                                        <div class="quiz-preview" id="quiz-preview-<%= quiz._id %>">
                                            <% if (quiz.elements && quiz.elements.length > 0) { %>
                                                <!-- Complex Quiz Preview -->
                                                <div class="complex-quiz-preview">
                                                    <small class="text-muted">
                                                        <i class="fas fa-palette"></i> Advanced Quiz Builder
                                                    </small>
                                                    <div class="preview-content" data-quiz-elements='<%- JSON.stringify(quiz.elements) %>'>
                                                        <!-- Content will be rendered by JavaScript -->
                                                    </div>
                                                </div>
                                            <% } else if (quiz.questions && quiz.questions.length > 0) { %>
                                                <!-- Regular Quiz Preview -->
                                                <div class="regular-quiz-preview">
                                                    <small class="text-muted">
                                                        <i class="fas fa-list"></i> <%= quiz.questions.length %> Questions
                                                    </small>
                                                    <div class="preview-questions">
                                                        <% quiz.questions.slice(0, 2).forEach((question, index) => { %>
                                                            <div class="preview-question">
                                                                <span class="question-number">Q<%= index + 1 %>:</span>
                                                                <span class="question-text"><%= question.question.substring(0, 80) %><%= question.question.length > 80 ? '...' : '' %></span>
                                                                <% if (question.image) { %>
                                                                    <div class="question-image-preview" data-s3-key="<%= question.image %>">
                                                                        <i class="fas fa-image"></i> Image
                                                                    </div>
                                                                <% } %>
                                                            </div>
                                                        <% }); %>
                                                        <% if (quiz.questions.length > 2) { %>
                                                            <div class="more-questions">
                                                                <small class="text-muted">+ <%= quiz.questions.length - 2 %> more questions</small>
                                                            </div>
                                                        <% } %>
                                                    </div>
                                                </div>
                                            <% } %>
                                        </div>

                                        <div class="quiz-meta">
                                            <span class="quiz-status <%= quiz.isApproved ? 'approved' : 'pending' %>">
                                                <%= quiz.isApproved ? 'Approved' : 'Pending Approval' %>
                                            </span>
                                            <span class="quiz-date">
                                                <%= new Date(quiz.createdAt).toLocaleDateString() %>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="quiz-actions">
                                        <a href="/view-quiz/<%= quiz._id %>" class="btn btn-sm btn-secondary" title="View Quiz">
                                            <i class="fas fa-eye"></i>
                                        </a>
                                        <a href="/quiz-results/<%= quiz._id %>" class="btn btn-sm btn-info" title="View Results">
                                            <i class="fas fa-chart-bar"></i>
                                        </a>
                                        <% if (quiz.quizType === 'competitive') { %>
                                            <a href="/competitive-quiz" class="btn btn-sm btn-success" title="Manage Sessions">
                                                <i class="fas fa-trophy"></i>
                                            </a>
                                        <% } %>
                                        <button class="btn btn-sm btn-warning fix-options-btn" title="Fix Options" data-quiz-id="<%= quiz._id %>">
                                            <i class="fas fa-wrench"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger delete-quiz-btn" title="Delete Quiz" data-quiz-id="<%= quiz._id %>">
                                            <i class="fas fa-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    <% } else { %>
                        <div class="empty-state">
                            <i class="fas fa-file-alt"></i>
                            <p>No quizzes created yet. Start by creating your first quiz!</p>
                            <a href="/create-quiz" class="btn btn-primary">Create Your First Quiz</a>
                        </div>
                    <% } %>
                </div>

                <!-- Pagination Controls for Recent Quizzes -->
                <% if (pagination.totalPages > 1) { %>
                    <div class="pagination-container">
                        <div class="pagination-header">
                            <div class="page-size-selector">
                                <label for="quizPageSize">Show:</label>
                                <select id="quizPageSize" onchange="changeQuizPageSize()">
                                    <option value="5">5 per page</option>
                                    <option value="10" selected>10 per page</option>
                                    <option value="20">20 per page</option>
                                    <option value="50">50 per page</option>
                                </select>
                            </div>
                            <div class="pagination-info">
                                <span>Showing <%= ((pagination.currentPage - 1) * pagination.limit) + 1 %>-<%= Math.min(pagination.currentPage * pagination.limit, pagination.totalQuizzes) %> of <%= pagination.totalQuizzes %> quizzes</span>
                            </div>
                        </div>
                        <div class="pagination-controls">
                            <a href="?grade=<%= selectedGrade %>&page=<%= pagination.prevPage %>&limit=<%= pagination.limit %>" class="btn btn-sm btn-outline-primary <%= !pagination.hasPrevPage ? 'disabled' : '' %>" <%= !pagination.hasPrevPage ? 'onclick="return false;"' : '' %>>
                                <i class="fas fa-chevron-left"></i> Previous
                            </a>
                            <span class="page-indicator">
                                Page <span><%= pagination.currentPage %></span> of <span><%= pagination.totalPages %></span>
                            </span>
                            <a href="?grade=<%= selectedGrade %>&page=<%= pagination.nextPage %>&limit=<%= pagination.limit %>" class="btn btn-sm btn-outline-primary <%= !pagination.hasNextPage ? 'disabled' : '' %>" <%= !pagination.hasNextPage ? 'onclick="return false;"' : '' %>>
                                Next <i class="fas fa-chevron-right"></i>
                            </a>
                        </div>
                    </div>
                <% } %>

            </div>
        </div>
    </main>

    <!-- Quiz Modal -->
    <div id="quizModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2><i class="fas fa-file-alt me-2"></i>My Quizzes</h2>
                <span class="close" onclick="closeQuizModal()">&times;</span>
            </div>
            <div class="modal-body">
                <div class="quiz-filters">
                    <button class="filter-btn active" data-filter="all">All Quizzes</button>
                    <button class="filter-btn" data-filter="approved">Approved</button>
                    <button class="filter-btn" data-filter="pending">Pending</button>
                </div>
                <div id="quizModalList" class="quiz-modal-list">
                    <!-- Quizzes will be loaded here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Podcast Management Section -->
    <div class="dashboard-section" style="border: 3px solid #ff6b6b; background: #fff5f5;">
        <div class="section-header">
            <h2><i class="fas fa-podcast me-2"></i>My Podcasts</h2>
            <p>Manage your educational podcasts</p>
            <div style="background: #ff6b6b; color: white; padding: 10px; border-radius: 5px; margin-top: 10px;">
                üéôÔ∏è PODCAST SECTION - This should be visible!
            </div>
        </div>

        <div id="podcastsContainer" class="podcasts-container">
            <div class="loading-state">
                <i class="fas fa-spinner fa-spin"></i>
                <p>Loading podcasts...</p>
            </div>
        </div>
    </div>

    <!-- Recorrection Requests Section -->
    <div class="dashboard-section">
        <div class="section-header">
            <h2><i class="fas fa-redo me-2"></i>Recorrection Requests</h2>
            <p>Review and re-evaluate student quiz submissions</p>
        </div>

        <!-- Grade Tabs for Recorrection Requests -->
        <div class="recorrection-grade-tabs-section">
            <h4><i class="fas fa-layer-group me-2"></i>Filter by Grade Level</h4>
            <div class="recorrection-grade-tabs" id="recorrectionGradeTabs">
                <div class="loading-state">
                    <i class="fas fa-spinner fa-spin"></i>
                    <p>Loading grade tabs...</p>
                </div>
            </div>
        </div>

        <div class="recorrection-requests" id="recorrectionRequests">
            <!-- Recorrection requests will be loaded here -->
            <div class="loading-state">
                <i class="fas fa-spinner fa-spin"></i>
                <p>Loading recorrection requests...</p>
            </div>
        </div>

        <!-- Pagination Controls -->
        <div class="pagination-container" id="paginationContainer" style="display: none;">
            <div class="pagination-header">
                <div class="page-size-selector">
                    <label for="pageSize">Show:</label>
                    <select id="pageSize" onchange="changePageSize()">
                        <option value="5">5 per page</option>
                        <option value="10" selected>10 per page</option>
                        <option value="20">20 per page</option>
                        <option value="50">50 per page</option>
                    </select>
                </div>
                <div class="pagination-info">
                    <span id="paginationInfo">Showing 0 of 0 requests</span>
                </div>
            </div>
            <div class="pagination-controls">
                <button class="btn btn-sm btn-outline-primary" id="prevPageBtn" onclick="changePage('prev')" disabled>
                    <i class="fas fa-chevron-left"></i> Previous
                </button>
                <span class="page-indicator">
                    Page <span id="currentPage">1</span> of <span id="totalPages">1</span>
                </span>
                <button class="btn btn-sm btn-outline-primary" id="nextPageBtn" onclick="changePage('next')" disabled>
                    Next <i class="fas fa-chevron-right"></i>
                </button>
            </div>
        </div>
    </div>
</div>

    <footer class="footer">
        <div class="footer-content">
            <p>&copy; 2025 SkillOns. All rights reserved.</p>
        </div>
    </footer>

    <script>
        // Hamburger Menu Toggle
        function toggleMobileMenu() {
            const hamburger = document.querySelector('.hamburger');
            const navMenu = document.getElementById('navMenu');
            const overlay = document.querySelector('.mobile-menu-overlay');

            hamburger.classList.toggle('active');
            navMenu.classList.toggle('active');
            overlay.classList.toggle('active');

            // Prevent body scroll when menu is open
            if (navMenu.classList.contains('active')) {
                document.body.style.overflow = 'hidden';
            } else {
                document.body.style.overflow = 'auto';
            }
        }

        // Close mobile menu when clicking on a link
        document.addEventListener('DOMContentLoaded', function() {
            const navLinks = document.querySelectorAll('.nav-menu .nav-link');
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    if (window.innerWidth <= 768) {
                        // Don't close immediately for modal triggers
                        if (!this.getAttribute('onclick')) {
                            toggleMobileMenu();
                        }
                    }
                });
            });

            // Close menu on window resize if open
            window.addEventListener('resize', function() {
                if (window.innerWidth > 768) {
                    const hamburger = document.querySelector('.hamburger');
                    const navMenu = document.getElementById('navMenu');
                    const overlay = document.querySelector('.mobile-menu-overlay');

                    hamburger.classList.remove('active');
                    navMenu.classList.remove('active');
                    overlay.classList.remove('active');
                    document.body.style.overflow = 'auto';
                }
            });
        });

        // Quiz data from server
        const quizData = <%- JSON.stringify(quizzes) %>;

        // Modal functionality
        function showQuizModal() {
            console.log('Opening quiz modal from teacher dashboard');
            const modal = document.getElementById('quizModal');
            modal.style.display = 'block';
            modal.classList.add('show');
            loadQuizModal();
        }

        function closeQuizModal() {
            const modal = document.getElementById('quizModal');
            modal.style.display = 'none';
            modal.classList.remove('show');
        }

        function loadQuizModal() {
            const quizList = document.getElementById('quizModalList');
            quizList.innerHTML = '';

            quizData.forEach(quiz => {
                const quizCard = createQuizCard(quiz);
                quizList.appendChild(quizCard);
            });
        }

        function createQuizCard(quiz) {
            const card = document.createElement('div');
            card.className = 'quiz-modal-card';
            card.innerHTML = `
                <div class="quiz-card-header">
                    <div class="quiz-card-title">
                        <h3>${quiz.title}</h3>
                        <span class="quiz-status ${quiz.isApproved ? 'approved' : 'pending'}">
                            ${quiz.isApproved ? 'Approved' : 'Pending Approval'}
                        </span>
                    </div>
                    <div class="quiz-card-actions">
                        <button class="btn btn-sm btn-primary" onclick="viewQuizDetails('${quiz._id}')">
                            <i class="fas fa-eye"></i> View Details
                        </button>
                        <button class="btn btn-sm btn-danger" onclick="deleteQuizFromModal('${quiz._id}', this)">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
                <div class="quiz-card-content">
                    <p><strong>Description:</strong> ${quiz.description}</p>
                    <p><strong>Questions:</strong> ${quiz.questions.length}</p>
                    <p><strong>Created:</strong> ${new Date(quiz.createdAt).toLocaleDateString()}</p>
                </div>
            `;
            return card;
        }

        function viewQuizDetails(quizId) {
            window.open(`/view-quiz/${quizId}`, '_blank');
        }

        function deleteQuizFromModal(quizId, button) {
            const quizCard = button.closest('.quiz-modal-card');
            const quizTitle = quizCard.querySelector('h3').textContent;

            if (confirm(`Are you sure you want to delete "${quizTitle}"? This action cannot be undone.`)) {
                fetch(`/delete-quiz/${quizId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('Quiz deleted successfully!', 'success');
                        quizCard.remove();
                        updateStats();
                    } else {
                        showNotification(data.message || 'Error deleting quiz', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error deleting quiz', 'error');
                });
            }
        }



        // Global function to ensure quiz modal is hidden
        function ensureQuizModalHidden() {
            const modal = document.getElementById('quizModal');
            if (modal) {
                modal.style.display = 'none';
                modal.classList.remove('show');
                console.log('Quiz modal forcibly hidden');
            }
        }

        // Render quiz previews for complex quizzes
        function renderQuizPreviews() {
            const complexQuizPreviews = document.querySelectorAll('.complex-quiz-preview .preview-content');

            complexQuizPreviews.forEach(previewContainer => {
                const elementsData = previewContainer.getAttribute('data-quiz-elements');
                if (!elementsData) return;

                try {
                    const elements = JSON.parse(elementsData);
                    renderComplexQuizPreview(elements, previewContainer);
                } catch (error) {
                    console.error('Error parsing quiz elements:', error);
                    previewContainer.innerHTML = '<small class="text-muted">Error loading preview</small>';
                }
            });
        }

        function renderComplexQuizPreview(elements, container) {
            // Limit to first 3 elements for preview
            const previewElements = elements.slice(0, 3);

            previewElements.forEach(element => {
                const elementDiv = document.createElement('div');
                elementDiv.className = 'complex-element-preview';

                let content = '';
                let badge = '';

                switch (element.type) {
                    case 'question':
                        badge = '<span class="element-type-badge element-type-question">Question</span>';
                        content = element.content ? element.content.substring(0, 60) + (element.content.length > 60 ? '...' : '') : 'Question content';
                        break;

                    case 'sub-question':
                        badge = '<span class="element-type-badge element-type-question">Sub-Q</span>';
                        content = element.content ? element.content.substring(0, 50) + (element.content.length > 50 ? '...' : '') : 'Sub-question content';
                        break;

                    case 'text':
                    case 'textbox':
                        badge = '<span class="element-type-badge element-type-text">Text</span>';
                        content = element.content ? element.content.substring(0, 50) + (element.content.length > 50 ? '...' : '') : 'Text content';
                        break;

                    case 'image':
                        badge = '<span class="element-type-badge element-type-image">Image</span>';
                        content = 'Image element';
                        if (element.src) {
                            content += `
                                <div class="dashboard-image-container" data-s3-key="${element.src}">
                                    <div class="dashboard-image-loading" style="display: inline-block; color: #6b7280; font-size: 11px;">
                                        <i class="fas fa-spinner fa-spin"></i> Loading...
                                    </div>
                                    <img class="preview-image dashboard-image" style="display: none;" alt="Preview">
                                </div>
                            `;
                        }
                        break;

                    case 'table':
                        badge = '<span class="element-type-badge" style="background: #f3e8ff; color: #a855f7;">Table</span>';
                        content = 'Table element';
                        break;

                    case 'latex':
                        badge = '<span class="element-type-badge" style="background: #fce7f3; color: #ec4899;">LaTeX</span>';
                        content = element.content ? element.content.substring(0, 40) + '...' : 'LaTeX content';
                        break;

                    default:
                        badge = `<span class="element-type-badge" style="background: #f1f5f9; color: #64748b;">${element.type}</span>`;
                        content = element.content ? element.content.substring(0, 50) + '...' : 'Element content';
                        break;
                }

                elementDiv.innerHTML = `
                    ${badge}
                    <span class="element-content-preview">${content}</span>
                `;

                container.appendChild(elementDiv);
            });

            // Show "more elements" indicator if there are more than 3
            if (elements.length > 3) {
                const moreDiv = document.createElement('div');
                moreDiv.className = 'more-questions';
                moreDiv.innerHTML = `<small class="text-muted">+ ${elements.length - 3} more elements</small>`;
                container.appendChild(moreDiv);
            }
        }

        // Function to load pre-signed URLs for dashboard preview images
        async function loadDashboardImageUrls() {
            try {
                const dashboardImageContainers = document.querySelectorAll('.dashboard-image-container[data-s3-key]');

                if (dashboardImageContainers.length === 0) {
                    return;
                }

                console.log(`Loading ${dashboardImageContainers.length} dashboard preview images...`);

                for (const container of dashboardImageContainers) {
                    const s3Key = container.getAttribute('data-s3-key');
                    const loadingDiv = container.querySelector('.dashboard-image-loading');
                    const img = container.querySelector('.dashboard-image');

                    try {
                        console.log(`Loading dashboard image for S3 key: ${s3Key}`);

                        const response = await fetch(`/get-image-url/${encodeURIComponent(s3Key)}`);

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const data = await response.json();

                        if (data.presignedUrl) {
                            // Hide loading, show image
                            loadingDiv.style.display = 'none';
                            img.src = data.presignedUrl;
                            img.style.display = 'inline-block';
                            img.style.maxWidth = '60px';
                            img.style.maxHeight = '40px';
                            img.style.borderRadius = '3px';
                            img.style.marginLeft = '8px';
                            img.style.boxShadow = '0 1px 3px rgba(0,0,0,0.1)';

                            console.log(`‚úÖ Loaded dashboard image for S3 key: ${s3Key}`);
                        } else {
                            // Hide container if no image URL received
                            container.style.display = 'none';
                            console.log(`No presigned URL received for dashboard image S3 key: ${s3Key}`);
                        }
                    } catch (error) {
                        console.error(`‚ùå Error loading dashboard image for S3 key ${s3Key}:`, error);
                        // Hide container on error
                        container.style.display = 'none';
                    }
                }
            } catch (error) {
                console.error('‚ùå Error in loadDashboardImageUrls:', error);
            }
        }

        // Ensure quiz modal is hidden on page load and filter functionality
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Teacher dashboard page loaded');

            // Explicitly ensure modal is hidden on page load
            ensureQuizModalHidden();

            // Render quiz previews
            renderQuizPreviews();

            // Load dashboard images after a short delay
            setTimeout(loadDashboardImageUrls, 1000);

            // Add additional safety checks after short delays
            setTimeout(ensureQuizModalHidden, 100);
            setTimeout(ensureQuizModalHidden, 500);

            const filterButtons = document.querySelectorAll('.filter-btn');

            filterButtons.forEach(button => {
                button.addEventListener('click', function() {
                    // Remove active class from all buttons
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    // Add active class to clicked button
                    this.classList.add('active');

                    const filter = this.getAttribute('data-filter');
                    filterQuizzes(filter);
                });
            });
        });

        function filterQuizzes(filter) {
            const quizCards = document.querySelectorAll('.quiz-modal-card');

            quizCards.forEach(card => {
                const status = card.querySelector('.quiz-status').textContent.trim();

                if (filter === 'all') {
                    card.style.display = 'block';
                } else if (filter === 'approved' && status === 'Approved') {
                    card.style.display = 'block';
                } else if (filter === 'pending' && status === 'Pending Approval') {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('quizModal');
            if (event.target === modal) {
                closeQuizModal();
            }
        }

        // Fix options functionality and additional modal protection
        document.addEventListener('DOMContentLoaded', function() {
            // Additional safety check to ensure modal is hidden
            ensureQuizModalHidden();

            const fixButtons = document.querySelectorAll('.fix-options-btn');

            fixButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const quizId = this.getAttribute('data-quiz-id');
                    const quizItem = this.closest('.quiz-item');
                    const quizTitle = quizItem.querySelector('h4').textContent;

                    if (confirm(`Are you sure you want to fix the options for "${quizTitle}"? This will ensure all questions have exactly 4 options.`)) {
                        fixQuizOptions(quizId, quizItem);
                    }
                });
            });

            function fixQuizOptions(quizId, quizItem) {
                fetch(`/fix-quiz-options/${quizId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showNotification('Quiz options fixed successfully!', 'success');
                        // Reload the page to show updated quiz
                        setTimeout(() => {
                            window.location.reload();
                        }, 1000);
                    } else {
                        showNotification(data.error || 'Error fixing quiz options', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error fixing quiz options', 'error');
                });
            }

            // Delete quiz functionality
            const deleteButtons = document.querySelectorAll('.delete-quiz-btn');

            deleteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const quizId = this.getAttribute('data-quiz-id');
                    const quizItem = this.closest('.quiz-item');
                    const quizTitle = quizItem.querySelector('h4').textContent;

                    if (confirm(`Are you sure you want to delete "${quizTitle}"? This action cannot be undone.`)) {
                        deleteQuiz(quizId, quizItem);
                    }
                });
            });

            function deleteQuiz(quizId, quizItem) {
                fetch(`/delete-quiz/${quizId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Show success message
                        showNotification('Quiz deleted successfully!', 'success');

                        // Remove the quiz item from the DOM
                        quizItem.style.opacity = '0';
                        quizItem.style.transform = 'translateX(-100%)';
                        setTimeout(() => {
                            quizItem.remove();

                            // Update the stats
                            updateStats();
                        }, 300);
                    } else {
                        showNotification(data.message || 'Error deleting quiz', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showNotification('Error deleting quiz', 'error');
                });
            }

            function showNotification(message, type) {
                // Create notification element
                const notification = document.createElement('div');
                notification.className = `notification ${type}`;
                notification.innerHTML = `
                    <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'}"></i>
                    <span>${message}</span>
                `;

                // Add to page
                document.body.appendChild(notification);

                // Show notification
                setTimeout(() => {
                    notification.classList.add('show');
                }, 100);

                // Remove notification after 3 seconds
                setTimeout(() => {
                    notification.classList.remove('show');
                    setTimeout(() => {
                        notification.remove();
                    }, 300);
                }, 3000);
            }

            function updateStats() {
                const quizItems = document.querySelectorAll('.quiz-item');
                const totalQuizzes = quizItems.length;
                const approvedQuizzes = Array.from(quizItems).filter(item =>
                    item.querySelector('.quiz-status').classList.contains('approved')
                ).length;
                const pendingQuizzes = totalQuizzes - approvedQuizzes;

                // Update stat numbers
                const statNumbers = document.querySelectorAll('.stat-number');
                if (statNumbers.length >= 3) {
                    statNumbers[0].textContent = totalQuizzes;
                    statNumbers[1].textContent = approvedQuizzes;
                    statNumbers[2].textContent = pendingQuizzes;
                }
            }

            // Copy organization code functionality
            function copyOrgCode() {
                const codeInput = document.getElementById('orgCode');
                const copyBtn = codeInput.nextElementSibling;

                // Select and copy the text
                codeInput.select();
                codeInput.setSelectionRange(0, 99999); // For mobile devices

                try {
                    document.execCommand('copy');

                    // Visual feedback
                    const originalIcon = copyBtn.innerHTML;
                    copyBtn.innerHTML = '<i class="fas fa-check"></i>';
                    copyBtn.style.background = '#22c55e';

                    // Show notification
                    showNotification('Organization code copied to clipboard!', 'success');

                    // Reset button after 2 seconds
                    setTimeout(() => {
                        copyBtn.innerHTML = originalIcon;
                        copyBtn.style.background = '';
                    }, 2000);
                } catch (err) {
                    console.error('Failed to copy: ', err);
                    showNotification('Failed to copy code. Please copy manually.', 'error');
                }
            }
        });
    </script>

    <!-- Session timeout management -->
    <script src="/js/session-timeout.js"></script>
    <script>
        // Load recorrection requests and grade tabs when page loads
        document.addEventListener('DOMContentLoaded', function() {
            loadRecorrectionGradeTabs();
            loadRecorrectionRequests(1);
            loadTeacherPodcasts();
        });

        // Current page tracking
        let currentPage = 1;
        let totalPages = 1;
        let totalRequests = 0;

        // Function to load recorrection requests
        async function loadRecorrectionRequests(page = 1, pageSize = 10, grade = 'all') {
            try {
                // Show loading state
                const container = document.getElementById('recorrectionRequests');
                container.innerHTML = `
                    <div class="loading-state">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Loading recorrection requests...</p>
                    </div>
                `;

                currentPage = page;
                const response = await fetch(`/api/recorrection-requests?page=${page}&limit=${pageSize}&grade=${grade}`);
                if (response.ok) {
                    const data = await response.json();
                    displayRecorrectionRequests(data.requests);
                    updatePagination(data.pagination);
                } else {
                    container.innerHTML =
                        '<div class="error-state"><p>Error loading recorrection requests</p></div>';
                }
            } catch (error) {
                console.error('Error loading recorrection requests:', error);
                const container = document.getElementById('recorrectionRequests');
                container.innerHTML =
                    '<div class="error-state"><p>Error loading recorrection requests</p></div>';
            }
        }

        // Function to change page
        function changePage(direction) {
            let newPage = currentPage;

            if (direction === 'next' && currentPage < totalPages) {
                newPage = currentPage + 1;
            } else if (direction === 'prev' && currentPage > 1) {
                newPage = currentPage - 1;
            }

            if (newPage !== currentPage) {
                const pageSize = document.getElementById('pageSize').value;
                // Get current selected grade
                const activeTab = document.querySelector('.recorrection-grade-tab.active');
                const currentGrade = activeTab ? activeTab.dataset.grade : 'all';
                loadRecorrectionRequests(newPage, pageSize, currentGrade);
            }
        }

        // Function to update pagination controls
        function updatePagination(pagination) {
            currentPage = pagination.currentPage;
            totalPages = pagination.totalPages;
            totalRequests = pagination.totalRequests;

            // Update pagination info
            const startItem = ((currentPage - 1) * pagination.limit) + 1;
            const endItem = Math.min(currentPage * pagination.limit, totalRequests);

            document.getElementById('paginationInfo').textContent =
                `Showing ${startItem}-${endItem} of ${totalRequests} requests`;
            document.getElementById('currentPage').textContent = currentPage;
            document.getElementById('totalPages').textContent = totalPages;

            // Update button states
            document.getElementById('prevPageBtn').disabled = !pagination.hasPrevPage;
            document.getElementById('nextPageBtn').disabled = !pagination.hasNextPage;

            // Show pagination container if there are multiple pages
            const paginationContainer = document.getElementById('paginationContainer');
            if (totalPages > 1) {
                paginationContainer.style.display = 'block';
            } else {
                paginationContainer.style.display = 'none';
            }
        }

        // Function to load recorrection grade tabs
        async function loadRecorrectionGradeTabs() {
            try {
                const container = document.getElementById('recorrectionGradeTabs');
                container.innerHTML = `
                    <div class="loading-state">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Loading grade tabs...</p>
                    </div>
                `;

                const response = await fetch('/api/recorrection-grade-counts');
                if (response.ok) {
                    const data = await response.json();
                    displayRecorrectionGradeTabs(data.gradeTabs);
                } else {
                    container.innerHTML =
                        '<div class="error-state"><p>Error loading grade tabs</p></div>';
                }
            } catch (error) {
                console.error('Error loading recorrection grade tabs:', error);
                const container = document.getElementById('recorrectionGradeTabs');
                container.innerHTML =
                    '<div class="error-state"><p>Error loading grade tabs</p></div>';
            }
        }

        // Function to display recorrection grade tabs
        function displayRecorrectionGradeTabs(gradeTabs) {
            const container = document.getElementById('recorrectionGradeTabs');

            if (!gradeTabs || gradeTabs.length === 0) {
                container.innerHTML = '<p>No grade tabs available</p>';
                return;
            }

            container.innerHTML = gradeTabs.map(tab => `
                <button class="recorrection-grade-tab ${tab.grade === 'all' ? 'active' : ''}"
                        onclick="switchRecorrectionGradeTab('${tab.grade}')"
                        data-grade="${tab.grade}">
                    <span class="grade-label">${tab.label}</span>
                    <span class="grade-count">${tab.count}</span>
                </button>
            `).join('');
        }

        // Function to switch recorrection grade tabs
        function switchRecorrectionGradeTab(grade) {
            // Update active state
            const tabs = document.querySelectorAll('.recorrection-grade-tab');
            tabs.forEach(tab => {
                tab.classList.remove('active');
                if (tab.dataset.grade === grade) {
                    tab.classList.add('active');
                }
            });

            // Reload recorrection requests with new grade filter
            const pageSize = document.getElementById('pageSize').value;
            loadRecorrectionRequests(1, pageSize, grade);
        }

        // Function to load teacher podcasts
        async function loadTeacherPodcasts() {
            try {
                console.log('=== LOADING TEACHER PODCASTS ===');
                const container = document.getElementById('podcastsContainer');

                if (!container) {
                    console.error('Podcast container not found!');
                    return;
                }

                container.innerHTML = `
                    <div class="loading-state">
                        <i class="fas fa-spinner fa-spin"></i>
                        <p>Loading podcasts...</p>
                    </div>
                `;

                console.log('Fetching podcasts from /api/teacher-podcasts...');
                const response = await fetch('/api/teacher-podcasts');
                console.log('Response status:', response.status);
                console.log('Response ok:', response.ok);

                if (response.ok) {
                    const data = await response.json();
                    console.log('Podcast data received:', data);
                    console.log('Number of podcasts:', data.podcasts ? data.podcasts.length : 'No podcasts array');
                    displayTeacherPodcasts(data.podcasts);
                } else {
                    console.error('Error response:', response.status, response.statusText);
                    container.innerHTML =
                        '<div class="error-state"><p>Error loading podcasts: ' + response.status + '</p></div>';
                }
            } catch (error) {
                console.error('Error loading podcasts:', error);
                const container = document.getElementById('podcastsContainer');
                if (container) {
                    container.innerHTML =
                        '<div class="error-state"><p>Error loading podcasts: ' + error.message + '</p></div>';
                }
            }
        }

        // Function to display teacher podcasts
        function displayTeacherPodcasts(podcasts) {
            const container = document.getElementById('podcastsContainer');

            if (!podcasts || podcasts.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-podcast fa-3x text-muted mb-3"></i>
                        <h4>No Podcasts Yet</h4>
                        <p>Start creating educational content for your students!</p>
                        <a href="/create-podcast" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Create Your First Podcast
                        </a>
                    </div>
                `;
                return;
            }

            container.innerHTML = podcasts.map(podcast => `
                <div class="podcast-card">
                    <div class="podcast-info">
                        <h4>${podcast.title}</h4>
                        <p class="podcast-description">${podcast.description}</p>
                        <div class="podcast-meta">
                            <span class="badge badge-primary">${podcast.gradeLevel}</span>
                            ${podcast.subjects.map(subject => `<span class="badge badge-secondary">${subject}</span>`).join('')}
                            <span class="badge badge-info">${podcast.duration ? formatDuration(podcast.duration) : 'Unknown duration'}</span>
                        </div>
                        <div class="podcast-stats">
                            <small><i class="fas fa-play"></i> ${podcast.playCount || 0} plays</small>
                            <small><i class="fas fa-calendar"></i> ${new Date(podcast.createdAt).toLocaleDateString()}</small>
                        </div>
                    </div>
                    <div class="podcast-actions">
                        <button class="btn btn-sm btn-outline-primary" onclick="playPodcast('${podcast._id}')">
                            <i class="fas fa-play"></i> Play
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" onclick="editPodcast('${podcast._id}')">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="deletePodcast('${podcast._id}')">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    </div>
                </div>
            `).join('');
        }

        // Helper function to format duration
        function formatDuration(seconds) {
            const minutes = Math.floor(seconds / 60);
            const remainingSeconds = seconds % 60;
            return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;
        }

        // Podcast action functions
        async function playPodcast(podcastId) {
            try {
                // Fetch podcast details
                const response = await fetch(`/api/podcast/${podcastId}`);
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        showPodcastPlayer(data.podcast);
                        // Update play count
                        fetch(`/api/podcast-play/${podcastId}`, { method: 'POST' });
                    }
                }
            } catch (error) {
                console.error('Error loading podcast:', error);
                alert('Error loading podcast');
            }
        }

        // Function to show podcast player modal
        function showPodcastPlayer(podcast) {
            const modal = document.createElement('div');
            modal.className = 'podcast-player-modal';
            modal.innerHTML = `
                <div class="podcast-player-content">
                    <div class="podcast-player-header">
                        <h3>${podcast.title}</h3>
                        <button class="close-btn" onclick="closePodcastPlayer()">&times;</button>
                    </div>
                    <div class="podcast-player-body">
                        <p class="podcast-description">${podcast.description}</p>
                        <div class="podcast-meta">
                            <span class="badge badge-primary">${podcast.gradeLevel}</span>
                            ${podcast.subjects.map(subject => `<span class="badge badge-secondary">${subject}</span>`).join('')}
                            <span class="badge badge-info">${podcast.duration ? formatDuration(podcast.duration) : 'Unknown duration'}</span>
                        </div>
                        <div class="audio-player-container">
                            <div class="audio-loading" id="audioLoading">
                                <i class="fas fa-spinner fa-spin"></i> Loading audio...
                            </div>
                            <div class="audio-error" id="audioError" style="display: none;">
                                <i class="fas fa-exclamation-triangle"></i> Error loading audio
                                <button class="btn btn-sm btn-outline-primary" onclick="retryAudio('${podcast._id}')">
                                    <i class="fas fa-redo"></i> Retry
                                </button>
                            </div>
                            <audio id="podcastAudio" controls preload="metadata" crossorigin="anonymous">
                                <source src="${podcast.audioUrl}" type="audio/${podcast.audioFormat}">
                                <source src="${podcast.audioUrl}" type="audio/*">
                                Your browser does not support the audio element.
                            </audio>
                            <div class="audio-controls">
                                <button class="btn btn-primary" id="playPauseBtn" onclick="toggleAudioPlay()">
                                    <i class="fas fa-play"></i> Play
                                </button>
                                <button class="btn btn-outline-secondary" onclick="restartAudio()">
                                    <i class="fas fa-redo"></i> Restart
                                </button>
                            </div>
                        </div>
                        <div class="podcast-stats">
                            <small><i class="fas fa-play"></i> ${podcast.playCount || 0} plays</small>
                            <small><i class="fas fa-calendar"></i> ${new Date(podcast.createdAt).toLocaleDateString()}</small>
                        </div>
                    </div>
                </div>
            `;

            document.body.appendChild(modal);

            // Initialize audio player after modal is added
            initializeAudioPlayer(podcast);

            // Add event listener for clicking outside modal to close
            modal.addEventListener('click', (e) => {
                if (e.target === modal) {
                    closePodcastPlayer();
                }
            });
        }

        // Function to close podcast player modal
        function closePodcastPlayer() {
            const modal = document.querySelector('.podcast-player-modal');
            if (modal) {
                modal.remove();
            }
        }

        // Function to initialize audio player
        function initializeAudioPlayer(podcast) {
            const audio = document.getElementById('podcastAudio');
            const loading = document.getElementById('audioLoading');
            const error = document.getElementById('audioError');
            const playPauseBtn = document.getElementById('playPauseBtn');

            if (!audio) return;

            console.log('=== AUDIO PLAYER DEBUG ===');
            console.log('Podcast:', podcast.title);
            console.log('Audio URL:', podcast.audioUrl);
            console.log('Audio Format:', podcast.audioFormat);

            // Test if audio URL is accessible
            testAudioUrl(podcast.audioUrl).then(isAccessible => {
                if (!isAccessible) {
                    console.error('Audio URL is not accessible');
                    loading.style.display = 'none';
                    error.style.display = 'block';
                                    error.innerHTML = `
                    <i class="fas fa-exclamation-triangle"></i> Audio file not accessible
                    <br><small>URL: ${podcast.audioUrl}</small>
                    <br>
                    <button class="btn btn-sm btn-outline-primary" onclick="retryAudio('${podcast._id}')">
                        <i class="fas fa-redo"></i> Retry
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" onclick="testAudioPlayback('${podcast.audioUrl}')">
                        <i class="fas fa-bug"></i> Test Audio
                    </button>
                    <button class="btn btn-sm btn-outline-info" onclick="window.open('${podcast.audioUrl}', '_blank')">
                        <i class="fas fa-external-link-alt"></i> Open in New Tab
                    </button>
                `;
                    playPauseBtn.disabled = true;
                    return;
                }

                console.log('Audio URL is accessible, proceeding with loading');
            });

            // Audio event listeners
            audio.addEventListener('loadstart', () => {
                console.log('Audio loading started');
                loading.style.display = 'block';
                error.style.display = 'none';
            });

            audio.addEventListener('canplay', () => {
                console.log('Audio can play');
                loading.style.display = 'none';
                error.style.display = 'none';
                playPauseBtn.disabled = false;
            });

            audio.addEventListener('error', (e) => {
                console.error('Audio error event:', e);
                console.error('Audio error code:', audio.error ? audio.error.code : 'No error code');
                console.error('Audio error message:', audio.error ? audio.error.message : 'No error message');

                loading.style.display = 'none';
                error.style.display = 'block';
                error.innerHTML = `
                    <i class="fas fa-exclamation-triangle"></i> Error loading audio
                    <br><small>Error: ${audio.error ? audio.error.message : 'Unknown error'}</small>
                    <br><button class="btn btn-sm btn-outline-primary" onclick="retryAudio('${podcast._id}')">
                        <i class="fas fa-redo"></i> Retry
                    </button>
                `;
                playPauseBtn.disabled = true;
            });

            audio.addEventListener('play', () => {
                console.log('Audio started playing');
                playPauseBtn.innerHTML = '<i class="fas fa-pause"></i> Pause';
            });

            audio.addEventListener('pause', () => {
                console.log('Audio paused');
                playPauseBtn.innerHTML = '<i class="fas fa-play"></i> Play';
            });

            audio.addEventListener('ended', () => {
                console.log('Audio ended');
                playPauseBtn.innerHTML = '<i class="fas fa-play"></i> Play';
            });

            // Try to load audio
            audio.load();
        }

        // Function to test if audio URL is accessible
        async function testAudioUrl(url) {
            try {
                console.log('Testing audio URL accessibility:', url);

                // If URL looks like an S3 key, try to get pre-signed URL
                if (!url.startsWith('http') && url.includes('/')) {
                    console.log('URL appears to be S3 key, attempting to get pre-signed URL...');
                    try {
                        const encodedKey = encodeURIComponent(url);
                        const response = await fetch(`/api/audio/${encodedKey}`);
                        if (response.ok) {
                            const data = await response.json();
                            console.log('Got pre-signed URL:', data.presignedUrl);
                            return data.presignedUrl;
                        }
                    } catch (error) {
                        console.error('Error getting pre-signed URL:', error);
                    }
                }

                const response = await fetch(url, { method: 'HEAD' });
                console.log('URL test response status:', response.status);
                console.log('URL test response headers:', response.headers);

                if (response.ok) {
                    console.log('Audio URL is accessible');
                    return true;
                } else {
                    console.error('Audio URL returned status:', response.status);
                    return false;
                }
            } catch (error) {
                console.error('Error testing audio URL:', error);
                return false;
            }
        }

        // Function to manually test audio playback
        function testAudioPlayback(audioUrl) {
            console.log('=== MANUAL AUDIO TEST ===');
            console.log('Testing audio URL:', audioUrl);

            // Test 1: Direct URL access
            console.log('Test 1: Checking URL accessibility...');
            fetch(audioUrl, { method: 'HEAD' })
                .then(response => {
                    console.log('URL Status:', response.status);
                    console.log('Content-Type:', response.headers.get('content-type'));
                    console.log('Content-Length:', response.headers.get('content-length'));
                    console.log('Access-Control-Allow-Origin:', response.headers.get('access-control-allow-origin'));
                })
                .catch(error => console.error('URL fetch error:', error));

            // Test 2: Create a test audio element
            console.log('Test 2: Creating test audio element...');
            const testAudio = new Audio();
            testAudio.crossOrigin = 'anonymous';
            testAudio.src = audioUrl;

            testAudio.addEventListener('loadstart', () => console.log('Test audio: loadstart'));
            testAudio.addEventListener('canplay', () => console.log('Test audio: canplay'));
            testAudio.addEventListener('error', (e) => {
                console.error('Test audio error:', e);
                console.error('Test audio error code:', testAudio.error ? testAudio.error.code : 'No error code');
                console.error('Test audio error message:', testAudio.error ? testAudio.error.message : 'No error message');
            });

            testAudio.load();

            // Test 3: Try to play after a short delay
            setTimeout(() => {
                console.log('Test 3: Attempting to play...');
                testAudio.play().then(() => {
                    console.log('Test audio: play successful');
                    testAudio.pause();
                }).catch(error => {
                    console.error('Test audio: play failed:', error);
                    console.error('Play error details:', {
                        name: error.name,
                        message: error.message,
                        stack: error.stack
                    });
                });
            }, 2000);
        }

        // Function to toggle audio play/pause
        function toggleAudioPlay() {
            const audio = document.getElementById('podcastAudio');
            const playPauseBtn = document.getElementById('playPauseBtn');

            if (!audio) return;

            if (audio.paused) {
                playPauseBtn.disabled = true;
                audio.play().catch(error => {
                    console.error('Error playing audio:', error);
                    alert('Error playing audio. Please try again.');
                    playPauseBtn.disabled = false;
                });
            } else {
                audio.pause();
            }
        }

        // Function to restart audio
        function restartAudio() {
            const audio = document.getElementById('podcastAudio');
            if (!audio) return;

            audio.currentTime = 0;
            if (!audio.paused) {
                audio.play().catch(error => {
                    console.error('Error restarting audio:', error);
                });
            }
        }

        // Function to retry audio loading
        async function retryAudio(podcastId) {
            console.log('Retrying audio for podcast:', podcastId);

            // Try to refresh the podcast data to get a new pre-signed URL
            try {
                const response = await fetch(`/api/podcast/${podcastId}`);
                if (response.ok) {
                    const data = await response.json();
                    if (data.success) {
                        console.log('Refreshed podcast data:', data.podcast);
                        showPodcastPlayer(data.podcast);
                        return;
                    }
                }
            } catch (error) {
                console.error('Error refreshing podcast data:', error);
            }

            // Fallback to original method
            playPodcast(podcastId);
        }

        function editPodcast(podcastId) {
            // Redirect to edit page or open edit modal
            alert('Edit functionality coming soon!');
        }

        function deletePodcast(podcastId) {
            if (confirm('Are you sure you want to delete this podcast? This action cannot be undone.')) {
                deletePodcastRequest(podcastId);
            }
        }

        async function deletePodcastRequest(podcastId) {
            try {
                const response = await fetch(`/api/delete-podcast/${podcastId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    loadTeacherPodcasts(); // Reload the list
                } else {
                    alert('Error deleting podcast');
                }
            } catch (error) {
                console.error('Error deleting podcast:', error);
                alert('Error deleting podcast');
            }
        }

        // Function to display recorrection requests
        function displayRecorrectionRequests(requests) {
            const container = document.getElementById('recorrectionRequests');

            if (requests.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <i class="fas fa-check-circle"></i>
                        <p>No pending recorrection requests</p>
                    </div>
                `;
                return;
            }

            container.innerHTML = requests.map(request => {
                // Handle both populate and aggregation data formats
                const studentName = request.studentName || (request.student && request.student.displayName) || 'Unknown Student';
                const quizTitle = request.quizTitle || (request.quiz && request.quiz.title) || 'Unknown Quiz';
                const score = request.originalScore || request.score || 0;
                const percentage = request.originalPercentage || request.percentage || 0;
                const totalPoints = request.totalPoints || 0;
                const recorrectionReason = request.recorrectionReason || '';

                return `
                    <div class="recorrection-card">
                        <div class="recorrection-header">
                            <div class="student-info">
                                <h4>${studentName}</h4>
                                <p>${quizTitle}</p>
                            </div>
                            <span class="recorrection-status">Pending Recorrection</span>
                        </div>

                        <div class="recorrection-details">
                            <div class="detail-row">
                                <span class="detail-label">Original Score:</span>
                                <span class="detail-value">${score} / ${totalPoints}</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Original Percentage:</span>
                                <span class="detail-value">${percentage}%</span>
                            </div>
                            <div class="detail-row">
                                <span class="detail-label">Requested On:</span>
                                <span class="detail-value">${new Date(request.recorrectionRequestedAt).toLocaleDateString()}</span>
                            </div>
                            ${recorrectionReason ? `
                                <div class="detail-row">
                                    <span class="detail-label">Reason:</span>
                                    <span class="detail-value">${recorrectionReason}</span>
                                </div>
                            ` : ''}
                        </div>

                        <div class="recorrection-actions">
                            <button class="btn btn-sm btn-outline-primary" onclick="viewRecorrectionDetails('${request._id}')">
                                <i class="fas fa-eye"></i> View Details
                            </button>
                            <button class="btn btn-sm btn-success" onclick="processRecorrection('${request._id}')">
                                <i class="fas fa-check"></i> Process Recorrection
                            </button>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Function to view recorrection details
        function viewRecorrectionDetails(resultId) {
            window.open(`/recorrection-details/${resultId}`, '_blank');
        }

        // Function to process recorrection
        function processRecorrection(resultId) {
            window.location.href = `/process-recorrection/${resultId}`;
        }

        // Function to change page size
        function changePageSize() {
            const pageSize = document.getElementById('pageSize').value;
            // Reset to first page when changing page size
            // Get current selected grade
            const activeTab = document.querySelector('.recorrection-grade-tab.active');
            const currentGrade = activeTab ? activeTab.dataset.grade : 'all';
            loadRecorrectionRequests(1, pageSize, currentGrade);
        }

        // Function to change quiz page size
        function changeQuizPageSize() {
            const pageSize = document.getElementById('quizPageSize').value;
            // Reset to first page when changing page size
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.set('limit', pageSize);
            currentUrl.searchParams.set('page', '1');
            // Preserve selected grade
            const currentGrade = new URLSearchParams(window.location.search).get('grade') || 'all';
            currentUrl.searchParams.set('grade', currentGrade);
            window.location.href = currentUrl.toString();
        }

        // Function to switch grade tabs
        function switchGradeTab(grade) {
            const currentUrl = new URL(window.location);
            currentUrl.searchParams.set('grade', grade);
            currentUrl.searchParams.set('page', '1'); // Reset to first page when switching grades
            window.location.href = currentUrl.toString();
        }
        // Mobile menu functionality
        function toggleMobileMenu() {
            const navMenu = document.getElementById('navMenu');
            const overlay = document.querySelector('.mobile-menu-overlay');

            navMenu.classList.toggle('active');
            overlay.classList.toggle('active');

            if (navMenu.classList.contains('active')) {
                overlay.style.display = 'block';
                document.body.style.overflow = 'hidden';
            } else {
                setTimeout(() => {
                    overlay.style.display = 'none';
                }, 300);
                document.body.style.overflow = '';
            }
        }

        // Close mobile menu when clicking outside
        document.addEventListener('DOMContentLoaded', function() {
            const overlay = document.querySelector('.mobile-menu-overlay');
            if (overlay) {
                overlay.addEventListener('click', toggleMobileMenu);
            }
        });
    </script>
</body>
</html>
