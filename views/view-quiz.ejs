<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= quiz.title %> - SkillOns</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- MathJax for Math Equation Support -->
    <script>
    window.MathJax = {
        tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']],
            processEscapes: true,
            processEnvironments: true
        },
        options: {
            skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
        }
    };
    </script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

    <!-- PDF Export Libraries (only load for complex quizzes) -->
    <% if (quiz.isComplexQuiz && quiz.complexQuizData) { %>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <% } %>

    <style>
        /* Complex Quiz Preview Styles */
        .complex-quiz-notice {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            text-align: center;
            font-weight: 500;
        }

        .complex-quiz-notice i {
            margin-right: 8px;
            font-size: 18px;
        }

        .complex-question-card {
            border: 2px solid #e5e7eb;
            border-radius: 12px;
            margin-bottom: 25px;
            overflow: hidden;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            transition: all 0.2s ease;
        }

        .complex-question-card:hover {
            border-color: #667eea;
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.1);
        }

        .complex-question-preview {
            padding: 20px;
            background: #fafafa;
            border-radius: 8px;
            margin: 15px;
        }

        .complex-element-preview {
            margin-bottom: 15px !important;
            transition: all 0.2s ease;
        }

        .complex-element-preview:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
        }

        .text-answer-notice {
            background: #f0f9ff;
            border: 1px solid #bfdbfe;
            border-radius: 6px;
            padding: 12px 16px;
            color: #1e40af;
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .text-answer-notice i {
            color: #3b82f6;
        }

        /* Enhanced question card styles */
        .question-card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
            margin-bottom: 25px;
            overflow: hidden;
            transition: all 0.2s ease;
        }

        .question-card:hover {
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            transform: translateY(-2px);
        }

        .question-header {
            background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
            padding: 20px;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .question-header h4 {
            margin: 0;
            color: #1f2937;
            font-size: 18px;
            font-weight: 600;
        }

        .question-points {
            background: #667eea;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }

        .question-content {
            padding: 25px;
        }

        .question-text {
            font-size: 16px;
            line-height: 1.6;
            color: #374151;
            margin-bottom: 20px;
            font-weight: 500;
        }

        .options-list {
            margin-top: 20px;
        }

        .option-item {
            display: flex;
            align-items: center;
            padding: 12px 16px;
            margin-bottom: 10px;
            background: #f9fafb;
            border: 1px solid #e5e7eb;
            border-radius: 8px;
            transition: all 0.2s ease;
        }

        .option-item:hover {
            background: #f3f4f6;
            border-color: #d1d5db;
        }

        .option-item.correct-answer {
            background: #ecfdf5;
            border-color: #10b981;
            color: #065f46;
        }

        .option-label {
            font-weight: 600;
            margin-right: 12px;
            color: #6b7280;
            min-width: 20px;
        }

        .option-text {
            flex: 1;
            font-size: 15px;
            line-height: 1.4;
        }

        .correct-icon {
            color: #10b981;
            margin-left: 10px;
        }

        .question-footer {
            margin-top: 20px;
            padding-top: 15px;
            border-top: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
            font-size: 14px;
        }

        .question-type {
            color: #6b7280;
            display: flex;
            align-items: center;
            gap: 6px;
        }

        .correct-answer-label {
            color: #059669;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 6px;
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="/">SkillOns</a>
            </div>
            <div class="nav-menu">
                <a href="/teacher/dashboard" class="nav-link">Dashboard</a>
                <a href="/create-quiz" class="nav-link">Create Quiz</a>

                <a href="/logout" class="nav-link logout-btn">Logout</a>
            </div>
        </div>
    </nav>

    <main class="main-content">
        <div class="quiz-view-container">
            <% if (quiz.quizType === 'competitive') { %>
            <div class="alert alert-info" style="margin-bottom: 20px; padding: 15px; background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1)); border-left: 4px solid #667eea;">
                <h4 style="margin-bottom: 10px; color: #667eea;">
                    <i class="fas fa-trophy"></i> Competitive Quiz
                </h4>
                <p style="margin-bottom: 10px;">This is a competitive quiz. Students cannot access it directly from the quiz list.</p>
                <p style="margin-bottom: 10px;">To run this quiz:</p>
                <ol style="margin-left: 20px;">
                    <li>Go to the <a href="/competitive-quiz" style="color: #667eea; font-weight: bold;">Competitive Quiz Sessions</a> page</li>
                    <li>Create a new session with a scheduled time</li>
                    <li>Share the session code with your students</li>
                    <li>Students will take the quiz simultaneously and compete on the live leaderboard</li>
                </ol>
                <a href="/competitive-quiz" class="btn btn-primary" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: none; margin-top: 10px;">
                    <i class="fas fa-trophy"></i> Manage Competitive Sessions
                </a>
            </div>
            <% } %>
            <div class="quiz-header">
                <div class="quiz-title-section">
                    <h1><i class="fas fa-<%= quiz.quizType === 'competitive' ? 'trophy' : 'file-alt' %> me-2"></i><%= quiz.title %></h1>
                    <div class="quiz-meta">
                        <span class="quiz-status <%= quiz.isApproved ? 'approved' : 'pending' %>">
                            <i class="fas fa-<%= quiz.isApproved ? 'check-circle' : 'clock' %>"></i>
                            <%= quiz.isApproved ? 'Approved' : 'Pending Approval' %>
                        </span>
                        <span class="quiz-date">
                            <i class="fas fa-calendar"></i>
                            Created: <%= new Date(quiz.createdAt).toLocaleDateString() %>
                        </span>
                        <span class="quiz-author">
                            <i class="fas fa-user"></i>
                            By: <%= quiz.createdByName %>
                        </span>
                    </div>
                </div>
                <div class="quiz-actions">
                    <a href="/teacher/dashboard" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to Dashboard
                    </a>
                    <% if (quiz.isComplexQuiz && quiz.complexQuizData) { %>
                    <button class="btn btn-warning" onclick="exportComplexQuizToPDF()" title="Export complex quiz as PDF">
                        <i class="fas fa-file-pdf"></i> Save as PDF
                    </button>
                    <% } %>
                    <button class="btn btn-primary" onclick="window.print()">
                        <i class="fas fa-print"></i> Print Quiz
                    </button>
                </div>
            </div>

            <div class="quiz-content">
                <div class="quiz-description">
                    <h3><i class="fas fa-info-circle me-2"></i>Description</h3>
                    <p><%= quiz.description %></p>
                </div>

                <div class="quiz-stats">
                    <div class="stat-item">
                        <i class="fas fa-question-circle"></i>
                        <span><strong><%= quiz.questions.length %></strong> Questions</span>
                    </div>
                    <div class="stat-item">
                        <i class="fas fa-clock"></i>
                        <span>Estimated Time: <strong><%= Math.ceil(quiz.questions.length * 1.5) %></strong> minutes</span>
                    </div>
                    <div class="stat-item">
                        <i class="fas fa-star"></i>
                        <span>Total Points: <strong><%= quiz.questions.reduce((sum, q) => sum + q.points, 0) %></strong></span>
                    </div>
                </div>

                <div class="questions-section">
                    <h3><i class="fas fa-list-ol me-2"></i>Questions</h3>
                    <div class="questions-list">
                        <% if (quiz.elements && quiz.elements.length > 0) { %>
                            <!-- Complex Quiz - Render from elements -->
                            <div class="complex-quiz-notice">
                                <i class="fas fa-palette"></i>
                                <span>This quiz was created with the Advanced Quiz Builder</span>
                            </div>

                            <div id="complex-quiz-preview">
                                <!-- Complex quiz content will be rendered here by JavaScript -->
                            </div>
                        <% } else { %>
                            <!-- Regular Quiz - Render from questions -->
                            <% quiz.questions.forEach((question, index) => { %>
                                <div class="question-card">
                                    <div class="question-header">
                                        <h4>Question <%= index + 1 %></h4>
                                        <span class="question-points"><%= question.points %> point<%= question.points !== 1 ? 's' : '' %></span>
                                    </div>
                                    <div class="question-content">
                                        <p class="question-text"><%- question.question %></p>

                                        <% if (question.image) { %>
                                            <div class="question-image-container" data-s3-key="<%= question.image %>">
                                                <div class="question-image-loading" style="text-align: center; padding: 20px;">
                                                    <i class="fas fa-spinner fa-spin"></i> Loading question image...
                                                </div>
                                                <img class="question-image" style="max-width: 100%; max-height: 300px; margin-top: 15px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); display: none;" alt="Question Image">
                                            </div>
                                        <% } %>

                                        <% if (question.options && question.options.length > 0) { %>
                                            <div class="options-list">
                                                <% question.options.forEach((option, optIndex) => { %>
                                                    <div class="option-item <%= option === question.correctAnswer ? 'correct-answer' : '' %>">
                                                        <span class="option-label"><%= String.fromCharCode(65 + optIndex) %>.</span>
                                                        <span class="option-text"><%- option %></span>
                                                        <% if (option === question.correctAnswer) { %>
                                                            <i class="fas fa-check-circle correct-icon"></i>
                                                        <% } %>
                                                    </div>
                                                <% }); %>
                                            </div>
                                        <% } else { %>
                                            <div class="text-answer-notice">
                                                <i class="fas fa-keyboard"></i>
                                                <span>This question requires a text answer</span>
                                            </div>
                                        <% } %>

                                        <div class="question-footer">
                                            <span class="question-type">
                                                <i class="fas fa-tag"></i>
                                                <%= question.type ? question.type.charAt(0).toUpperCase() + question.type.slice(1) : 'Multiple Choice' %>
                                            </span>
                                            <% if (question.correctAnswer) { %>
                                                <span class="correct-answer-label">
                                                    <i class="fas fa-check"></i>
                                                    Correct: <%- question.correctAnswer %>
                                                </span>
                                            <% } %>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="footer-content">
            <p>&copy; 2025 SkillOns. All rights reserved.</p>
        </div>
    </footer>
    
    <!-- Image Modal -->
    <div id="imageModal" class="image-modal" style="display: none;">
        <div class="image-modal-content">
            <span class="image-modal-close" onclick="closeImageModal()">&times;</span>
            <h3 id="modalImageTitle"></h3>
            <img id="modalImage" class="modal-image" alt="Full size image">
        </div>
    </div>
    
    <script>
        // Function to open image modal
        function openImageModal(imageUrl, title) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            const modalTitle = document.getElementById('modalImageTitle');
            
            modalTitle.textContent = title;
            modalImg.src = imageUrl;
            modal.style.display = 'block';
        }
        
        // Function to close image modal
        function closeImageModal() {
            const modal = document.getElementById('imageModal');
            modal.style.display = 'none';
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('imageModal');
            if (event.target === modal) {
                closeImageModal();
            }
        }

        // Function to load pre-signed URLs for question images
        async function loadQuestionImageUrls() {
            try {
                const questionImageContainers = document.querySelectorAll('.question-image-container[data-s3-key]');
                
                if (questionImageContainers.length === 0) {
                    return;
                }

                console.log(`🔗 Loading ${questionImageContainers.length} question image URLs`);

                for (const container of questionImageContainers) {
                    const s3Key = container.dataset.s3Key;
                    const loadingDiv = container.querySelector('.question-image-loading');
                    const img = container.querySelector('.question-image');

                    if (!s3Key || !loadingDiv || !img) continue;

                    try {
                        // Generate pre-signed URL for this image
                        const response = await fetch(`/api/image/${encodeURIComponent(s3Key)}?expiresIn=3600`);
                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const data = await response.json();
                        
                        if (data.presignedUrl) {
                            // Hide loading, show image
                            loadingDiv.style.display = 'none';
                            img.src = data.presignedUrl;
                            img.style.display = 'block';
                            img.onclick = () => openImageModal(data.presignedUrl, 'Question Image');
                            
                            console.log(`✅ Loaded image for S3 key: ${s3Key}`);
                        } else {
                            // Hide container if no image URL received
                            container.style.display = 'none';
                            console.log(`No presigned URL received for S3 key: ${s3Key}`);
                        }
                    } catch (error) {
                        console.error(`❌ Error loading image for S3 key ${s3Key}:`, error);
                        // Hide container on error to avoid showing error messages
                        container.style.display = 'none';
                    }
                }
            } catch (error) {
                console.error('❌ Error in loadQuestionImageUrls:', error);
            }
        }

        // Function to load pre-signed URLs for complex quiz images
        async function loadComplexQuizImageUrls() {
            try {
                const complexImageContainers = document.querySelectorAll('.complex-image-container[data-s3-key]');

                if (complexImageContainers.length === 0) {
                    return;
                }

                console.log(`Loading ${complexImageContainers.length} complex quiz images...`);

                for (const container of complexImageContainers) {
                    const s3Key = container.getAttribute('data-s3-key');
                    const loadingDiv = container.querySelector('.complex-image-loading');
                    const img = container.querySelector('.complex-image');

                    try {
                        console.log(`Loading complex image for S3 key: ${s3Key}`);

                        const response = await fetch(`/get-image-url/${encodeURIComponent(s3Key)}`);

                        if (!response.ok) {
                            throw new Error(`HTTP error! status: ${response.status}`);
                        }

                        const data = await response.json();

                        if (data.presignedUrl) {
                            // Hide loading, show image
                            loadingDiv.style.display = 'none';
                            img.src = data.presignedUrl;
                            img.style.display = 'block';
                            img.onclick = () => openImageModal(data.presignedUrl, 'Quiz Image');

                            console.log(`✅ Loaded complex image for S3 key: ${s3Key}`);
                        } else {
                            // Hide container if no image URL received
                            container.style.display = 'none';
                            console.log(`No presigned URL received for complex image S3 key: ${s3Key}`);
                        }
                    } catch (error) {
                        console.error(`❌ Error loading complex image for S3 key ${s3Key}:`, error);
                        // Hide container on error to avoid showing error messages
                        container.style.display = 'none';
                    }
                }
            } catch (error) {
                console.error('❌ Error in loadComplexQuizImageUrls:', error);
            }
        }

        // Load question image URLs when page loads
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(loadQuestionImageUrls, 500);

            // Render complex quiz if elements exist
            <% if (quiz.elements && quiz.elements.length > 0) { %>
                renderComplexQuizPreview();
                // Load complex quiz images after rendering
                setTimeout(loadComplexQuizImageUrls, 1000);
            <% } %>
        });

        // Complex Quiz Rendering
        <% if (quiz.elements && quiz.elements.length > 0) { %>
            function renderComplexQuizPreview() {
                const container = document.getElementById('complex-quiz-preview');
                if (!container) return;

                const elements = <%- JSON.stringify(quiz.elements) %>;
                console.log('Rendering complex quiz with', elements.length, 'elements');

                // Group elements by page/question
                const pageGroups = {};
                elements.forEach(element => {
                    const pageNumber = element.pageNumber || element.questionNumber || 1;
                    if (!pageGroups[pageNumber]) {
                        pageGroups[pageNumber] = [];
                    }
                    pageGroups[pageNumber].push(element);
                });

                // Render each page as a question
                Object.keys(pageGroups).sort((a, b) => parseInt(a) - parseInt(b)).forEach((pageNumber, index) => {
                    const pageElements = pageGroups[pageNumber];
                    const questionNumber = index + 1;

                    const questionCard = document.createElement('div');
                    questionCard.className = 'question-card complex-question-card';
                    questionCard.innerHTML = `
                        <div class="question-header">
                            <h4>Question ${questionNumber}</h4>
                            <span class="question-points">Page ${pageNumber}</span>
                        </div>
                        <div class="question-content">
                            <div class="complex-question-preview" id="preview-page-${pageNumber}">
                                <!-- Elements will be rendered here -->
                            </div>
                        </div>
                    `;

                    container.appendChild(questionCard);

                    // Render elements for this page
                    const previewContainer = document.getElementById(`preview-page-${pageNumber}`);
                    pageElements.forEach(element => {
                        renderComplexElement(element, previewContainer);
                    });
                });
            }

            function renderComplexElement(element, container) {
                const elementDiv = document.createElement('div');
                elementDiv.className = 'complex-element-preview';
                elementDiv.style.marginBottom = '15px';
                elementDiv.style.padding = '10px';
                elementDiv.style.border = '1px solid #e9ecef';
                elementDiv.style.borderRadius = '6px';
                elementDiv.style.backgroundColor = '#f8f9fa';

                let content = '';

                switch (element.type) {
                    case 'question':
                        content = `
                            <div style="padding: 15px; background: #f0f9ff; border-left: 4px solid #0ea5e9; border-radius: 4px;">
                                <strong style="color: #0ea5e9;"><i class="fas fa-question-circle"></i> Question:</strong>
                                <div style="margin-top: 8px; color: #1f2937; font-size: 16px; line-height: 1.5;">${element.content || 'Question content'}</div>
                            </div>
                        `;
                        break;

                    case 'sub-question':
                        content = `
                            <div style="padding: 12px; background: #fefce8; border-left: 4px solid #eab308; border-radius: 4px; margin-left: 20px;">
                                <strong style="color: #eab308;"><i class="fas fa-arrow-right"></i> Sub-question:</strong>
                                <div style="margin-top: 8px; color: #1f2937; font-size: 15px; line-height: 1.4;">${element.content || 'Sub-question content'}</div>
                            </div>
                        `;
                        break;

                    case 'text':
                    case 'textbox':
                        content = `
                            <div style="padding: 12px; background: #f0fdf4; border-left: 4px solid #22c55e; border-radius: 4px;">
                                <strong style="color: #22c55e;"><i class="fas fa-align-left"></i> Text:</strong>
                                <div style="margin-top: 8px; color: #1f2937; font-size: 14px; line-height: 1.4;">${element.content || 'Text content'}</div>
                            </div>
                        `;
                        break;

                    case 'image':
                        content = `
                            <div style="padding: 12px; background: #fef3c7; border-left: 4px solid #f59e0b; border-radius: 4px;">
                                <strong style="color: #f59e0b;"><i class="fas fa-image"></i> Image:</strong>
                                <div style="margin-top: 8px;">
                                    ${element.src ? `
                                        <div class="complex-image-container" data-s3-key="${element.src}">
                                            <div class="complex-image-loading" style="text-align: center; padding: 10px; color: #6b7280;">
                                                <i class="fas fa-spinner fa-spin"></i> Loading image...
                                            </div>
                                            <img class="complex-image" style="max-width: 300px; max-height: 200px; border-radius: 4px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); display: none;" alt="Quiz Image">
                                        </div>
                                    ` : '<span style="color: #6b7280;">Image element</span>'}
                                </div>
                            </div>
                        `;
                        break;

                    case 'table':
                        content = `
                            <div style="padding: 12px; background: #f3e8ff; border-left: 4px solid #a855f7; border-radius: 4px;">
                                <strong style="color: #a855f7;"><i class="fas fa-table"></i> Table:</strong>
                                <div style="margin-top: 8px;">
                                    ${element.tableContent || '<span style="color: #6b7280;">Table element</span>'}
                                </div>
                            </div>
                        `;
                        break;

                    case 'latex':
                        content = `
                            <div style="padding: 12px; background: #fce7f3; border-left: 4px solid #ec4899; border-radius: 4px;">
                                <strong style="color: #ec4899;"><i class="fas fa-square-root-alt"></i> LaTeX:</strong>
                                <div style="margin-top: 8px; color: #1f2937; font-family: 'Courier New', monospace;">${element.content || 'LaTeX content'}</div>
                            </div>
                        `;
                        break;

                    default:
                        content = `
                            <div style="padding: 12px; background: #f1f5f9; border-left: 4px solid #64748b; border-radius: 4px;">
                                <strong style="color: #64748b;"><i class="fas fa-cube"></i> ${element.type}:</strong>
                                <div style="margin-top: 8px; color: #1f2937;">${element.content || 'Element content'}</div>
                            </div>
                        `;
                        break;
                }

                elementDiv.innerHTML = content;
                container.appendChild(elementDiv);
            }
        <% } %>

        // PDF Export function for complex quizzes
        <% if (quiz.isComplexQuiz && quiz.complexQuizData) { %>
        async function exportComplexQuizToPDF() {
            try {
                // Show loading indicator
                const loadingDiv = document.createElement('div');
                loadingDiv.id = 'pdf-loading';
                loadingDiv.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0, 0, 0, 0.8);
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    z-index: 10000;
                    color: white;
                    font-size: 18px;
                `;
                loadingDiv.innerHTML = `
                    <div style="text-align: center;">
                        <i class="fas fa-spinner fa-spin" style="font-size: 24px; margin-bottom: 10px;"></i><br>
                        Generating PDF...
                    </div>
                `;
                document.body.appendChild(loadingDiv);

                // Initialize jsPDF
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('p', 'mm', 'a4');

                // PDF dimensions
                const pageWidth = 210; // A4 width in mm
                const pageHeight = 297; // A4 height in mm
                const margin = 20;
                const contentWidth = pageWidth - (margin * 2);

                // Add title page
                pdf.setFontSize(24);
                pdf.setFont(undefined, 'bold');
                pdf.text('<%= quiz.title %>', pageWidth / 2, 40, { align: 'center' });

                pdf.setFontSize(14);
                pdf.setFont(undefined, 'normal');
                const description = `<%= quiz.description.replace(/'/g, "\\'") %>`;
                if (description) {
                    const splitDescription = pdf.splitTextToSize(description, contentWidth);
                    pdf.text(splitDescription, margin, 60);
                }

                // Add quiz metadata
                let yPos = 100;
                pdf.text('Grade Level: <%= quiz.gradeLevel %>', margin, yPos);
                yPos += 10;
                <% if (quiz.subjects && quiz.subjects.length > 0) { %>
                pdf.text('Subjects: <%= quiz.subjects.join(", ") %>', margin, yPos);
                yPos += 10;
                <% } %>
                pdf.text('Language: <%= quiz.language %>', margin, yPos);
                yPos += 10;
                pdf.text('Created: <%= new Date(quiz.createdAt).toLocaleDateString() %>', margin, yPos);
                yPos += 10;
                pdf.text('Created by: <%= quiz.createdByName %>', margin, yPos);

                // Get complex quiz preview container
                const previewContainer = document.getElementById('complex-quiz-preview');
                if (previewContainer) {
                    // Convert the preview to canvas and add to PDF
                    const canvas = await html2canvas(previewContainer, {
                        backgroundColor: '#ffffff',
                        scale: 1.5,
                        useCORS: true,
                        allowTaint: true,
                        width: previewContainer.scrollWidth,
                        height: previewContainer.scrollHeight
                    });

                    const imgData = canvas.toDataURL('image/png');

                    // Add new page for the quiz content
                    pdf.addPage();

                    // Calculate dimensions to fit in PDF
                    const imgWidth = contentWidth;
                    const imgHeight = (canvas.height * imgWidth) / canvas.width;

                    // Add image to PDF
                    if (imgHeight <= pageHeight - 40) {
                        pdf.addImage(imgData, 'PNG', margin, 25, imgWidth, imgHeight);
                    } else {
                        // If too large, scale down to fit
                        const scaledHeight = pageHeight - 40;
                        const scaledWidth = (canvas.width * scaledHeight) / canvas.height;
                        pdf.addImage(imgData, 'PNG', margin, 25, scaledWidth, scaledHeight);
                    }
                }

                // Save the PDF
                const fileName = `<%= quiz.title.replace(/[^a-z0-9]/gi, '_').toLowerCase() %>_quiz.pdf`;
                pdf.save(fileName);

                // Remove loading indicator
                document.body.removeChild(loadingDiv);

                // Show success message
                alert(`PDF exported successfully as "${fileName}"`);

            } catch (error) {
                console.error('Error exporting PDF:', error);

                // Remove loading indicator if it exists
                const loadingDiv = document.getElementById('pdf-loading');
                if (loadingDiv) {
                    document.body.removeChild(loadingDiv);
                }

                alert('Error exporting PDF: ' + error.message);
            }
        }

        // Make function globally available
        window.exportComplexQuizToPDF = exportComplexQuizToPDF;
        <% } %>
    </script>
</body>
</html> 