<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Embedded Viewer - <%= content.title %></title>
    <style>
        body {
            margin: 0;
            padding: 20px;
            font-family: 'Inter', sans-serif;
            background: #f8f9fa;
        }
        .embedded-viewer {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .file-info {
            text-align: center;
            margin-bottom: 20px;
        }
        .file-info h3 {
            margin: 0 0 10px 0;
            color: #333;
        }
        .file-info p {
            margin: 0;
            color: #666;
            font-size: 14px;
        }
        .viewer-options {
            display: flex;
            flex-direction: column;
            gap: 15px;
            max-width: 400px;
            margin: 0 auto;
        }
        .btn {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: 12px 20px;
            border: none;
            border-radius: 6px;
            font-size: 14px;
            font-weight: 500;
            text-decoration: none;
            cursor: pointer;
            transition: all 0.2s;
        }
        .btn-primary {
            background: #667eea;
            color: white;
        }
        .btn-primary:hover {
            background: #5a6fd8;
        }
        .btn-secondary {
            background: #6c757d;
            color: white;
        }
        .btn-secondary:hover {
            background: #5a6268;
        }
        .btn-success {
            background: #28a745;
            color: white;
        }
        .btn-success:hover {
            background: #218838;
        }
        .viewer-tabs {
            display: flex;
            border-bottom: 1px solid #dee2e6;
            margin-bottom: 20px;
        }
        .tab-btn {
            flex: 1;
            padding: 12px 16px;
            border: none;
            background: #f8f9fa;
            color: #6c757d;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            transition: all 0.2s;
            font-size: 14px;
            font-weight: 500;
        }
        .tab-btn:hover {
            background: #e9ecef;
            color: #495057;
        }
        .tab-btn.active {
            background: white;
            color: #495057;
            border-bottom-color: #667eea;
        }
        .tab-content {
            display: none;
        }
        .tab-content.active {
            display: block;
        }
        .viewer-frame {
            margin-bottom: 15px;
        }
        .viewer-controls {
            display: flex;
            gap: 10px;
            justify-content: center;
        }
        .viewer-status {
            text-align: center;
            padding: 40px;
            color: #6c757d;
        }
        .viewer-status i {
            font-size: 2rem;
            margin-bottom: 10px;
            display: block;
        }
        .viewer-fallback {
            text-align: center;
            padding: 30px;
        }
        .fallback-content {
            max-width: 400px;
            margin: 0 auto;
        }
        .fallback-content i {
            font-size: 3rem;
            color: #ffc107;
            margin-bottom: 15px;
        }
        .fallback-content h4 {
            color: #495057;
            margin-bottom: 15px;
        }
        .fallback-content p {
            color: #6c757d;
            margin-bottom: 15px;
            font-size: 14px;
        }
        .fallback-content ul {
            text-align: left;
            margin-bottom: 20px;
            color: #6c757d;
            font-size: 14px;
        }
        .fallback-options {
            display: flex;
            gap: 10px;
            justify-content: center;
            flex-wrap: wrap;
        }
        .preview-note {
            text-align: center;
            margin-bottom: 20px;
            padding: 15px;
            background: #e9ecef;
            border-radius: 6px;
            color: #495057;
            font-size: 14px;
        }
        .preview-note i {
            margin-right: 8px;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="embedded-viewer">
        <div class="file-info">
            <h3><%= content.title %></h3>
            <p><i class="fas fa-file-powerpoint"></i> <%= content.fileName %></p>
        </div>

        <div class="viewer-tabs">
            <button class="tab-btn active" onclick="showTab('options')">Viewer Options</button>
            <button class="tab-btn" onclick="showTab('google')">Google Viewer</button>
            <button class="tab-btn" onclick="showTab('microsoft')">Microsoft Viewer</button>
            <button class="tab-btn" onclick="showTab('direct')">Direct Preview</button>
        </div>

        <div id="optionsTab" class="tab-content active">
            <div class="preview-note">
                <i class="fas fa-info-circle"></i>
                Choose a viewer option to preview this PowerPoint presentation:
            </div>

            <div class="viewer-options">
                <a href="/student/download-content/<%= content._id %>" class="btn btn-primary btn-lg">
                    <i class="fas fa-download"></i>
                    Download to View PowerPoint
                    <small class="d-block">Recommended - Works with PowerPoint, LibreOffice, etc.</small>
                </a>
                
                <button onclick="openGoogleExternal()" class="btn btn-secondary">
                    <i class="fab fa-google"></i>
                    Try Google Viewer (External)
                    <small class="d-block">May not work with private files</small>
                </button>
                
                <button onclick="openMicrosoftExternal()" class="btn btn-secondary">
                    <i class="fas fa-external-link-alt"></i>
                    Try Microsoft Viewer (External)
                    <small class="d-block">May not work with private files</small>
                </button>
            </div>
            
            <div class="viewer-note" style="margin-top: 20px; padding: 15px; background: #e9ecef; border-radius: 5px;">
                <i class="fas fa-info-circle text-primary"></i>
                <strong>Note:</strong> PowerPoint files work best when downloaded and opened with Microsoft PowerPoint, LibreOffice, or Google Slides. Online viewers have limitations with private files.
            </div>
        </div>

        <div id="directTab" class="tab-content">
            <div class="viewer-status" id="directStatus">
                <i class="fas fa-spinner fa-spin"></i> Loading direct preview...
            </div>
            <div class="viewer-frame" style="display: none;" id="directFrame">
                <iframe id="directViewer" 
                        src="" 
                        width="100%" 
                        height="500px" 
                        frameborder="0"
                        style="border: 1px solid #ddd; border-radius: 4px;"
                        onload="handleViewerLoad('direct')"
                        onerror="handleViewerError('direct')">
                </iframe>
            </div>
            <div class="viewer-fallback" style="display: none;" id="directFallback">
                <div class="fallback-content">
                    <i class="fas fa-info-circle" style="color: #17a2b8;"></i>
                    <h4>Direct Preview Not Available</h4>
                    <p>PowerPoint files cannot be directly previewed in web browsers due to format limitations.</p>
                    <p><strong>Please try one of these alternatives:</strong></p>
                    <div class="fallback-options">
                        <button onclick="showTab('google')" class="btn btn-primary">
                            <i class="fab fa-google"></i> Try Google Viewer
                        </button>
                        <button onclick="showTab('microsoft')" class="btn btn-primary">
                            <i class="fas fa-external-link-alt"></i> Try Microsoft Viewer
                        </button>
                        <a href="/student/download-content/<%= content._id %>" class="btn btn-success">
                            <i class="fas fa-download"></i> Download File
                        </a>
                    </div>
                </div>
            </div>
            <div class="viewer-controls">
                <button onclick="showTab('options')" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Options
                </button>
                <a href="/student/download-content/<%= content._id %>" class="btn btn-success" target="_blank">
                    <i class="fas fa-download"></i> Download
                </a>
            </div>
        </div>

        <div id="googleTab" class="tab-content">
            <div class="viewer-status" id="googleStatus">
                <i class="fas fa-spinner fa-spin"></i> Loading Google Docs Viewer...
            </div>
            <div class="viewer-frame" style="display: none;" id="googleFrame">
                <iframe id="googleViewer" 
                        src="" 
                        width="100%" 
                        height="500px" 
                        frameborder="0"
                        style="border: 1px solid #ddd; border-radius: 4px;"
                        onload="handleViewerLoad('google')"
                        onerror="handleViewerError('google')">
                </iframe>
            </div>
            <div class="viewer-fallback" style="display: none;" id="googleFallback">
                <div class="fallback-content">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>Google Viewer Unavailable</h4>
                    <p>The Google Docs viewer cannot access this PowerPoint file. This typically happens because:</p>
                    <ul>
                        <li><strong>File Privacy:</strong> The file is not publicly accessible on the internet</li>
                        <li><strong>CORS Restrictions:</strong> Cross-origin security blocks embedding</li>
                        <li><strong>File Format:</strong> Some PowerPoint features may not be supported</li>
                    </ul>
                    <p><strong>Solution:</strong> Try Microsoft Viewer or download the file to view locally.</p>
                    <div class="fallback-options">
                        <button onclick="showTab('microsoft')" class="btn btn-primary">
                            <i class="fas fa-external-link-alt"></i> Try Microsoft Viewer
                        </button>
                        <button onclick="openGoogleExternal()" class="btn btn-secondary">
                            <i class="fas fa-external-link-alt"></i> Open in New Tab
                        </button>
                        <a href="/student/download-content/<%= content._id %>" class="btn btn-success">
                            <i class="fas fa-download"></i> Download File
                        </a>
                    </div>
                </div>
            </div>
            <div class="viewer-controls">
                <button onclick="showTab('options')" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Options
                </button>
                <a href="/student/download-content/<%= content._id %>" class="btn btn-success" target="_blank">
                    <i class="fas fa-download"></i> Download
                </a>
            </div>
        </div>

        <div id="microsoftTab" class="tab-content">
            <div class="viewer-status" id="microsoftStatus">
                <i class="fas fa-spinner fa-spin"></i> Loading Microsoft Office Viewer...
            </div>
            <div class="viewer-frame" style="display: none;" id="microsoftFrame">
                <iframe id="microsoftViewer" 
                        src="" 
                        width="100%" 
                        height="500px" 
                        frameborder="0"
                        style="border: 1px solid #ddd; border-radius: 4px;"
                        onload="handleViewerLoad('microsoft')"
                        onerror="handleViewerError('microsoft')">
                </iframe>
            </div>
            <div class="viewer-fallback" style="display: none;" id="microsoftFallback">
                <div class="fallback-content">
                    <i class="fas fa-exclamation-triangle"></i>
                    <h4>Microsoft Viewer Unavailable</h4>
                    <p>The Microsoft Office viewer cannot access this PowerPoint file. This typically happens because:</p>
                    <ul>
                        <li><strong>File Privacy:</strong> The file is not publicly accessible on the internet</li>
                        <li><strong>CORS Restrictions:</strong> Cross-origin security blocks embedding</li>
                        <li><strong>Service Limitations:</strong> Microsoft's viewer has access restrictions</li>
                    </ul>
                    <p><strong>Recommended:</strong> Download the file to view with PowerPoint or a compatible viewer.</p>
                    <div class="fallback-options">
                        <button onclick="showTab('google')" class="btn btn-secondary">
                            <i class="fab fa-google"></i> Try Google Viewer
                        </button>
                        <button onclick="openMicrosoftExternal()" class="btn btn-secondary">
                            <i class="fas fa-external-link-alt"></i> Open in New Tab
                        </button>
                        <a href="/student/download-content/<%= content._id %>" class="btn btn-success">
                            <i class="fas fa-download"></i> Download File
                        </a>
                    </div>
                </div>
            </div>
            <div class="viewer-controls">
                <button onclick="showTab('options')" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Options
                </button>
                <a href="/student/download-content/<%= content._id %>" class="btn btn-success" target="_blank">
                    <i class="fas fa-download"></i> Download
                </a>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/js/all.min.js"></script>
    <script>
        // Initialize the viewer when page loads
        document.addEventListener('DOMContentLoaded', function() {
            // If this is a PowerPoint file, automatically show the fallback for Direct Preview
            const fileName = '<%= content.fileName %>';
            const isPowerPoint = fileName.toLowerCase().includes('.ppt') || fileName.toLowerCase().includes('.pptx');
            
            if (isPowerPoint) {
                console.log('PowerPoint file detected - pre-loading fallback states');
                // Pre-load the direct fallback since we know it won't work
                setTimeout(() => {
                    const directStatus = document.getElementById('directStatus');
                    const directFallback = document.getElementById('directFallback');
                    if (directStatus && directFallback) {
                        directStatus.style.display = 'none';
                        directFallback.style.display = 'block';
                    }
                }, 100);
            }
        });

        function showTab(tabName) {
            // Hide all tab contents
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => content.classList.remove('active'));
            
            // Remove active class from all tab buttons
            const tabBtns = document.querySelectorAll('.tab-btn');
            tabBtns.forEach(btn => btn.classList.remove('active'));
            
            // Show selected tab content
            const selectedTab = document.getElementById(tabName + 'Tab');
            if (selectedTab) {
                selectedTab.classList.add('active');
            }
            
            // Activate selected tab button
            const selectedBtn = event?.target || document.querySelector(`[onclick="showTab('${tabName}')"]`);
            if (selectedBtn) {
                selectedBtn.classList.add('active');
            }
            
            // Load viewer content when tab is shown
            if (tabName === 'direct') {
                loadDirectViewer();
            } else if (tabName === 'google') {
                loadGoogleViewer();
            } else if (tabName === 'microsoft') {
                loadMicrosoftViewer();
            }
        }
        
        function loadDirectViewer() {
            const iframe = document.getElementById('directViewer');
            const status = document.getElementById('directStatus');
            const frame = document.getElementById('directFrame');
            
            if (iframe && !iframe.src) {
                // Show loading status
                status.style.display = 'block';
                frame.style.display = 'none';
                document.getElementById('directFallback').style.display = 'none';
                
                // For PowerPoint files, immediately show fallback since direct viewing won't work
                const fileName = '<%= content.fileName %>';
                const isPowerPoint = fileName.toLowerCase().includes('.ppt') || fileName.toLowerCase().includes('.pptx');
                
                if (isPowerPoint) {
                    console.log('PowerPoint file detected - showing fallback immediately');
                    setTimeout(() => {
                        handleViewerError('direct');
                    }, 1000); // Show fallback after 1 second for PowerPoint
                } else {
                    // For other files, try to load directly
                    const contentId = '<%= content._id %>';
                    iframe.src = `/student/view-content/${contentId}`;
                    console.log('Loading direct viewer for content:', contentId);
                    
                    // Set a timeout to show fallback if it doesn't load
                    setTimeout(() => {
                        if (status.style.display !== 'none') {
                            console.log('Direct viewer timeout - showing fallback');
                            handleViewerError('direct');
                        }
                    }, 3000); // 3 second timeout for non-PowerPoint files
                }
            }
        }
        
        function loadGoogleViewer() {
            const iframe = document.getElementById('googleViewer');
            const status = document.getElementById('googleStatus');
            const frame = document.getElementById('googleFrame');
            
            if (iframe && !iframe.src) {
                // Show loading status
                status.style.display = 'block';
                frame.style.display = 'none';
                document.getElementById('googleFallback').style.display = 'none';
                
                // First try to get a signed URL for better compatibility
                const contentId = '<%= content._id %>';
                console.log('Fetching signed URL for content:', contentId);
                
                fetch(`/api/signed-url/${contentId}`)
                    .then(response => {
                        console.log('Signed URL response status:', response.status);
                        return response.json();
                    })
                    .then(data => {
                        console.log('Signed URL response data:', data);
                        if (data.success) {
                            const fileUrl = data.signedUrl;
                            console.log('Using signed URL for Google Viewer:', fileUrl);
                            
                            // Try different Google Viewer URLs for better compatibility
                            const viewerUrls = [
                                `https://docs.google.com/gview?url=${encodeURIComponent(fileUrl)}&embedded=true`,
                                `https://drive.google.com/viewerng/viewer?embedded=true&url=${encodeURIComponent(fileUrl)}`,
                                `https://docs.google.com/viewer?url=${encodeURIComponent(fileUrl)}&embedded=true`
                            ];
                            
                            // Try the first URL
                            iframe.src = viewerUrls[0];
                            console.log('Loading Google Viewer with URL:', viewerUrls[0]);
                            
                            // Add a more aggressive check to see if the iframe loads content
                            setTimeout(() => {
                                try {
                                    const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
                                    if (iframeDoc && iframeDoc.body && iframeDoc.body.innerHTML.length > 100) {
                                        console.log('Google viewer appears to have loaded content');
                                        handleViewerLoad('google');
                                    } else {
                                        console.log('Google viewer iframe is empty or minimal content');
                                    }
                                } catch (e) {
                                    console.log('Cannot access iframe content (likely CORS) - this might be normal');
                                }
                            }, 3000);
                            
                        } else {
                            console.error('Failed to get signed URL:', data.message);
                            handleViewerError('google');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching signed URL:', error);
                        // Fallback to original URL
                        const fileUrl = '<%= content.fileUrl %>';
                        const viewerUrl = `https://docs.google.com/gview?url=${encodeURIComponent(fileUrl)}&embedded=true`;
                        iframe.src = viewerUrl;
                        console.log('Loading Google Viewer with original URL:', viewerUrl);
                    });
                
                // Set a timeout to show fallback if loading takes too long
                setTimeout(() => {
                    if (status.style.display !== 'none') {
                        console.log('Google viewer timeout - showing fallback');
                        handleViewerError('google');
                    }
                }, 8000); // 8 second timeout for Google viewer
                
                // Also set a check to see if we should show the frame after a shorter time
                setTimeout(() => {
                    if (status.style.display !== 'none' && iframe.src) {
                        // Check if iframe has navigated (indicating it might be working)
                        try {
                            const currentSrc = iframe.src;
                            if (currentSrc && currentSrc.includes('docs.google.com')) {
                                console.log('Google viewer iframe appears to be loading, showing frame');
                                handleViewerLoad('google');
                            }
                        } catch (e) {
                            console.log('Could not check iframe status');
                        }
                    }
                }, 4000); // Check after 4 seconds
            }
        }
        
        function loadMicrosoftViewer() {
            const iframe = document.getElementById('microsoftViewer');
            const status = document.getElementById('microsoftStatus');
            const frame = document.getElementById('microsoftFrame');
            
            if (iframe && !iframe.src) {
                // Show loading status
                status.style.display = 'block';
                frame.style.display = 'none';
                document.getElementById('microsoftFallback').style.display = 'none';
                
                // First try to get a signed URL for better compatibility
                const contentId = '<%= content._id %>';
                fetch(`/api/signed-url/${contentId}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const fileUrl = data.signedUrl;
                            console.log('Using signed URL for Microsoft Viewer:', fileUrl);
                            const viewerUrl = `https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(fileUrl)}`;
                            iframe.src = viewerUrl;
                            console.log('Loading Microsoft Viewer:', viewerUrl);
                        } else {
                            console.error('Failed to get signed URL, using original');
                            handleViewerError('microsoft');
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching signed URL:', error);
                        // Fallback to original URL
                        const fileUrl = '<%= content.fileUrl %>';
                        const viewerUrl = `https://view.officeapps.live.com/op/embed.aspx?src=${encodeURIComponent(fileUrl)}`;
                        iframe.src = viewerUrl;
                        console.log('Loading Microsoft Viewer with original URL:', viewerUrl);
                    });
                
                // Set a timeout to show fallback if loading takes too long
                setTimeout(() => {
                    if (status.style.display !== 'none') {
                        console.log('Microsoft viewer timeout - showing fallback');
                        handleViewerError('microsoft');
                    }
                }, 8000); // 8 second timeout for Microsoft viewer
                
                // Also set a check to see if we should show the frame after a shorter time
                setTimeout(() => {
                    if (status.style.display !== 'none' && iframe.src) {
                        // Check if iframe has navigated (indicating it might be working)
                        try {
                            const currentSrc = iframe.src;
                            if (currentSrc && currentSrc.includes('officeapps.live.com')) {
                                console.log('Microsoft viewer iframe appears to be loading, showing frame');
                                handleViewerLoad('microsoft');
                            }
                        } catch (e) {
                            console.log('Could not check Microsoft iframe status');
                        }
                    }
                }, 4000); // Check after 4 seconds
            }
        }
        
        function handleViewerLoad(viewerType) {
            console.log(`${viewerType} viewer loaded successfully`);
            const status = document.getElementById(`${viewerType}Status`);
            const frame = document.getElementById(`${viewerType}Frame`);
            const fallback = document.getElementById(`${viewerType}Fallback`);
            
            // Only show the frame if we haven't already shown the fallback
            if (fallback && fallback.style.display === 'none') {
                console.log(`Showing ${viewerType} viewer frame`);
                status.style.display = 'none';
                frame.style.display = 'block';
            } else {
                console.log(`${viewerType} viewer fallback already shown, not displaying frame`);
            }
        }
        
        function handleViewerError(viewerType) {
            console.log(`${viewerType} viewer failed to load`);
            const status = document.getElementById(`${viewerType}Status`);
            const frame = document.getElementById(`${viewerType}Frame`);
            const fallback = document.getElementById(`${viewerType}Fallback`);
            
            // Mark that we've handled this viewer
            if (status) status.style.display = 'none';
            if (frame) frame.style.display = 'none';
            if (fallback) fallback.style.display = 'block';
            
            // Also clear the iframe src to stop any loading
            const iframe = document.getElementById(`${viewerType}Viewer`);
            if (iframe) {
                iframe.src = 'about:blank';
            }
        }
        
        function retryGoogleViewer() {
            const iframe = document.getElementById('googleViewer');
            iframe.src = '';
            loadGoogleViewer();
        }
        
        function retryMicrosoftViewer() {
            const iframe = document.getElementById('microsoftViewer');
            iframe.src = '';
            loadMicrosoftViewer();
        }
        
        function openGoogleExternal() {
            const contentId = '<%= content._id %>';
            fetch(`/api/signed-url/${contentId}`)
                .then(response => response.json())
                .then(data => {
                    const fileUrl = data.success ? data.signedUrl : '<%= content.fileUrl %>';
                    const viewerUrl = `https://docs.google.com/gview?url=${encodeURIComponent(fileUrl)}`;
                    window.open(viewerUrl, '_blank');
                })
                .catch(error => {
                    console.error('Error getting signed URL for external viewer:', error);
                    const fileUrl = '<%= content.fileUrl %>';
                    const viewerUrl = `https://docs.google.com/gview?url=${encodeURIComponent(fileUrl)}`;
                    window.open(viewerUrl, '_blank');
                });
        }
        
        function openMicrosoftExternal() {
            const contentId = '<%= content._id %>';
            fetch(`/api/signed-url/${contentId}`)
                .then(response => response.json())
                .then(data => {
                    const fileUrl = data.success ? data.signedUrl : '<%= content.fileUrl %>';
                    const viewerUrl = `https://view.officeapps.live.com/op/view.aspx?src=${encodeURIComponent(fileUrl)}`;
                    window.open(viewerUrl, '_blank');
                })
                .catch(error => {
                    console.error('Error getting signed URL for external viewer:', error);
                    const fileUrl = '<%= content.fileUrl %>';
                    const viewerUrl = `https://view.officeapps.live.com/op/view.aspx?src=${encodeURIComponent(fileUrl)}`;
                    window.open(viewerUrl, '_blank');
                });
        }
    </script>
</body>
</html>