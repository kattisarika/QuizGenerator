<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Grade Complex Quiz - SkillOns</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- MathJax for Math Equation Support -->
    <script>
    window.MathJax = {
        tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']],
            processEscapes: true,
            processEnvironments: true
        },
        options: {
            skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
        }
    };
    </script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    
    <style>
        .grading-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }

        .grading-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 30px;
            border-radius: 12px;
            margin-bottom: 30px;
        }

        .grading-header h1 {
            margin: 0 0 10px 0;
            font-size: 24px;
            font-weight: 700;
        }

        .student-info {
            display: flex;
            gap: 30px;
            margin-top: 15px;
        }

        .student-info div {
            opacity: 0.9;
        }

        .grading-layout {
            display: grid;
            grid-template-columns: 1fr 350px;
            gap: 30px;
        }

        .quiz-display {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            overflow: hidden;
        }

        .quiz-canvas {
            position: relative;
            background: #fafafa;
            background-image: 
                linear-gradient(rgba(0,0,0,.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0,0,0,.1) 1px, transparent 1px);
            background-size: 20px 20px;
            min-height: 600px;
            padding: 20px;
        }

        .grading-panel {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            padding: 25px;
            height: fit-content;
            position: sticky;
            top: 20px;
        }

        .grading-panel h3 {
            margin: 0 0 20px 0;
            color: #2d3748;
            font-size: 18px;
            font-weight: 600;
        }

        .student-answers {
            margin-bottom: 25px;
        }

        .answer-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .answer-label {
            font-weight: 600;
            color: #495057;
            margin-bottom: 8px;
            font-size: 14px;
        }

        .answer-content {
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 6px;
            padding: 12px;
            min-height: 60px;
            font-family: 'Inter', sans-serif;
            line-height: 1.5;
        }

        .grading-form {
            border-top: 1px solid #e9ecef;
            padding-top: 25px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            font-weight: 600;
            color: #374151;
            margin-bottom: 8px;
        }

        .form-group input,
        .form-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.2s ease;
        }

        .form-group input:focus,
        .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .score-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 15px;
        }

        .btn-submit-grade {
            width: 100%;
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            color: white;
            border: none;
            padding: 15px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.2s ease;
        }

        .btn-submit-grade:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(16, 185, 129, 0.3);
        }

        .btn-back {
            background: #6b7280;
            color: white;
            text-decoration: none;
            padding: 10px 20px;
            border-radius: 6px;
            font-weight: 500;
            transition: background-color 0.2s ease;
            display: inline-block;
            margin-bottom: 20px;
        }

        .btn-back:hover {
            background: #4b5563;
            color: white;
            text-decoration: none;
        }

        /* Complex Quiz Element Styles */
        .quiz-canvas textarea {
            font-family: 'Inter', sans-serif;
            font-size: 14px;
            line-height: 1.5;
            border: 2px solid #e2e8f0;
            border-radius: 6px;
            background: #fff3cd;
            color: #856404;
        }

        .quiz-canvas table {
            font-family: 'Inter', sans-serif;
            font-size: 14px;
        }

        .quiz-canvas table td {
            border: 1px solid #e2e8f0 !important;
            padding: 8px !important;
        }

        /* Question Scoring Styles */
        .question-score-item {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
            transition: all 0.2s ease;
        }

        .question-score-item:hover {
            border-color: #667eea;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.1);
        }

        .question-score-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            font-weight: 600;
            color: #495057;
        }

        .question-score-inputs {
            display: grid;
            grid-template-columns: 1fr 1fr 2fr;
            gap: 15px;
            align-items: end;
        }

        .score-input-group {
            display: flex;
            flex-direction: column;
        }

        .score-input-group label {
            font-size: 12px;
            font-weight: 500;
            color: #6c757d;
            margin-bottom: 4px;
        }

        .score-input-group input {
            padding: 8px 12px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 14px;
            transition: border-color 0.2s ease;
        }

        .score-input-group input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }

        .question-feedback {
            margin-top: 10px;
        }

        .question-feedback textarea {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ced4da;
            border-radius: 4px;
            font-size: 13px;
            resize: vertical;
            min-height: 60px;
        }

        .question-feedback textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 2px rgba(102, 126, 234, 0.2);
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="/teacher/dashboard">SkillOns</a>
            </div>
            <div class="nav-menu">
                <a href="/teacher/dashboard" class="nav-link">
                    <i class="fas fa-tachometer-alt"></i> Dashboard
                </a>
                <a href="/teacher/complex-quiz-grading" class="nav-link">
                    <i class="fas fa-clipboard-check"></i> Grade Complex Quizzes
                </a>
                <a href="/logout" class="nav-link">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </a>
            </div>
        </div>
    </nav>

    <div class="grading-container">
        <a href="/teacher/complex-quiz-grading" class="btn-back">
            <i class="fas fa-arrow-left"></i> Back to Grading Dashboard
        </a>

        <div class="grading-header">
            <h1><i class="fas fa-clipboard-check"></i> Grade Complex Quiz</h1>
            <div class="student-info">
                <div><i class="fas fa-book"></i> <strong>Quiz:</strong> <%= result.quiz.title %></div>
                <div><i class="fas fa-user"></i> <strong>Student:</strong> <%= result.student.displayName %></div>
                <div><i class="fas fa-clock"></i> <strong>Submitted:</strong> <%= new Date(result.submittedAt).toLocaleString() %></div>
            </div>
        </div>

        <div class="grading-layout">
            <div class="quiz-display">
                <div class="quiz-canvas" id="quiz-canvas">
                    <!-- Quiz content will be rendered here -->
                </div>
            </div>

            <div class="grading-panel">
                <h3><i class="fas fa-edit"></i> Student Answers</h3>
                
                <div class="student-answers">
                    <% if (result.complexAnswersData && Object.keys(result.complexAnswersData).length > 0) { %>
                        <% Object.keys(result.complexAnswersData).forEach((elementId, index) => { %>
                            <div class="answer-item">
                                <div class="answer-label">Answer Area <%= index + 1 %> (Element: <%= elementId %>)</div>
                                <div class="answer-content">
                                    <%= result.complexAnswersData[elementId] || 'No answer provided' %>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="answer-item">
                            <div class="answer-content" style="text-align: center; color: #6b7280;">
                                No answers submitted
                            </div>
                        </div>
                    <% } %>
                </div>

                <form class="grading-form" onsubmit="submitGrade(event)">
                    <h4><i class="fas fa-calculator"></i> Question-by-Question Scoring</h4>

                    <div id="question-scores-container">
                        <!-- Question scores will be populated by JavaScript -->
                    </div>

                    <div class="form-group" style="margin-top: 20px; padding-top: 20px; border-top: 2px solid #e9ecef;">
                        <label><i class="fas fa-chart-line"></i> Total Score Summary</label>
                        <div class="score-inputs">
                            <div>
                                <label style="font-size: 12px; margin-bottom: 4px;">Total Points</label>
                                <input type="number" id="totalScore" min="0" step="0.5" placeholder="0" readonly style="background: #f8f9fa;">
                            </div>
                            <div>
                                <label style="font-size: 12px; margin-bottom: 4px;">Max Points</label>
                                <input type="number" id="maxScore" min="0" step="0.5" placeholder="0" readonly style="background: #f8f9fa;">
                            </div>
                            <div>
                                <label style="font-size: 12px; margin-bottom: 4px;">Percentage (%)</label>
                                <input type="number" id="finalPercentage" min="0" max="100" step="0.1" placeholder="0" readonly style="background: #f8f9fa;">
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label><i class="fas fa-comment"></i> Overall Teacher Comments</label>
                        <textarea id="teacherComments" rows="4" placeholder="Provide overall feedback for the student..."></textarea>
                    </div>

                    <button type="submit" class="btn-submit-grade">
                        <i class="fas fa-check"></i> Submit Grade
                    </button>
                </form>
            </div>
        </div>
    </div>

    <script>
        // Complex quiz data from server
        const complexQuizData = <%- JSON.stringify(result.quiz.complexQuizData) %>;
        const studentAnswers = <%- JSON.stringify(result.complexAnswersData || {}) %>;
        
        console.log('Complex quiz data:', complexQuizData);
        console.log('Student answers:', studentAnswers);
        
        // Render complex quiz for teacher review
        function renderComplexQuizForGrading() {
            const canvas = document.getElementById('quiz-canvas');
            if (!canvas || !complexQuizData || !complexQuizData.elements) {
                console.log('No complex quiz data to render');
                return;
            }
            
            console.log('Rendering', complexQuizData.elements.length, 'complex quiz elements for grading');
            
            complexQuizData.elements.forEach((element, index) => {
                const elementDiv = document.createElement('div');
                elementDiv.id = element.id;
                elementDiv.style.position = 'absolute';
                elementDiv.style.left = element.x + 'px';
                elementDiv.style.top = element.y + 'px';
                elementDiv.style.width = element.width + 'px';
                elementDiv.style.height = element.height + 'px';
                
                // Apply element styles
                if (element.style) {
                    Object.keys(element.style).forEach(key => {
                        elementDiv.style[key] = element.style[key];
                    });
                }
                
                // Render element content for teacher view
                elementDiv.innerHTML = getElementContentForGrading(element);
                
                canvas.appendChild(elementDiv);
                console.log('Rendered element for grading:', element.id, element.type);
            });
        }
        
        // Get element content for teacher grading view
        function getElementContentForGrading(element) {
            switch(element.type) {
                case 'textbox':
                    return '<div style="width: 100%; height: 100%; padding: 8px; overflow: auto;">' + (element.content || 'Text content') + '</div>';
                    
                case 'question':
                    return '<div style="padding: 15px; background: #f0f9ff; border-left: 4px solid #0ea5e9; height: 100%; box-sizing: border-box;">' +
                        '<strong style="color: #0ea5e9;">Question:</strong>' +
                        '<div style="margin-top: 8px;">' + (element.content || 'Question text') + '</div>' +
                        '</div>';
                        
                case 'sub-question':
                    return '<div style="padding: 15px; background: #fefce8; border-left: 4px solid #eab308; margin-left: 20px; height: 100%; box-sizing: border-box;">' +
                        '<strong style="color: #eab308;">Sub-question:</strong>' +
                        '<div style="margin-top: 8px;">' + (element.content || 'Sub-question text') + '</div>' +
                        '</div>';
                        
                case 'answer-area':
                    const studentAnswer = studentAnswers[element.id] || '';
                    return '<div style="padding: 15px; background: #f0fdf4; border: 2px solid #22c55e; border-radius: 8px; height: 100%; box-sizing: border-box;">' +
                        '<div style="color: #16a34a; font-weight: 600; margin-bottom: 8px;">' +
                        '<i class="fas fa-edit" style="margin-right: 8px;"></i>Student Answer:' +
                        '</div>' +
                        '<div style="background: white; border: 1px solid #e2e8f0; border-radius: 4px; padding: 8px; min-height: 40px; font-family: monospace;">' +
                        (studentAnswer || '<em style="color: #6b7280;">No answer provided</em>') +
                        '</div>' +
                        '</div>';
                        
                case 'table':
                    if (element.content && element.content.includes('<table')) {
                        return element.content;
                    } else {
                        return '<table style="width: 100%; border-collapse: collapse; height: 100%;">' +
                            '<tr><td style="border: 1px solid #e2e8f0; padding: 8px;">Cell 1</td><td style="border: 1px solid #e2e8f0; padding: 8px;">Cell 2</td></tr>' +
                            '<tr><td style="border: 1px solid #e2e8f0; padding: 8px;">Cell 3</td><td style="border: 1px solid #e2e8f0; padding: 8px;">Cell 4</td></tr>' +
                            '</table>';
                    }
                    
                case 'image':
                    if (element.content && element.content.startsWith('data:image')) {
                        return '<img src="' + element.content + '" style="width: 100%; height: 100%; object-fit: cover; border-radius: 4px;" alt="Quiz Image">';
                    } else {
                        return '<div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #f8fafc; border: 2px dashed #cbd5e1; color: #64748b;">' +
                            '<div style="text-align: center;"><i class="fas fa-image fa-2x"></i><br><small>Image</small></div>' +
                            '</div>';
                    }
                    
                case 'latex':
                    return '<div style="display: flex; align-items: center; justify-content: center; height: 100%; padding: 10px; background: #fefce8; border: 1px solid #eab308; border-radius: 4px;">' +
                        '<div class="math-content">$$' + (element.content || 'x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}') + '$$</div>' +
                        '</div>';
                        
                default:
                    return '<div style="padding: 8px; background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 4px; height: 100%; box-sizing: border-box;">' +
                        (element.content || 'Content') +
                        '</div>';
            }
        }
        
        // Submit grade function
        function submitGrade(event) {
            event.preventDefault();

            // Collect individual question scores
            const questionScores = {};
            const questionFeedback = {};
            let hasValidScores = false;

            // Get all score inputs
            const scoreInputs = document.querySelectorAll('[id^="score-"]');
            const feedbackInputs = document.querySelectorAll('[id^="feedback-"]');

            // Validate and collect scores
            scoreInputs.forEach(input => {
                const elementId = input.id.replace('score-', '');
                const score = parseFloat(input.value);
                const maxPoints = parseFloat(input.getAttribute('data-max-points')) || 10;

                if (isNaN(score)) {
                    alert(`Please provide a score for Question ${Array.from(scoreInputs).indexOf(input) + 1}`);
                    input.focus();
                    return;
                }

                if (score < 0 || score > maxPoints) {
                    alert(`Score for Question ${Array.from(scoreInputs).indexOf(input) + 1} must be between 0 and ${maxPoints}`);
                    input.focus();
                    return;
                }

                questionScores[elementId] = {
                    score: score,
                    maxPoints: maxPoints
                };
                hasValidScores = true;
            });

            if (!hasValidScores) {
                alert('Please provide scores for all questions');
                return;
            }

            // Collect feedback
            feedbackInputs.forEach(input => {
                const elementId = input.id.replace('feedback-', '');
                questionFeedback[elementId] = input.value.trim();
            });

            // Get totals
            const totalScore = parseFloat(document.getElementById('totalScore').value) || 0;
            const maxScore = parseFloat(document.getElementById('maxScore').value) || 0;
            const finalPercentage = parseFloat(document.getElementById('finalPercentage').value) || 0;
            const teacherComments = document.getElementById('teacherComments').value.trim();

            const gradeData = {
                questionScores: questionScores,
                questionFeedback: questionFeedback,
                totalScore: totalScore,
                maxScore: maxScore,
                finalPercentage: finalPercentage,
                teacherComments: teacherComments,
                gradingType: 'question-by-question'
            };

            console.log('Submitting detailed grade:', gradeData);

            // Show loading state
            const submitBtn = event.target.querySelector('button[type="submit"]') || event.target;
            const originalText = submitBtn.innerHTML;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
            submitBtn.disabled = true;

            fetch('/teacher/grade-complex-quiz/<%= result._id %>', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(gradeData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert('✅ Grade submitted successfully!\n\nDetailed scores and feedback have been saved.\nThe student will now see their results.');
                    window.location.href = '/teacher/complex-quiz-grading';
                } else {
                    alert('Error submitting grade: ' + data.message);
                    submitBtn.innerHTML = originalText;
                    submitBtn.disabled = false;
                }
            })
            .catch(error => {
                console.error('Error submitting grade:', error);
                alert('Error submitting grade. Please try again.');
                submitBtn.innerHTML = originalText;
                submitBtn.disabled = false;
            });
        }
        
        // Render complex quiz when page loads
        // Create question scoring inputs
        function createQuestionScoringInputs() {
            const container = document.getElementById('question-scores-container');
            if (!container) return;

            // Find all questions/answer areas from student answers
            const answerKeys = Object.keys(studentAnswers);

            if (answerKeys.length === 0) {
                container.innerHTML = `
                    <div class="question-score-item">
                        <div style="text-align: center; color: #6c757d; padding: 20px;">
                            <i class="fas fa-info-circle"></i> No student answers found to grade.
                        </div>
                    </div>
                `;
                return;
            }

            let totalMaxScore = 0;

            answerKeys.forEach((elementId, index) => {
                const questionNumber = index + 1;
                const maxPoints = 10; // Default max points per question
                totalMaxScore += maxPoints;

                const questionScoreHtml = `
                    <div class="question-score-item" data-element-id="${elementId}">
                        <div class="question-score-header">
                            <span><i class="fas fa-question-circle"></i> Question ${questionNumber}</span>
                            <span class="text-muted">Element ID: ${elementId}</span>
                        </div>

                        <div class="student-answer-preview" style="background: #fff; border: 1px solid #e9ecef; border-radius: 4px; padding: 10px; margin-bottom: 10px; font-size: 13px;">
                            <strong>Student Answer:</strong><br>
                            <div style="margin-top: 5px; color: #495057;">${studentAnswers[elementId] || 'No answer provided'}</div>
                        </div>

                        <div class="question-score-inputs">
                            <div class="score-input-group">
                                <label>Points Earned</label>
                                <input type="number"
                                       id="score-${elementId}"
                                       name="score-${elementId}"
                                       min="0"
                                       max="${maxPoints}"
                                       step="0.5"
                                       placeholder="0"
                                       data-max-points="${maxPoints}"
                                       onchange="updateTotalScore()"
                                       oninput="updateTotalScore()">
                            </div>
                            <div class="score-input-group">
                                <label>Max Points</label>
                                <input type="number"
                                       id="max-${elementId}"
                                       value="${maxPoints}"
                                       min="1"
                                       step="0.5"
                                       onchange="updateMaxPoints('${elementId}', this.value)">
                            </div>
                            <div class="score-input-group">
                                <label>Question Feedback (Optional)</label>
                                <textarea id="feedback-${elementId}"
                                          name="feedback-${elementId}"
                                          placeholder="Specific feedback for this question..."
                                          rows="2"></textarea>
                            </div>
                        </div>
                    </div>
                `;

                container.innerHTML += questionScoreHtml;
            });

            // Set initial max score
            document.getElementById('maxScore').value = totalMaxScore;
            updateTotalScore();
        }

        // Update total score calculation
        function updateTotalScore() {
            let totalScore = 0;
            let maxScore = 0;

            const scoreInputs = document.querySelectorAll('[id^="score-"]');
            const maxInputs = document.querySelectorAll('[id^="max-"]');

            scoreInputs.forEach(input => {
                const score = parseFloat(input.value) || 0;
                totalScore += score;
            });

            maxInputs.forEach(input => {
                const max = parseFloat(input.value) || 0;
                maxScore += max;
            });

            const percentage = maxScore > 0 ? (totalScore / maxScore * 100) : 0;

            document.getElementById('totalScore').value = totalScore.toFixed(1);
            document.getElementById('maxScore').value = maxScore.toFixed(1);
            document.getElementById('finalPercentage').value = percentage.toFixed(1);
        }

        // Update max points for a specific question
        function updateMaxPoints(elementId, newMax) {
            const scoreInput = document.getElementById(`score-${elementId}`);
            if (scoreInput) {
                scoreInput.setAttribute('max', newMax);
                scoreInput.setAttribute('data-max-points', newMax);

                // If current score exceeds new max, adjust it
                if (parseFloat(scoreInput.value) > parseFloat(newMax)) {
                    scoreInput.value = newMax;
                }
            }
            updateTotalScore();
        }

        document.addEventListener('DOMContentLoaded', function() {
            renderComplexQuizForGrading();
            createQuestionScoringInputs();

            // Process LaTeX if MathJax is available
            if (window.MathJax) {
                setTimeout(() => {
                    MathJax.typesetPromise().catch(console.error);
                }, 500);
            }
        });
    </script>
</body>
</html>
