<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Complex Quiz - SkillOns</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <!-- MathJax will be loaded dynamically when needed -->
    
    <!-- Chart.js for charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Quill.js for rich text editing -->
    <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
    <script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>
    
    <style>
        :root {
            --primary-color: #4f46e5;
            --secondary-color: #7c3aed;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --dark-color: #1e293b;
            --light-color: #f8fafc;
            --border-color: #e2e8f0;
        }

        body {
            font-family: 'Inter', sans-serif;
            background: var(--light-color);
            margin: 0;
            padding: 0;
            overflow-x: hidden;
        }

        .quiz-builder-container {
            display: flex;
            height: 100vh;
            background: var(--light-color);
        }

        /* Sidebar with tools */
        .tools-sidebar {
            width: 280px;
            background: white;
            border-right: 2px solid var(--border-color);
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.05);
            overflow-y: auto;
            z-index: 100;
        }

        .sidebar-header {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
        }

        .sidebar-header h4 {
            margin: 0;
            font-weight: 600;
            font-size: 1.1rem;
        }

        .tool-category {
            padding: 15px 20px;
            border-bottom: 1px solid var(--border-color);
        }

        .tool-category h6 {
            margin: 0 0 15px 0;
            font-weight: 600;
            color: var(--dark-color);
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .tool-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            margin: 5px 0;
            background: var(--light-color);
            border: 2px solid var(--border-color);
            border-radius: 8px;
            cursor: grab;
            transition: all 0.3s ease;
            user-select: none;
        }

        .tool-item:hover {
            background: var(--primary-color);
            color: white;
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.3);
        }

        .tool-item:active {
            cursor: grabbing;
        }

        .tool-item i {
            margin-right: 10px;
            font-size: 1.1rem;
            width: 20px;
            text-align: center;
        }

        .tool-item span {
            font-weight: 500;
            font-size: 0.9rem;
        }

        /* Main canvas area */
        .canvas-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #fafbfc;
        }

        .canvas-header {
            background: white;
            padding: 15px 25px;
            border-bottom: 1px solid var(--border-color);
            display: flex;
            justify-content: space-between;
            align-items: center;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }

        .canvas-title {
            font-weight: 600;
            color: var(--dark-color);
            margin: 0;
        }

        .canvas-actions {
            display: flex;
            gap: 10px;
        }

        .btn-canvas {
            padding: 8px 16px;
            border-radius: 6px;
            font-weight: 500;
            font-size: 0.9rem;
            border: none;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary-canvas {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary-canvas:hover {
            background: var(--secondary-color);
            transform: translateY(-1px);
        }

        .btn-secondary-canvas {
            background: var(--border-color);
            color: var(--dark-color);
        }

        .btn-secondary-canvas:hover {
            background: #cbd5e1;
        }

        .btn-info-canvas {
            background: #17a2b8;
            color: white;
        }

        .btn-info-canvas:hover {
            background: #138496;
            transform: translateY(-1px);
        }

        /* Canvas workspace */
        .canvas-workspace {
            flex: 1;
            padding: 20px;
            overflow: auto;
            position: relative;
        }

        .canvas-area {
            min-height: 800px;
            background: white;
            border: 2px dashed var(--border-color);
            border-radius: 12px;
            position: relative;
            margin: 0 auto;
            max-width: 1000px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            /* Ensure canvas can receive drop events */
            pointer-events: all;
            z-index: 1;
        }

        .canvas-area.drag-over {
            border-color: var(--primary-color);
            background: rgba(79, 70, 229, 0.05);
            border-style: solid;
            transform: scale(1.01);
            transition: all 0.3s ease;
        }

        .canvas-placeholder {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: #94a3b8;
            pointer-events: all;
            cursor: pointer;
            padding: 40px;
            border-radius: 12px;
            transition: all 0.3s ease;
            user-select: none;
        }

        .canvas-placeholder:hover {
            color: var(--primary-color);
            background: rgba(79, 70, 229, 0.05);
        }

        .canvas-placeholder i {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }

        .canvas-placeholder h5 {
            margin: 0 0 10px 0;
            font-weight: 600;
        }

        .canvas-placeholder p {
            margin: 0;
            font-size: 0.9rem;
        }

        /* Properties panel */
        .properties-panel {
            width: 320px;
            background: white;
            border-left: 2px solid var(--border-color);
            box-shadow: -2px 0 10px rgba(0, 0, 0, 0.05);
            overflow-y: auto;
            z-index: 100;
        }

        .properties-header {
            padding: 20px;
            border-bottom: 1px solid var(--border-color);
            background: linear-gradient(135deg, var(--success-color), #059669);
            color: white;
        }

        .properties-header h5 {
            margin: 0;
            font-weight: 600;
        }

        .properties-content {
            padding: 20px;
        }

        .property-group {
            margin-bottom: 20px;
        }

        .property-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: var(--dark-color);
            font-size: 0.9rem;
        }

        .property-group input,
        .property-group select,
        .property-group textarea {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            font-size: 0.9rem;
            transition: border-color 0.3s ease;
        }

        .property-group input:focus,
        .property-group select:focus,
        .property-group textarea:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.1);
        }

        /* Draggable elements */
        .canvas-element {
            position: absolute;
            border: 2px solid transparent;
            border-radius: 6px;
            cursor: move;
            transition: all 0.3s ease;
            min-width: 100px;
            min-height: 50px;
            overflow: hidden;
            box-sizing: border-box;
        }

        .canvas-element:hover {
            border-color: var(--primary-color);
            box-shadow: 0 4px 12px rgba(79, 70, 229, 0.2);
        }

        .canvas-element.selected {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
        }

        .element-controls {
            position: absolute;
            top: -30px;
            right: 0;
            display: none;
            gap: 5px;
        }

        .canvas-element:hover .element-controls,
        .canvas-element.selected .element-controls {
            display: flex;
        }

        .control-btn {
            width: 24px;
            height: 24px;
            background: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.7rem;
        }

        .control-btn:hover {
            background: var(--secondary-color);
        }

        .control-btn.delete {
            background: var(--danger-color);
        }

        /* Shape-specific tool styling */
        .tool-item[data-type="line"] i {
            color: #ef4444;
        }
        .tool-item[data-type="triangle"] i {
            color: #f59e0b;
        }
        .tool-item[data-type="square"] i {
            color: #10b981;
        }
        .tool-item[data-type="rectangle"] i {
            color: #059669;
        }
        .tool-item[data-type="rhombus"] i {
            color: #dc2626;
        }
        .tool-item[data-type="circle"] i {
            color: #3b82f6;
        }
        .tool-item[data-type="parallelogram"] i {
            color: #8b5cf6;
        }
        .tool-item[data-type="pentagon"] i {
            color: #ec4899;
        }
        .tool-item[data-type="hexagon"] i {
            color: #06b6d4;
        }
        .tool-item[data-type="cube"] i {
            color: #6366f1;
        }
        .tool-item[data-type="sphere"] i {
            color: #84cc16;
        }
        .tool-item[data-type="cuboid"] i {
            color: #f97316;
        }

        /* Shape preview in canvas */
        .canvas-element svg {
            border-radius: 6px;
        }

        /* Enhanced tool category headers */
        .tool-category h6 {
            font-weight: 600;
            color: #374151;
            margin-bottom: 12px;
            padding-bottom: 6px;
            border-bottom: 1px solid #e5e7eb;
        }

        /* Responsive design */
        @media (max-width: 1200px) {
            .tools-sidebar {
                width: 250px;
            }
            
            .properties-panel {
                width: 280px;
            }
        }

        @media (max-width: 768px) {
            .quiz-builder-container {
                flex-direction: column;
            }
            
            .tools-sidebar,
            .properties-panel {
                width: 100%;
                height: auto;
                max-height: 200px;
            }
            
            .canvas-container {
                height: calc(100vh - 400px);
            }
        }
    </style>
</head>
<body>
    <div class="quiz-builder-container">
        <!-- Tools Sidebar -->
        <div class="tools-sidebar">
            <div class="sidebar-header">
                <h4><i class="fas fa-tools me-2"></i>Quiz Builder Tools</h4>
            </div>
            
            <!-- Basic Elements -->
            <div class="tool-category">
                <h6>Basic Elements</h6>
                <div class="tool-item" draggable="true" data-type="textbox">
                    <i class="fas fa-font"></i>
                    <span>Text Box</span>
                </div>
                <div class="tool-item" draggable="true" data-type="image">
                    <i class="fas fa-image"></i>
                    <span>Image</span>
                </div>
                <div class="tool-item" draggable="true" data-type="table">
                    <i class="fas fa-table"></i>
                    <span>Table</span>
                </div>
            </div>
            
            <!-- Geometric Shapes -->
            <div class="tool-category">
                <h6><i class="fas fa-shapes me-2"></i>Geometric Shapes</h6>
                <div class="tool-item" draggable="true" data-type="line">
                    <i class="fas fa-minus"></i>
                    <span>Line</span>
                </div>
                <div class="tool-item" draggable="true" data-type="triangle">
                    <i class="fas fa-play" style="transform: rotate(90deg);"></i>
                    <span>Triangle</span>
                </div>
                <div class="tool-item" draggable="true" data-type="square">
                    <i class="fas fa-square"></i>
                    <span>Square</span>
                </div>
                <div class="tool-item" draggable="true" data-type="rectangle">
                    <i class="far fa-square"></i>
                    <span>Rectangle</span>
                </div>
                <div class="tool-item" draggable="true" data-type="rhombus">
                    <i class="fas fa-gem"></i>
                    <span>Rhombus</span>
                </div>
                <div class="tool-item" draggable="true" data-type="parallelogram">
                    <i class="fas fa-shapes"></i>
                    <span>Parallelogram</span>
                </div>
                <div class="tool-item" draggable="true" data-type="circle">
                    <i class="fas fa-circle"></i>
                    <span>Circle</span>
                </div>
                <div class="tool-item" draggable="true" data-type="pentagon">
                    <i class="fas fa-stop"></i>
                    <span>Pentagon</span>
                </div>
                <div class="tool-item" draggable="true" data-type="hexagon">
                    <i class="fas fa-hexagon"></i>
                    <span>Hexagon</span>
                </div>
            </div>

            <!-- 3D Shapes -->
            <div class="tool-category">
                <h6><i class="fas fa-cube me-2"></i>3D Shapes</h6>
                <div class="tool-item" draggable="true" data-type="cube">
                    <i class="fas fa-cube"></i>
                    <span>Cube</span>
                </div>
                <div class="tool-item" draggable="true" data-type="sphere">
                    <i class="fas fa-globe"></i>
                    <span>Sphere</span>
                </div>
                <div class="tool-item" draggable="true" data-type="cuboid">
                    <i class="fas fa-box"></i>
                    <span>Cuboid</span>
                </div>
            </div>

            <!-- Charts -->
            <div class="tool-category">
                <h6>Charts & Graphs</h6>
                <div class="tool-item" draggable="true" data-type="bar-chart">
                    <i class="fas fa-chart-bar"></i>
                    <span>Bar Chart</span>
                </div>
                <div class="tool-item" draggable="true" data-type="line-chart">
                    <i class="fas fa-chart-line"></i>
                    <span>Line Chart</span>
                </div>
                <div class="tool-item" draggable="true" data-type="pie-chart">
                    <i class="fas fa-chart-pie"></i>
                    <span>Pie Chart</span>
                </div>
            </div>
            
            <!-- Math & Science -->
            <div class="tool-category">
                <h6>Math & Science</h6>
                <div class="tool-item" draggable="true" data-type="latex">
                    <i class="fas fa-square-root-alt"></i>
                    <span>LaTeX Formula</span>
                </div>
                <div class="tool-item" draggable="true" data-type="equation">
                    <i class="fas fa-calculator"></i>
                    <span>Equation</span>
                </div>
            </div>
            
            <!-- Questions -->
            <div class="tool-category">
                <h6>Questions</h6>
                <div class="tool-item" draggable="true" data-type="question">
                    <i class="fas fa-question-circle"></i>
                    <span>Main Question</span>
                </div>
                <div class="tool-item" draggable="true" data-type="sub-question">
                    <i class="fas fa-list-ol"></i>
                    <span>Sub Question</span>
                </div>
                <div class="tool-item" draggable="true" data-type="answer-area">
                    <i class="fas fa-edit"></i>
                    <span>Answer Area</span>
                </div>
            </div>
        </div>

        <!-- Main Canvas Area -->
        <div class="canvas-container">
            <div class="canvas-header">
                <h5 class="canvas-title">Complex Quiz Builder</h5>
                <div class="canvas-actions">
                    <button class="btn-canvas btn-secondary-canvas" onclick="testDragDrop()" title="Test drag and drop functionality">
                        <i class="fas fa-bug me-1"></i>Test
                    </button>
                    <button class="btn-canvas btn-secondary-canvas" onclick="clearCanvas()">
                        <i class="fas fa-trash me-1"></i>Clear
                    </button>
                    <button class="btn-canvas btn-secondary-canvas" onclick="previewQuiz()">
                        <i class="fas fa-eye me-1"></i>Preview
                    </button>
                    <button class="btn-canvas btn-info-canvas" onclick="openQuizSettings()">
                        <i class="fas fa-cog me-1"></i>Quiz Settings
                    </button>
                    <button class="btn-canvas btn-primary-canvas" onclick="saveQuiz()">
                        <i class="fas fa-save me-1"></i>Save Quiz
                    </button>
                </div>
            </div>

            <div class="canvas-workspace">
                <div class="canvas-area" id="canvas">
                    <div class="canvas-placeholder">
                        <i class="fas fa-mouse-pointer"></i>
                        <h5>Start Building Your Quiz</h5>
                        <p>Drag and drop elements from the sidebar to create your complex quiz</p>
                        <p><small><strong>Tip:</strong> You can also click on any tool in the sidebar to add it to the center of the canvas</small></p>
                        <div style="margin-top: 15px;">
                            <button class="btn btn-primary btn-sm" onclick="addElementToCanvas('textbox')">
                                <i class="fas fa-font me-1"></i>Add Text Box
                            </button>
                            <button class="btn btn-outline-primary btn-sm ms-2" onclick="addElementToCanvas('question')">
                                <i class="fas fa-question-circle me-1"></i>Add Question
                            </button>
                        </div>
                        <div style="margin-top: 10px;">
                            <small class="text-muted">Quick Shapes:</small><br>
                            <button class="btn btn-outline-secondary btn-sm me-1 mt-1" onclick="addElementToCanvas('circle')" title="Add Circle">
                                <i class="fas fa-circle"></i>
                            </button>
                            <button class="btn btn-outline-secondary btn-sm me-1 mt-1" onclick="addElementToCanvas('square')" title="Add Square">
                                <i class="fas fa-square"></i>
                            </button>
                            <button class="btn btn-outline-secondary btn-sm me-1 mt-1" onclick="addElementToCanvas('rectangle')" title="Add Rectangle">
                                <i class="far fa-square"></i>
                            </button>
                            <button class="btn btn-outline-secondary btn-sm me-1 mt-1" onclick="addElementToCanvas('rhombus')" title="Add Rhombus">
                                <i class="fas fa-gem"></i>
                            </button>
                            <button class="btn btn-outline-secondary btn-sm me-1 mt-1" onclick="addElementToCanvas('triangle')" title="Add Triangle">
                                <i class="fas fa-play" style="transform: rotate(90deg);"></i>
                            </button>
                            <button class="btn btn-outline-secondary btn-sm me-1 mt-1" onclick="addElementToCanvas('line')" title="Add Line">
                                <i class="fas fa-minus"></i>
                            </button>
                            <button class="btn btn-outline-secondary btn-sm me-1 mt-1" onclick="addElementToCanvas('cube')" title="Add Cube">
                                <i class="fas fa-cube"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Properties Panel -->
        <div class="properties-panel">
            <div class="properties-header">
                <h5><i class="fas fa-cog me-2"></i>Element Properties</h5>
            </div>
            <div class="properties-content" id="properties-content">
                <div class="text-center text-muted">
                    <i class="fas fa-hand-pointer fa-2x mb-3"></i>
                    <p>Select an element to edit its properties</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Quiz Settings Modal -->
    <div class="modal fade" id="quizSettingsModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Quiz Settings</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="quizTitle" class="form-label">Quiz Title *</label>
                                <input type="text" class="form-control" id="quizTitle" required>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="quizGrade" class="form-label">Grade Level *</label>
                                <select class="form-select" id="quizGrade" required>
                                    <option value="">Select Grade</option>
                                    <option value="1st grade">1st Grade</option>
                                    <option value="2nd grade">2nd Grade</option>
                                    <option value="3rd grade">3rd Grade</option>
                                    <option value="4th grade">4th Grade</option>
                                    <option value="5th grade">5th Grade</option>
                                    <option value="6th grade">6th Grade</option>
                                    <option value="7th grade">7th Grade</option>
                                    <option value="8th grade">8th Grade</option>
                                    <option value="9th grade">9th Grade</option>
                                    <option value="10th grade">10th Grade</option>
                                    <option value="11th grade">11th Grade</option>
                                    <option value="12th grade">12th Grade</option>
                                    <option value="Young Adult Education">Young Adult Education</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="quizSubject" class="form-label">Subject *</label>
                                <select class="form-select" id="quizSubject" required>
                                    <option value="">Select Subject</option>
                                    <option value="English">English</option>
                                    <option value="Science">Science</option>
                                    <option value="Math">Math</option>
                                    <option value="Python">Python</option>
                                    <option value="Tableau">Tableau</option>
                                    <option value="Power BI">Power BI</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="quizType" class="form-label">Quiz Type *</label>
                                <select class="form-select" id="quizType" required>
                                    <option value="regular">Regular Quiz</option>
                                    <option value="competitive">Competitive Quiz</option>
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="quizDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="quizDescription" rows="3" placeholder="Enter quiz description..."></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" onclick="saveQuizSettings()">Save Settings</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Global variables
        let selectedElement = null;
        let elementCounter = 0;
        let quizElements = [];
        let quizSettings = {
            title: '',
            description: '',
            gradeLevel: '',
            subject: '',
            quizType: 'regular'
        };



        // Error handler
        window.addEventListener('error', function(e) {
            console.error('JavaScript Error:', e.error);
            console.error('Error details:', e.message, 'at', e.filename, ':', e.lineno);
        });

        // Load MathJax dynamically when needed
        function loadMathJax() {
            if (window.MathJax) return Promise.resolve();

            return new Promise((resolve, reject) => {
                window.MathJax = {
                    tex: {
                        inlineMath: [['$', '$'], ['\\(', '\\)']],
                        displayMath: [['$$', '$$'], ['\\[', '\\]']]
                    },
                    startup: {
                        ready: () => {
                            MathJax.startup.defaultReady();
                            resolve();
                        }
                    }
                };

                const script = document.createElement('script');
                script.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
                script.async = true;
                script.onerror = reject;
                document.head.appendChild(script);
            });
        }

        // Initialize the quiz builder
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Initializing quiz builder...');

            try {
                // Wait a bit for all elements to be ready
                setTimeout(() => {
                    initializeDragAndDrop();
                    setupCanvasEvents();

                    // Show quiz settings modal on load
                    const modal = new bootstrap.Modal(document.getElementById('quizSettingsModal'));
                    modal.show();

                    // Test that functions are available
                    console.log('Functions available:', {
                        addElementToCanvas: typeof window.addElementToCanvas,
                        testDragDrop: typeof window.testDragDrop,
                        clearCanvas: typeof window.clearCanvas,
                        saveQuiz: typeof window.saveQuiz
                    });

                    console.log('Quiz builder initialized successfully');
                }, 100);
            } catch (error) {
                console.error('Error initializing quiz builder:', error);
                alert('Error initializing quiz builder. Please refresh the page.');
            }
        });

        // Initialize drag and drop functionality
        function initializeDragAndDrop() {
            const toolItems = document.querySelectorAll('.tool-item');
            const canvas = document.getElementById('canvas');

            console.log('Found tool items:', toolItems.length);
            console.log('Canvas element:', canvas);

            // Add drag start event to tool items
            toolItems.forEach((item, index) => {
                console.log(`Setting up tool item ${index}:`, item.dataset.type);

                // Ensure the item is draggable
                item.draggable = true;

                // Add event listeners
                item.addEventListener('dragstart', handleDragStart);

                // Add visual feedback
                item.addEventListener('dragend', function() {
                    console.log('Drag ended for:', item.dataset.type);
                });

                // Add click handler for mobile/touch devices
                item.addEventListener('click', function(e) {
                    if (e.detail === 2) { // Double click
                        console.log('Double clicked tool:', item.dataset.type);
                        // Create element in center of canvas for double-click
                        createElement(item.dataset.type, 400, 300);
                    }
                });
            });

            if (canvas) {
                // Add drop events to canvas
                canvas.addEventListener('dragover', handleDragOver);
                canvas.addEventListener('drop', handleDrop);
                canvas.addEventListener('dragenter', handleDragEnter);
                canvas.addEventListener('dragleave', handleDragLeave);

                console.log('Canvas drop events attached');
            } else {
                console.error('Canvas element not found!');
            }
        }

        function handleDragStart(e) {
            console.log('Drag start:', e.target.dataset.type);

            // Get the tool item element (might be the span or i inside)
            let toolItem = e.target;
            if (!toolItem.dataset.type) {
                toolItem = toolItem.closest('.tool-item');
            }

            if (toolItem && toolItem.dataset.type) {
                e.dataTransfer.setData('text/plain', toolItem.dataset.type);
                e.dataTransfer.effectAllowed = 'copy';
                console.log('Setting data type:', toolItem.dataset.type);
            } else {
                console.error('No data type found');
            }
        }

        function handleDragOver(e) {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'copy';
        }

        function handleDragEnter(e) {
            e.preventDefault();
            const canvas = document.getElementById('canvas');
            canvas.classList.add('drag-over');
        }

        function handleDragLeave(e) {
            const canvas = document.getElementById('canvas');
            const rect = canvas.getBoundingClientRect();

            // Check if we're leaving the canvas area
            if (e.clientX < rect.left || e.clientX > rect.right ||
                e.clientY < rect.top || e.clientY > rect.bottom) {
                canvas.classList.remove('drag-over');
            }
        }

        function handleDrop(e) {
            e.preventDefault();
            console.log('Drop event triggered');

            const canvas = document.getElementById('canvas');
            canvas.classList.remove('drag-over');

            const elementType = e.dataTransfer.getData('text/plain');
            console.log('Dropped element type:', elementType);

            if (!elementType) {
                console.error('No element type in drop data');
                return;
            }

            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            console.log('Drop position:', x, y);
            createElement(elementType, x, y);
        }

        // Setup canvas events
        function setupCanvasEvents() {
            const canvas = document.getElementById('canvas');

            // Deselect elements when clicking on canvas
            canvas.addEventListener('click', function(e) {
                console.log('Canvas clicked:', e.target);
                if (e.target === canvas || e.target.classList.contains('canvas-placeholder')) {
                    deselectAllElements();
                }
            });

            // Make placeholder clickable to show instructions
            const placeholder = document.querySelector('.canvas-placeholder');
            if (placeholder) {
                placeholder.addEventListener('click', function(e) {
                    e.stopPropagation();
                    showCanvasInstructions();
                });

                // Make placeholder more interactive
                placeholder.style.cursor = 'pointer';
                placeholder.style.transition = 'all 0.3s ease';

                placeholder.addEventListener('mouseenter', function() {
                    this.style.transform = 'translate(-50%, -50%) scale(1.05)';
                    this.style.opacity = '0.8';
                });

                placeholder.addEventListener('mouseleave', function() {
                    this.style.transform = 'translate(-50%, -50%) scale(1)';
                    this.style.opacity = '1';
                });
            }
        }

        // Show canvas instructions
        function showCanvasInstructions() {
            alert('🎨 How to use the Quiz Builder:\n\n' +
                '1. 📋 Drag any tool from the left sidebar\n' +
                '2. 🎯 Drop it anywhere on this canvas\n' +
                '3. 🖱️ Click on elements to select and edit them\n' +
                '4. ⚙️ Use the properties panel on the right to customize\n' +
                '5. 🔄 Drag elements around to reposition them\n' +
                '6. 🗑️ Use the delete button to remove elements\n\n' +
                'Try dragging a "Text Box" or "Question" to get started!');
        }

        // Fallback method to add elements by clicking (for touch devices or if drag fails)
        function addElementToCanvas(elementType) {
            console.log('Adding element via click:', elementType);
            // Add element to center of canvas
            createElement(elementType, 400, 300);
        }

        // Make this function globally available immediately
        window.addElementToCanvas = addElementToCanvas;

        // Test function to verify drag and drop is working
        function testDragDrop() {
            try {
                console.log('Testing drag and drop functionality...');

                // Test creating different elements including shapes
                createElement('textbox', 100, 100);
                createElement('question', 300, 200);
                createElement('circle', 500, 150);
                createElement('triangle', 150, 300);
                createElement('cube', 400, 350);

                console.log('Test elements created. Current elements:', quizElements.length);

                alert('Test completed! Created ' + quizElements.length + ' elements including geometric shapes on the canvas. Check the console for detailed logs.');
            } catch (error) {
                console.error('Error in test function:', error);
                alert('Test failed: ' + error.message);
            }
        }

        // Make this function globally available immediately
        window.testDragDrop = testDragDrop;

        // Create new element on canvas
        function createElement(type, x, y) {
            console.log('Creating element:', type, 'at position:', x, y);

            if (!type) {
                console.error('No element type provided');
                alert('Error: No element type specified');
                return;
            }

            elementCounter++;
            const elementId = `element-${elementCounter}`;

            // Adjust dimensions based on element type
            let width = 200, height = 100;
            switch(type) {
                case 'question':
                case 'sub-question':
                    width = 400;
                    height = 120;
                    break;
                case 'table':
                    width = 300;
                    height = 150;
                    break;
                case 'latex':
                    width = 250;
                    height = 80;
                    break;
                case 'answer-area':
                    width = 350;
                    height = 100;
                    break;
                // 2D Shapes
                case 'line':
                    width = 200;
                    height = 20;
                    break;
                case 'triangle':
                case 'square':
                case 'circle':
                case 'pentagon':
                case 'hexagon':
                    width = 150;
                    height = 150;
                    break;
                case 'rectangle':
                case 'rhombus':
                case 'parallelogram':
                    width = 200;
                    height = 120;
                    break;
                // 3D Shapes
                case 'cube':
                case 'sphere':
                    width = 150;
                    height = 150;
                    break;
                case 'cuboid':
                    width = 200;
                    height = 120;
                    break;
                // Charts
                case 'bar-chart':
                case 'line-chart':
                case 'pie-chart':
                    width = 300;
                    height = 200;
                    break;
            }

            const element = {
                id: elementId,
                type: type,
                x: Math.max(0, x - width/2), // Center the element on drop point
                y: Math.max(0, y - height/2),
                width: width,
                height: height,
                content: '',
                style: {
                    fontSize: '14px',
                    fontFamily: 'Inter',
                    color: '#1e293b',
                    backgroundColor: '#ffffff',
                    border: '1px solid #e2e8f0',
                    borderRadius: '6px',
                    padding: '10px'
                }
            };

            console.log('Element created:', element);

            quizElements.push(element);
            renderElement(element);
            selectElement(elementId);

            // Hide placeholder if this is the first element
            if (quizElements.length === 1) {
                const placeholder = document.querySelector('.canvas-placeholder');
                if (placeholder) {
                    placeholder.style.display = 'none';
                }
            }

            console.log('Total elements:', quizElements.length);
        }

        // Render element on canvas
        function renderElement(element) {
            console.log('Rendering element:', element.id, element.type);

            const canvas = document.getElementById('canvas');
            if (!canvas) {
                console.error('Canvas not found!');
                return;
            }

            // Check if element already exists
            const existingElement = document.getElementById(element.id);
            if (existingElement) {
                console.log('Element already exists, removing old version');
                existingElement.remove();
            }

            const elementDiv = document.createElement('div');
            elementDiv.className = 'canvas-element';
            elementDiv.id = element.id;
            elementDiv.style.left = element.x + 'px';
            elementDiv.style.top = element.y + 'px';
            elementDiv.style.width = element.width + 'px';
            elementDiv.style.height = element.height + 'px';
            elementDiv.style.position = 'absolute';
            elementDiv.style.zIndex = '10';

            // Apply styles
            Object.assign(elementDiv.style, element.style);

            // Add content based on type
            try {
                elementDiv.innerHTML = getElementContent(element);
            } catch (error) {
                console.error('Error generating content for element:', error);
                elementDiv.innerHTML = `<div style="padding: 10px; color: red;">Error loading ${element.type}</div>`;
            }

            // Add controls
            const controls = document.createElement('div');
            controls.className = 'element-controls';
            controls.innerHTML = `
                <button class="control-btn" onclick="duplicateElement('${element.id}')" title="Duplicate">
                    <i class="fas fa-copy"></i>
                </button>
                <button class="control-btn delete" onclick="deleteElement('${element.id}')" title="Delete">
                    <i class="fas fa-trash"></i>
                </button>
            `;
            elementDiv.appendChild(controls);

            // Add click event
            elementDiv.addEventListener('click', (e) => {
                e.stopPropagation();
                console.log('Element clicked:', element.id);
                selectElement(element.id);
            });

            // Make draggable within canvas
            makeDraggable(elementDiv);

            canvas.appendChild(elementDiv);
            console.log('Element rendered successfully:', element.id);

            // Special handling for LaTeX elements
            if (element.type === 'latex') {
                loadMathJax().then(() => {
                    if (window.MathJax && MathJax.typesetPromise) {
                        MathJax.typesetPromise([elementDiv]).catch(console.error);
                    }
                }).catch(console.error);
            }
        }

        // Get content for different element types
        function getElementContent(element) {
            switch(element.type) {
                case 'textbox':
                    return `<div contenteditable="true" style="outline: none; width: 100%; height: 100%;">${element.content || 'Click to edit text...'}</div>`;
                case 'image':
                    if (element.content && element.content.startsWith('data:image')) {
                        const objectFit = element.objectFit || 'contain';
                        const objectPosition = element.objectPosition || 'center';
                        return `<div style="position: relative; width: 100%; height: 100%; overflow: hidden; border-radius: 4px;">
                            <img src="${element.content}" style="width: 100%; height: 100%; object-fit: ${objectFit}; object-position: ${objectPosition}; border-radius: 4px; display: block;" onclick="event.stopPropagation(); triggerImageUpload('${element.id}')">
                            <div style="position: absolute; top: 5px; right: 5px; background: rgba(0,0,0,0.7); color: white; padding: 2px 6px; border-radius: 3px; font-size: 10px; cursor: pointer;" onclick="event.stopPropagation(); triggerImageUpload('${element.id}')">
                                <i class="fas fa-edit"></i> Change
                            </div>
                        </div>`;
                    } else {
                        return `<div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #f8fafc; border: 2px dashed #cbd5e1; cursor: pointer; overflow: hidden;" onclick="event.stopPropagation(); triggerImageUpload('${element.id}')">
                            <div style="text-align: center; color: #64748b;">
                                <i class="fas fa-image fa-2x mb-2"></i><br>
                                <small>Click to upload image</small>
                            </div>
                        </div>`;
                    }
                case 'table':
                    return `<table style="width: 100%; border-collapse: collapse;">
                        <tr>
                            <td contenteditable="true" style="border: 1px solid #e2e8f0; padding: 8px; outline: none;" onclick="event.stopPropagation()">Cell 1</td>
                            <td contenteditable="true" style="border: 1px solid #e2e8f0; padding: 8px; outline: none;" onclick="event.stopPropagation()">Cell 2</td>
                        </tr>
                        <tr>
                            <td contenteditable="true" style="border: 1px solid #e2e8f0; padding: 8px; outline: none;" onclick="event.stopPropagation()">Cell 3</td>
                            <td contenteditable="true" style="border: 1px solid #e2e8f0; padding: 8px; outline: none;" onclick="event.stopPropagation()">Cell 4</td>
                        </tr>
                    </table>`;
                case 'question':
                    return `<div style="padding: 15px; background: #f0f9ff; border-left: 4px solid #0ea5e9;">
                        <strong>Question ${quizElements.filter(e => e.type === 'question').length}:</strong>
                        <div contenteditable="true" style="outline: none; margin-top: 8px;">${element.content || 'Enter your question here...'}</div>
                    </div>`;
                case 'sub-question':
                    return `<div style="padding: 12px; background: #fefce8; border-left: 4px solid #eab308; margin-left: 20px;">
                        <strong>Sub-question:</strong>
                        <div contenteditable="true" style="outline: none; margin-top: 8px;">${element.content || 'Enter sub-question here...'}</div>
                    </div>`;
                case 'latex':
                    return `<div style="padding: 15px; background: #f8fafc; border: 1px solid #e2e8f0; text-align: center;">
                        <div id="latex-${element.id}" style="font-size: 16px;">$$${element.content || 'x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}'}$$</div>
                        <small style="color: #64748b;">LaTeX Formula</small>
                    </div>`;
                case 'bar-chart':
                case 'line-chart':
                case 'pie-chart':
                    // Render chart and schedule Chart.js initialization
                    setTimeout(() => renderChart(element), 100);
                    return `<div style="padding: 15px; background: #f8fafc; border: 1px solid #e2e8f0; height: 100%; box-sizing: border-box;">
                        <canvas id="chart-${element.id}" style="width: 100%; height: calc(100% - 40px);"></canvas>
                        <small style="color: #64748b; display: block; text-align: center; margin-top: 8px;">${element.type.replace('-', ' ').toUpperCase()}</small>
                    </div>`;
                case 'answer-area':
                    return `<div style="padding: 15px; background: #f0fdf4; border: 2px dashed #22c55e; border-radius: 8px;">
                        <div style="color: #16a34a; font-weight: 600; margin-bottom: 8px;">
                            <i class="fas fa-edit me-2"></i>Answer Area
                        </div>
                        <textarea style="width: 100%; height: 60px; border: 1px solid #e2e8f0; border-radius: 4px; padding: 8px; resize: vertical;" placeholder="Students will write their answer here..."></textarea>
                    </div>`;

                // 2D Geometric Shapes
                case 'line':
                    const lineLength = element.shapeLength || 180;
                    const lineViewBox = `0 0 ${lineLength + 20} 20`;
                    const lineX2 = lineLength + 10;
                    return `<svg width="100%" height="100%" viewBox="${lineViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <line x1="10" y1="10" x2="${lineX2}" y2="10"
                              stroke="${element.strokeColor || '#3b82f6'}"
                              stroke-width="${element.strokeWidth || 2}"
                              ${element.strokeDasharray ? `stroke-dasharray="${element.strokeDasharray}"` : ''} />
                        <text x="${(lineLength + 20) / 2}" y="18" text-anchor="middle" font-size="10" fill="#64748b">Line (${lineLength}px)</text>
                    </svg>`;

                case 'triangle':
                    const baseWidth = element.shapeBaseWidth || 110;
                    const triangleHeight = element.shapeHeight || 110;
                    const triangleViewBox = `0 0 ${baseWidth + 20} ${triangleHeight + 30}`;
                    const topX = (baseWidth + 20) / 2;
                    const topY = 10;
                    const leftX = 10;
                    const rightX = baseWidth + 10;
                    const bottomY = triangleHeight + 10;
                    return `<svg width="100%" height="100%" viewBox="${triangleViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <polygon points="${topX},${topY} ${leftX},${bottomY} ${rightX},${bottomY}"
                                fill="${element.fillColor || '#dbeafe'}"
                                stroke="${element.strokeColor || '#3b82f6'}"
                                stroke-width="${element.strokeWidth || 2}" />
                        <text x="${topX}" y="${triangleHeight + 25}" text-anchor="middle" font-size="10" fill="#64748b">Triangle (${baseWidth}×${triangleHeight}px)</text>
                    </svg>`;

                case 'square':
                    const sideLength = element.shapeSideLength || 100;
                    const squareViewBox = `0 0 ${sideLength + 20} ${sideLength + 30}`;
                    const squareX = 10;
                    const squareY = 10;
                    return `<svg width="100%" height="100%" viewBox="${squareViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <rect x="${squareX}" y="${squareY}" width="${sideLength}" height="${sideLength}"
                              fill="${element.fillColor || '#dbeafe'}"
                              stroke="${element.strokeColor || '#3b82f6'}"
                              stroke-width="${element.strokeWidth || 2}" />
                        <text x="${(sideLength + 20) / 2}" y="${sideLength + 25}" text-anchor="middle" font-size="10" fill="#64748b">Square (${sideLength}×${sideLength}px)</text>
                    </svg>`;

                case 'rectangle':
                    const rectWidth = element.shapeWidth || 160;
                    const rectHeight = element.shapeHeight || 100;
                    const rectViewBox = `0 0 ${rectWidth + 20} ${rectHeight + 30}`;
                    const rectX = 10;
                    const rectY = 10;
                    return `<svg width="100%" height="100%" viewBox="${rectViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <rect x="${rectX}" y="${rectY}" width="${rectWidth}" height="${rectHeight}"
                              fill="${element.fillColor || '#dbeafe'}"
                              stroke="${element.strokeColor || '#3b82f6'}"
                              stroke-width="${element.strokeWidth || 2}" />
                        <text x="${(rectWidth + 20) / 2}" y="${rectHeight + 25}" text-anchor="middle" font-size="10" fill="#64748b">Rectangle (${rectWidth}×${rectHeight}px)</text>
                    </svg>`;

                case 'rhombus':
                    const rhombusWidth = element.shapeWidth || 140;
                    const rhombusHeight = element.shapeHeight || 100;
                    const rhombusViewBox = `0 0 ${rhombusWidth + 20} ${rhombusHeight + 30}`;
                    const rhombusCenterX = (rhombusWidth + 20) / 2;
                    const rhombusCenterY = rhombusHeight / 2 + 10;
                    const rhombusHalfWidth = rhombusWidth / 2;
                    const rhombusHalfHeight = rhombusHeight / 2;
                    // Calculate rhombus points (diamond shape)
                    const rhombusTop = `${rhombusCenterX},${rhombusCenterY - rhombusHalfHeight}`;
                    const rhombusRight = `${rhombusCenterX + rhombusHalfWidth},${rhombusCenterY}`;
                    const rhombusBottom = `${rhombusCenterX},${rhombusCenterY + rhombusHalfHeight}`;
                    const rhombusLeft = `${rhombusCenterX - rhombusHalfWidth},${rhombusCenterY}`;
                    return `<svg width="100%" height="100%" viewBox="${rhombusViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <polygon points="${rhombusTop} ${rhombusRight} ${rhombusBottom} ${rhombusLeft}"
                                fill="${element.fillColor || '#dbeafe'}"
                                stroke="${element.strokeColor || '#3b82f6'}"
                                stroke-width="${element.strokeWidth || 2}" />
                        <text x="${rhombusCenterX}" y="${rhombusHeight + 25}" text-anchor="middle" font-size="10" fill="#64748b">Rhombus (${rhombusWidth}×${rhombusHeight}px)</text>
                    </svg>`;

                case 'parallelogram':
                    const paraWidth = element.shapeWidth || 160;
                    const paraHeight = element.shapeHeight || 80;
                    const paraViewBox = `0 0 ${paraWidth + 40} ${paraHeight + 30}`;
                    const skew = 20; // Fixed skew amount for parallelogram effect
                    const topLeft = `${skew + 10},10`;
                    const topRight = `${paraWidth + skew + 10},10`;
                    const bottomRight = `${paraWidth + 10},${paraHeight + 10}`;
                    const bottomLeft = `10,${paraHeight + 10}`;
                    return `<svg width="100%" height="100%" viewBox="${paraViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <polygon points="${topLeft} ${topRight} ${bottomRight} ${bottomLeft}"
                                fill="${element.fillColor || '#dbeafe'}"
                                stroke="${element.strokeColor || '#3b82f6'}"
                                stroke-width="${element.strokeWidth || 2}" />
                        <text x="${(paraWidth + 40) / 2}" y="${paraHeight + 25}" text-anchor="middle" font-size="10" fill="#64748b">Parallelogram (${paraWidth}×${paraHeight}px)</text>
                    </svg>`;

                case 'circle':
                    const diameter = element.shapeDiameter || 100;
                    const radius = diameter / 2;
                    const circleViewBox = `0 0 ${diameter + 20} ${diameter + 30}`;
                    const circleCx = (diameter + 20) / 2;
                    const circleCy = radius + 10;
                    return `<svg width="100%" height="100%" viewBox="${circleViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <circle cx="${circleCx}" cy="${circleCy}" r="${radius}"
                               fill="${element.fillColor || '#dbeafe'}"
                               stroke="${element.strokeColor || '#3b82f6'}"
                               stroke-width="${element.strokeWidth || 2}" />
                        <text x="${circleCx}" y="${diameter + 25}" text-anchor="middle" font-size="10" fill="#64748b">Circle (⌀${diameter}px)</text>
                    </svg>`;

                case 'pentagon':
                    const pentSize = element.shapeSize || 90;
                    const pentViewBox = `0 0 ${pentSize + 20} ${pentSize + 30}`;
                    const pentCenterX = (pentSize + 20) / 2;
                    const pentCenterY = (pentSize + 20) / 2;
                    const pentRadius = pentSize / 2;
                    // Calculate pentagon points
                    const pentPoints = [];
                    for (let i = 0; i < 5; i++) {
                        const angle = (i * 2 * Math.PI / 5) - (Math.PI / 2);
                        const x = pentCenterX + pentRadius * Math.cos(angle);
                        const y = pentCenterY + pentRadius * Math.sin(angle);
                        pentPoints.push(`${x.toFixed(1)},${y.toFixed(1)}`);
                    }
                    return `<svg width="100%" height="100%" viewBox="${pentViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <polygon points="${pentPoints.join(' ')}"
                                fill="${element.fillColor || '#dbeafe'}"
                                stroke="${element.strokeColor || '#3b82f6'}"
                                stroke-width="${element.strokeWidth || 2}" />
                        <text x="${pentCenterX}" y="${pentSize + 25}" text-anchor="middle" font-size="10" fill="#64748b">Pentagon (${pentSize}px)</text>
                    </svg>`;

                case 'hexagon':
                    const hexSize = element.shapeSize || 90;
                    const hexViewBox = `0 0 ${hexSize + 20} ${hexSize + 30}`;
                    const hexCenterX = (hexSize + 20) / 2;
                    const hexCenterY = (hexSize + 20) / 2;
                    const hexRadius = hexSize / 2;
                    // Calculate hexagon points
                    const hexPoints = [];
                    for (let i = 0; i < 6; i++) {
                        const angle = (i * 2 * Math.PI / 6) - (Math.PI / 2);
                        const x = hexCenterX + hexRadius * Math.cos(angle);
                        const y = hexCenterY + hexRadius * Math.sin(angle);
                        hexPoints.push(`${x.toFixed(1)},${y.toFixed(1)}`);
                    }
                    return `<svg width="100%" height="100%" viewBox="${hexViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <polygon points="${hexPoints.join(' ')}"
                                fill="${element.fillColor || '#dbeafe'}"
                                stroke="${element.strokeColor || '#3b82f6'}"
                                stroke-width="${element.strokeWidth || 2}" />
                        <text x="${hexCenterX}" y="${hexSize + 25}" text-anchor="middle" font-size="10" fill="#64748b">Hexagon (${hexSize}px)</text>
                    </svg>`;

                // 3D Shapes
                case 'cube':
                    const cubeSize = element.shapeSize || 80;
                    const cubeViewBox = `0 0 ${cubeSize + 40} ${cubeSize + 50}`;
                    const cubeDepth = cubeSize * 0.3; // 3D depth effect
                    const cubeFrontX = 20;
                    const cubeFrontY = cubeDepth + 20;
                    return `<svg width="100%" height="100%" viewBox="${cubeViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <!-- Front face -->
                        <rect x="${cubeFrontX}" y="${cubeFrontY}" width="${cubeSize}" height="${cubeSize}"
                              fill="${element.fillColor || '#dbeafe'}"
                              stroke="${element.strokeColor || '#3b82f6'}"
                              stroke-width="${element.strokeWidth || 2}" />
                        <!-- Top face -->
                        <polygon points="${cubeFrontX},${cubeFrontY} ${cubeFrontX + cubeDepth},${cubeFrontY - cubeDepth} ${cubeFrontX + cubeSize + cubeDepth},${cubeFrontY - cubeDepth} ${cubeFrontX + cubeSize},${cubeFrontY}"
                                fill="${element.fillColor || '#bfdbfe'}"
                                stroke="${element.strokeColor || '#3b82f6'}"
                                stroke-width="${element.strokeWidth || 2}" />
                        <!-- Right face -->
                        <polygon points="${cubeFrontX + cubeSize},${cubeFrontY} ${cubeFrontX + cubeSize + cubeDepth},${cubeFrontY - cubeDepth} ${cubeFrontX + cubeSize + cubeDepth},${cubeFrontY + cubeSize - cubeDepth} ${cubeFrontX + cubeSize},${cubeFrontY + cubeSize}"
                                fill="${element.fillColor || '#93c5fd'}"
                                stroke="${element.strokeColor || '#3b82f6'}"
                                stroke-width="${element.strokeWidth || 2}" />
                        <text x="${(cubeSize + 40) / 2}" y="${cubeSize + cubeDepth + 35}" text-anchor="middle" font-size="10" fill="#64748b">Cube (${cubeSize}×${cubeSize}×${cubeSize}px)</text>
                    </svg>`;

                case 'sphere':
                    const sphereSize = element.shapeSize || 80;
                    const sphereRadius = sphereSize / 2;
                    const sphereViewBox = `0 0 ${sphereSize + 20} ${sphereSize + 30}`;
                    const sphereCx = (sphereSize + 20) / 2;
                    const sphereCy = sphereRadius + 10;
                    return `<svg width="100%" height="100%" viewBox="${sphereViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <defs>
                            <radialGradient id="sphereGradient-${element.id}" cx="0.3" cy="0.3">
                                <stop offset="0%" stop-color="${element.fillColor || '#ffffff'}" />
                                <stop offset="100%" stop-color="${element.fillColor || '#3b82f6'}" />
                            </radialGradient>
                        </defs>
                        <circle cx="${sphereCx}" cy="${sphereCy}" r="${sphereRadius}"
                               fill="url(#sphereGradient-${element.id})"
                               stroke="${element.strokeColor || '#3b82f6'}"
                               stroke-width="${element.strokeWidth || 2}" />
                        <text x="${sphereCx}" y="${sphereSize + 25}" text-anchor="middle" font-size="10" fill="#64748b">Sphere (⌀${sphereSize}px)</text>
                    </svg>`;

                case 'cuboid':
                    const cuboidWidth = element.shapeWidth || 120;
                    const cuboidHeight = element.shapeHeight || 80;
                    const cuboidDepth = element.shapeDepth || 60;
                    const cuboidViewBox = `0 0 ${cuboidWidth + cuboidDepth + 20} ${cuboidHeight + cuboidDepth + 30}`;
                    const cuboidFrontX = 10;
                    const cuboidFrontY = cuboidDepth + 10;
                    return `<svg width="100%" height="100%" viewBox="${cuboidViewBox}" style="border: 1px solid #e2e8f0; background: #ffffff;">
                        <!-- Front face -->
                        <rect x="${cuboidFrontX}" y="${cuboidFrontY}" width="${cuboidWidth}" height="${cuboidHeight}"
                              fill="${element.fillColor || '#dbeafe'}"
                              stroke="${element.strokeColor || '#3b82f6'}"
                              stroke-width="${element.strokeWidth || 2}" />
                        <!-- Top face -->
                        <polygon points="${cuboidFrontX},${cuboidFrontY} ${cuboidFrontX + cuboidDepth},${cuboidFrontY - cuboidDepth} ${cuboidFrontX + cuboidWidth + cuboidDepth},${cuboidFrontY - cuboidDepth} ${cuboidFrontX + cuboidWidth},${cuboidFrontY}"
                                fill="${element.fillColor || '#bfdbfe'}"
                                stroke="${element.strokeColor || '#3b82f6'}"
                                stroke-width="${element.strokeWidth || 2}" />
                        <!-- Right face -->
                        <polygon points="${cuboidFrontX + cuboidWidth},${cuboidFrontY} ${cuboidFrontX + cuboidWidth + cuboidDepth},${cuboidFrontY - cuboidDepth} ${cuboidFrontX + cuboidWidth + cuboidDepth},${cuboidFrontY + cuboidHeight - cuboidDepth} ${cuboidFrontX + cuboidWidth},${cuboidFrontY + cuboidHeight}"
                                fill="${element.fillColor || '#93c5fd'}"
                                stroke="${element.strokeColor || '#3b82f6'}"
                                stroke-width="${element.strokeWidth || 2}" />
                        <text x="${(cuboidWidth + cuboidDepth + 20) / 2}" y="${cuboidHeight + cuboidDepth + 25}" text-anchor="middle" font-size="10" fill="#64748b">Cuboid (${cuboidWidth}×${cuboidHeight}×${cuboidDepth}px)</text>
                    </svg>`;

                default:
                    return `<div style="padding: 15px; text-align: center; color: #64748b;">
                        <i class="fas fa-cube fa-2x mb-2"></i><br>
                        ${element.type.replace('-', ' ').toUpperCase()}
                    </div>`;
            }
        }

        // Make element draggable within canvas
        function makeDraggable(element) {
            let isDragging = false;
            let startX, startY, initialX, initialY;

            element.addEventListener('mousedown', function(e) {
                // Don't drag if clicking on contenteditable elements, buttons, or inputs
                if (e.target.contentEditable === 'true' ||
                    e.target.tagName === 'BUTTON' ||
                    e.target.tagName === 'INPUT' ||
                    e.target.tagName === 'TEXTAREA' ||
                    e.target.closest('button') ||
                    e.target.closest('[contenteditable="true"]')) {
                    return;
                }

                isDragging = true;
                startX = e.clientX;
                startY = e.clientY;
                initialX = parseInt(element.style.left);
                initialY = parseInt(element.style.top);

                element.style.cursor = 'grabbing';
                e.preventDefault();
            });

            document.addEventListener('mousemove', function(e) {
                if (!isDragging) return;

                const deltaX = e.clientX - startX;
                const deltaY = e.clientY - startY;

                element.style.left = (initialX + deltaX) + 'px';
                element.style.top = (initialY + deltaY) + 'px';
            });

            document.addEventListener('mouseup', function() {
                if (isDragging) {
                    isDragging = false;
                    element.style.cursor = 'move';

                    // Update element data
                    const elementData = quizElements.find(e => e.id === element.id);
                    if (elementData) {
                        elementData.x = parseInt(element.style.left);
                        elementData.y = parseInt(element.style.top);
                    }
                }
            });
        }

        // Select element
        function selectElement(elementId) {
            deselectAllElements();

            const element = document.getElementById(elementId);
            if (element) {
                element.classList.add('selected');
                selectedElement = elementId;
                showElementProperties(elementId);
            }
        }

        // Deselect all elements
        function deselectAllElements() {
            document.querySelectorAll('.canvas-element').forEach(el => {
                el.classList.remove('selected');
            });
            selectedElement = null;
            showDefaultProperties();
        }

        // Show element properties
        function showElementProperties(elementId) {
            const elementData = quizElements.find(e => e.id === elementId);
            if (!elementData) return;

            const propertiesContent = document.getElementById('properties-content');
            propertiesContent.innerHTML = `
                <div class="property-group">
                    <label>Element Type</label>
                    <input type="text" value="${elementData.type}" readonly class="form-control">
                </div>
                <div class="property-group">
                    <label>Width (px)</label>
                    <input type="number" value="${elementData.width}" onchange="updateElementProperty('${elementId}', 'width', this.value + 'px')" class="form-control">
                </div>
                <div class="property-group">
                    <label>Height (px)</label>
                    <input type="number" value="${elementData.height}" onchange="updateElementProperty('${elementId}', 'height', this.value + 'px')" class="form-control">
                </div>
                <div class="property-group">
                    <label>Background Color</label>
                    <input type="color" value="${elementData.style.backgroundColor}" onchange="updateElementStyle('${elementId}', 'backgroundColor', this.value)" class="form-control">
                </div>
                <div class="property-group">
                    <label>Border Color</label>
                    <input type="color" value="${elementData.style.border.split(' ')[2] || '#e2e8f0'}" onchange="updateElementStyle('${elementId}', 'border', '1px solid ' + this.value)" class="form-control">
                </div>
                <div class="property-group">
                    <label>Font Size</label>
                    <select onchange="updateElementStyle('${elementId}', 'fontSize', this.value)" class="form-control">
                        <option value="12px" ${elementData.style.fontSize === '12px' ? 'selected' : ''}>12px</option>
                        <option value="14px" ${elementData.style.fontSize === '14px' ? 'selected' : ''}>14px</option>
                        <option value="16px" ${elementData.style.fontSize === '16px' ? 'selected' : ''}>16px</option>
                        <option value="18px" ${elementData.style.fontSize === '18px' ? 'selected' : ''}>18px</option>
                        <option value="20px" ${elementData.style.fontSize === '20px' ? 'selected' : ''}>20px</option>
                        <option value="24px" ${elementData.style.fontSize === '24px' ? 'selected' : ''}>24px</option>
                    </select>
                </div>
                ${getTypeSpecificProperties(elementData)}
            `;
        }

        // Get type-specific properties
        function getTypeSpecificProperties(elementData) {
            switch(elementData.type) {
                case 'latex':
                    return `
                        <div class="property-group">
                            <label>LaTeX Expression</label>
                            <textarea onchange="updateLatexContent('${elementData.id}', this.value)" class="form-control" rows="3" placeholder="Enter LaTeX expression...">${elementData.content || 'x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}'}</textarea>
                            <small class="text-muted">Use LaTeX syntax (e.g., \\frac{a}{b}, \\sqrt{x}, x^2)</small>
                        </div>
                    `;
                case 'image':
                    return `
                        <div class="property-group">
                            <label>Image Upload</label>
                            <button type="button" class="btn btn-primary btn-sm w-100" onclick="triggerImageUpload('${elementData.id}')">
                                <i class="fas fa-upload me-1"></i>Choose Image
                            </button>
                            <small class="text-muted">Supported formats: JPG, PNG, GIF (max 5MB)</small>
                        </div>
                        ${elementData.content && elementData.content.startsWith('data:image') ? `
                        <div class="property-group">
                            <label>Image Fit</label>
                            <select onchange="updateImageProperty('${elementData.id}', 'objectFit', this.value)" class="form-control">
                                <option value="contain" ${(elementData.objectFit || 'contain') === 'contain' ? 'selected' : ''}>Fit to Container</option>
                                <option value="cover" ${elementData.objectFit === 'cover' ? 'selected' : ''}>Fill Container</option>
                                <option value="fill" ${elementData.objectFit === 'fill' ? 'selected' : ''}>Stretch to Fill</option>
                                <option value="scale-down" ${elementData.objectFit === 'scale-down' ? 'selected' : ''}>Scale Down</option>
                                <option value="none" ${elementData.objectFit === 'none' ? 'selected' : ''}>Original Size</option>
                            </select>
                            <small class="text-muted">How the image should fit within the container</small>
                        </div>
                        <div class="property-group">
                            <label>Image Position</label>
                            <select onchange="updateImageProperty('${elementData.id}', 'objectPosition', this.value)" class="form-control">
                                <option value="center" ${(elementData.objectPosition || 'center') === 'center' ? 'selected' : ''}>Center</option>
                                <option value="top" ${elementData.objectPosition === 'top' ? 'selected' : ''}>Top</option>
                                <option value="bottom" ${elementData.objectPosition === 'bottom' ? 'selected' : ''}>Bottom</option>
                                <option value="left" ${elementData.objectPosition === 'left' ? 'selected' : ''}>Left</option>
                                <option value="right" ${elementData.objectPosition === 'right' ? 'selected' : ''}>Right</option>
                                <option value="top left" ${elementData.objectPosition === 'top left' ? 'selected' : ''}>Top Left</option>
                                <option value="top right" ${elementData.objectPosition === 'top right' ? 'selected' : ''}>Top Right</option>
                                <option value="bottom left" ${elementData.objectPosition === 'bottom left' ? 'selected' : ''}>Bottom Left</option>
                                <option value="bottom right" ${elementData.objectPosition === 'bottom right' ? 'selected' : ''}>Bottom Right</option>
                            </select>
                            <small class="text-muted">Position of the image within the container</small>
                        </div>
                        ` : ''}
                    `;
                case 'table':
                    return `
                        <div class="property-group">
                            <label>Table Actions</label>
                            <div class="btn-group w-100 mb-2" role="group">
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addTableRow('${elementData.id}')">
                                    <i class="fas fa-plus"></i> Row
                                </button>
                                <button type="button" class="btn btn-outline-primary btn-sm" onclick="addTableColumn('${elementData.id}')">
                                    <i class="fas fa-plus"></i> Column
                                </button>
                            </div>
                            <div class="btn-group w-100" role="group">
                                <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeTableRow('${elementData.id}')">
                                    <i class="fas fa-minus"></i> Row
                                </button>
                                <button type="button" class="btn btn-outline-danger btn-sm" onclick="removeTableColumn('${elementData.id}')">
                                    <i class="fas fa-minus"></i> Column
                                </button>
                            </div>
                        </div>
                    `;

                // Shape properties
                case 'line':
                    return `
                        <div class="property-group">
                            <label>Length (px)</label>
                            <input type="number" min="10" max="500" value="${elementData.shapeLength || 180}" onchange="updateShapeDimension('${elementData.id}', 'shapeLength', this.value)" class="form-control">
                            <small class="text-muted">Length of the line</small>
                        </div>
                        <div class="property-group">
                            <label>Stroke Color</label>
                            <input type="color" value="${elementData.strokeColor || '#3b82f6'}" onchange="updateShapeProperty('${elementData.id}', 'strokeColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Width</label>
                            <input type="range" min="1" max="10" value="${elementData.strokeWidth || 2}" onchange="updateShapeProperty('${elementData.id}', 'strokeWidth', this.value)" class="form-range">
                            <small class="text-muted">Current: ${elementData.strokeWidth || 2}px</small>
                        </div>
                        <div class="property-group">
                            <label>Line Style</label>
                            <select onchange="updateShapeProperty('${elementData.id}', 'strokeDasharray', this.value)" class="form-control">
                                <option value="" ${!elementData.strokeDasharray ? 'selected' : ''}>Solid</option>
                                <option value="5,5" ${elementData.strokeDasharray === '5,5' ? 'selected' : ''}>Dashed</option>
                                <option value="2,2" ${elementData.strokeDasharray === '2,2' ? 'selected' : ''}>Dotted</option>
                                <option value="10,5,2,5" ${elementData.strokeDasharray === '10,5,2,5' ? 'selected' : ''}>Dash-Dot</option>
                            </select>
                        </div>
                    `;

                case 'circle':
                    return `
                        <div class="property-group">
                            <label>Diameter (px)</label>
                            <input type="number" min="20" max="300" value="${elementData.shapeDiameter || 100}" onchange="updateShapeDimension('${elementData.id}', 'shapeDiameter', this.value)" class="form-control">
                            <small class="text-muted">Diameter of the circle</small>
                        </div>
                        <div class="property-group">
                            <label>Fill Color</label>
                            <input type="color" value="${elementData.fillColor || '#dbeafe'}" onchange="updateShapeProperty('${elementData.id}', 'fillColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Color</label>
                            <input type="color" value="${elementData.strokeColor || '#3b82f6'}" onchange="updateShapeProperty('${elementData.id}', 'strokeColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Width</label>
                            <input type="range" min="1" max="10" value="${elementData.strokeWidth || 2}" onchange="updateShapeProperty('${elementData.id}', 'strokeWidth', this.value)" class="form-range">
                            <small class="text-muted">Current: ${elementData.strokeWidth || 2}px</small>
                        </div>
                    `;

                case 'square':
                    return `
                        <div class="property-group">
                            <label>Side Length (px)</label>
                            <input type="number" min="20" max="300" value="${elementData.shapeSideLength || 100}" onchange="updateShapeDimension('${elementData.id}', 'shapeSideLength', this.value)" class="form-control">
                            <small class="text-muted">Length of each side</small>
                        </div>
                        <div class="property-group">
                            <label>Fill Color</label>
                            <input type="color" value="${elementData.fillColor || '#dbeafe'}" onchange="updateShapeProperty('${elementData.id}', 'fillColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Color</label>
                            <input type="color" value="${elementData.strokeColor || '#3b82f6'}" onchange="updateShapeProperty('${elementData.id}', 'strokeColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Width</label>
                            <input type="range" min="1" max="10" value="${elementData.strokeWidth || 2}" onchange="updateShapeProperty('${elementData.id}', 'strokeWidth', this.value)" class="form-range">
                            <small class="text-muted">Current: ${elementData.strokeWidth || 2}px</small>
                        </div>
                    `;

                case 'rectangle':
                    return `
                        <div class="property-group">
                            <label>Width (px)</label>
                            <input type="number" min="30" max="400" value="${elementData.shapeWidth || 160}" onchange="updateShapeDimension('${elementData.id}', 'shapeWidth', this.value)" class="form-control">
                            <small class="text-muted">Width of the rectangle</small>
                        </div>
                        <div class="property-group">
                            <label>Height (px)</label>
                            <input type="number" min="20" max="300" value="${elementData.shapeHeight || 100}" onchange="updateShapeDimension('${elementData.id}', 'shapeHeight', this.value)" class="form-control">
                            <small class="text-muted">Height of the rectangle</small>
                        </div>
                        <div class="property-group">
                            <label>Fill Color</label>
                            <input type="color" value="${elementData.fillColor || '#dbeafe'}" onchange="updateShapeProperty('${elementData.id}', 'fillColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Color</label>
                            <input type="color" value="${elementData.strokeColor || '#3b82f6'}" onchange="updateShapeProperty('${elementData.id}', 'strokeColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Width</label>
                            <input type="range" min="1" max="10" value="${elementData.strokeWidth || 2}" onchange="updateShapeProperty('${elementData.id}', 'strokeWidth', this.value)" class="form-range">
                            <small class="text-muted">Current: ${elementData.strokeWidth || 2}px</small>
                        </div>
                    `;

                case 'rhombus':
                    return `
                        <div class="property-group">
                            <label>Width (px)</label>
                            <input type="number" min="30" max="400" value="${elementData.shapeWidth || 140}" onchange="updateShapeDimension('${elementData.id}', 'shapeWidth', this.value)" class="form-control">
                            <small class="text-muted">Width of the rhombus</small>
                        </div>
                        <div class="property-group">
                            <label>Height (px)</label>
                            <input type="number" min="20" max="300" value="${elementData.shapeHeight || 100}" onchange="updateShapeDimension('${elementData.id}', 'shapeHeight', this.value)" class="form-control">
                            <small class="text-muted">Height of the rhombus</small>
                        </div>
                        <div class="property-group">
                            <label>Fill Color</label>
                            <input type="color" value="${elementData.fillColor || '#dbeafe'}" onchange="updateShapeProperty('${elementData.id}', 'fillColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Color</label>
                            <input type="color" value="${elementData.strokeColor || '#3b82f6'}" onchange="updateShapeProperty('${elementData.id}', 'strokeColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Width</label>
                            <input type="range" min="1" max="10" value="${elementData.strokeWidth || 2}" onchange="updateShapeProperty('${elementData.id}', 'strokeWidth', this.value)" class="form-range">
                            <small class="text-muted">Current: ${elementData.strokeWidth || 2}px</small>
                        </div>
                    `;

                case 'triangle':
                    return `
                        <div class="property-group">
                            <label>Base Width (px)</label>
                            <input type="number" min="20" max="300" value="${elementData.shapeBaseWidth || 110}" onchange="updateShapeDimension('${elementData.id}', 'shapeBaseWidth', this.value)" class="form-control">
                            <small class="text-muted">Width of the triangle base</small>
                        </div>
                        <div class="property-group">
                            <label>Height (px)</label>
                            <input type="number" min="20" max="300" value="${elementData.shapeHeight || 110}" onchange="updateShapeDimension('${elementData.id}', 'shapeHeight', this.value)" class="form-control">
                            <small class="text-muted">Height of the triangle</small>
                        </div>
                        <div class="property-group">
                            <label>Fill Color</label>
                            <input type="color" value="${elementData.fillColor || '#dbeafe'}" onchange="updateShapeProperty('${elementData.id}', 'fillColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Color</label>
                            <input type="color" value="${elementData.strokeColor || '#3b82f6'}" onchange="updateShapeProperty('${elementData.id}', 'strokeColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Width</label>
                            <input type="range" min="1" max="10" value="${elementData.strokeWidth || 2}" onchange="updateShapeProperty('${elementData.id}', 'strokeWidth', this.value)" class="form-range">
                            <small class="text-muted">Current: ${elementData.strokeWidth || 2}px</small>
                        </div>
                    `;

                case 'parallelogram':
                    return `
                        <div class="property-group">
                            <label>Width (px)</label>
                            <input type="number" min="30" max="400" value="${elementData.shapeWidth || 160}" onchange="updateShapeDimension('${elementData.id}', 'shapeWidth', this.value)" class="form-control">
                            <small class="text-muted">Width of the parallelogram</small>
                        </div>
                        <div class="property-group">
                            <label>Height (px)</label>
                            <input type="number" min="20" max="300" value="${elementData.shapeHeight || 80}" onchange="updateShapeDimension('${elementData.id}', 'shapeHeight', this.value)" class="form-control">
                            <small class="text-muted">Height of the parallelogram</small>
                        </div>
                        <div class="property-group">
                            <label>Fill Color</label>
                            <input type="color" value="${elementData.fillColor || '#dbeafe'}" onchange="updateShapeProperty('${elementData.id}', 'fillColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Color</label>
                            <input type="color" value="${elementData.strokeColor || '#3b82f6'}" onchange="updateShapeProperty('${elementData.id}', 'strokeColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Width</label>
                            <input type="range" min="1" max="10" value="${elementData.strokeWidth || 2}" onchange="updateShapeProperty('${elementData.id}', 'strokeWidth', this.value)" class="form-range">
                            <small class="text-muted">Current: ${elementData.strokeWidth || 2}px</small>
                        </div>
                    `;

                case 'pentagon':
                case 'hexagon':
                    return `
                        <div class="property-group">
                            <label>Size (px)</label>
                            <input type="number" min="30" max="300" value="${elementData.shapeSize || 90}" onchange="updateShapeDimension('${elementData.id}', 'shapeSize', this.value)" class="form-control">
                            <small class="text-muted">Size of the ${elementData.type}</small>
                        </div>
                        <div class="property-group">
                            <label>Fill Color</label>
                            <input type="color" value="${elementData.fillColor || '#dbeafe'}" onchange="updateShapeProperty('${elementData.id}', 'fillColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Color</label>
                            <input type="color" value="${elementData.strokeColor || '#3b82f6'}" onchange="updateShapeProperty('${elementData.id}', 'strokeColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Width</label>
                            <input type="range" min="1" max="10" value="${elementData.strokeWidth || 2}" onchange="updateShapeProperty('${elementData.id}', 'strokeWidth', this.value)" class="form-range">
                            <small class="text-muted">Current: ${elementData.strokeWidth || 2}px</small>
                        </div>
                    `;

                case 'cube':
                case 'sphere':
                    return `
                        <div class="property-group">
                            <label>${elementData.type === 'cube' ? 'Side Length' : 'Diameter'} (px)</label>
                            <input type="number" min="30" max="300" value="${elementData.shapeSize || 80}" onchange="updateShapeDimension('${elementData.id}', 'shapeSize', this.value)" class="form-control">
                            <small class="text-muted">${elementData.type === 'cube' ? 'Length of each side' : 'Diameter of the sphere'}</small>
                        </div>
                        <div class="property-group">
                            <label>Fill Color</label>
                            <input type="color" value="${elementData.fillColor || '#dbeafe'}" onchange="updateShapeProperty('${elementData.id}', 'fillColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Color</label>
                            <input type="color" value="${elementData.strokeColor || '#3b82f6'}" onchange="updateShapeProperty('${elementData.id}', 'strokeColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Width</label>
                            <input type="range" min="1" max="10" value="${elementData.strokeWidth || 2}" onchange="updateShapeProperty('${elementData.id}', 'strokeWidth', this.value)" class="form-range">
                            <small class="text-muted">Current: ${elementData.strokeWidth || 2}px</small>
                        </div>
                    `;

                case 'cuboid':
                    return `
                        <div class="property-group">
                            <label>Width (px)</label>
                            <input type="number" min="30" max="400" value="${elementData.shapeWidth || 120}" onchange="updateShapeDimension('${elementData.id}', 'shapeWidth', this.value)" class="form-control">
                            <small class="text-muted">Width of the cuboid</small>
                        </div>
                        <div class="property-group">
                            <label>Height (px)</label>
                            <input type="number" min="20" max="300" value="${elementData.shapeHeight || 80}" onchange="updateShapeDimension('${elementData.id}', 'shapeHeight', this.value)" class="form-control">
                            <small class="text-muted">Height of the cuboid</small>
                        </div>
                        <div class="property-group">
                            <label>Depth (px)</label>
                            <input type="number" min="10" max="200" value="${elementData.shapeDepth || 60}" onchange="updateShapeDimension('${elementData.id}', 'shapeDepth', this.value)" class="form-control">
                            <small class="text-muted">Depth of the cuboid</small>
                        </div>
                        <div class="property-group">
                            <label>Fill Color</label>
                            <input type="color" value="${elementData.fillColor || '#dbeafe'}" onchange="updateShapeProperty('${elementData.id}', 'fillColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Color</label>
                            <input type="color" value="${elementData.strokeColor || '#3b82f6'}" onchange="updateShapeProperty('${elementData.id}', 'strokeColor', this.value)" class="form-control">
                        </div>
                        <div class="property-group">
                            <label>Stroke Width</label>
                            <input type="range" min="1" max="10" value="${elementData.strokeWidth || 2}" onchange="updateShapeProperty('${elementData.id}', 'strokeWidth', this.value)" class="form-range">
                            <small class="text-muted">Current: ${elementData.strokeWidth || 2}px</small>
                        </div>
                    `;

                // Chart properties
                case 'bar-chart':
                case 'line-chart':
                case 'pie-chart':
                    return `
                        <div class="property-group">
                            <label>Chart Title</label>
                            <input type="text" value="${elementData.chartTitle || 'Sample Chart'}" onchange="updateChartProperty('${elementData.id}', 'chartTitle', this.value)" class="form-control">
                            <small class="text-muted">Title displayed above the chart</small>
                        </div>
                        <div class="property-group">
                            <label>Chart Data</label>
                            <textarea rows="4" onchange="updateChartProperty('${elementData.id}', 'chartData', this.value)" class="form-control" placeholder="Enter data as: Label1:Value1, Label2:Value2">${elementData.chartData || (elementData.type === 'pie-chart' ? 'Red:30, Blue:25, Green:20, Yellow:25' : 'Jan:10, Feb:20, Mar:15, Apr:25, May:30')}</textarea>
                            <small class="text-muted">Format: Label1:Value1, Label2:Value2, ...</small>
                        </div>
                        ${elementData.type !== 'pie-chart' ? `
                        <div class="property-group">
                            <label>Y-Axis Label</label>
                            <input type="text" value="${elementData.yAxisLabel || 'Values'}" onchange="updateChartProperty('${elementData.id}', 'yAxisLabel', this.value)" class="form-control">
                            <small class="text-muted">Label for the Y-axis</small>
                        </div>
                        <div class="property-group">
                            <label>X-Axis Label</label>
                            <input type="text" value="${elementData.xAxisLabel || 'Categories'}" onchange="updateChartProperty('${elementData.id}', 'xAxisLabel', this.value)" class="form-control">
                            <small class="text-muted">Label for the X-axis</small>
                        </div>
                        ` : ''}
                        <div class="property-group">
                            <label>Chart Color Theme</label>
                            <select onchange="updateChartProperty('${elementData.id}', 'colorTheme', this.value)" class="form-control">
                                <option value="blue" ${(elementData.colorTheme || 'blue') === 'blue' ? 'selected' : ''}>Blue Theme</option>
                                <option value="green" ${elementData.colorTheme === 'green' ? 'selected' : ''}>Green Theme</option>
                                <option value="red" ${elementData.colorTheme === 'red' ? 'selected' : ''}>Red Theme</option>
                                <option value="purple" ${elementData.colorTheme === 'purple' ? 'selected' : ''}>Purple Theme</option>
                                <option value="rainbow" ${elementData.colorTheme === 'rainbow' ? 'selected' : ''}>Rainbow Theme</option>
                            </select>
                            <small class="text-muted">Color scheme for the chart</small>
                        </div>
                    `;

                default:
                    return '';
            }
        }

        // Show default properties
        function showDefaultProperties() {
            const propertiesContent = document.getElementById('properties-content');
            propertiesContent.innerHTML = `
                <div class="text-center text-muted">
                    <i class="fas fa-hand-pointer fa-2x mb-3"></i>
                    <p>Select an element to edit its properties</p>
                </div>
            `;
        }

        // Update element property
        function updateElementProperty(elementId, property, value) {
            const element = document.getElementById(elementId);
            const elementData = quizElements.find(e => e.id === elementId);

            if (element && elementData) {
                element.style[property] = value;
                elementData[property] = parseInt(value);
            }
        }

        // Update element style
        function updateElementStyle(elementId, property, value) {
            const element = document.getElementById(elementId);
            const elementData = quizElements.find(e => e.id === elementId);

            if (element && elementData) {
                element.style[property] = value;
                elementData.style[property] = value;
            }
        }

        // Update LaTeX content
        function updateLatexContent(elementId, content) {
            const elementData = quizElements.find(e => e.id === elementId);
            if (elementData) {
                elementData.content = content;

                // Re-render the LaTeX
                const latexDiv = document.getElementById(`latex-${elementId}`);
                if (latexDiv) {
                    latexDiv.innerHTML = `$$${content}$$`;
                    if (window.MathJax) {
                        MathJax.typesetPromise([latexDiv]);
                    }
                }
            }
        }

        // Update shape properties
        function updateShapeProperty(elementId, property, value) {
            const elementData = quizElements.find(e => e.id === elementId);
            if (elementData) {
                // Store the property in the element data
                elementData[property] = value;

                // Re-render the element to apply the changes
                const element = document.getElementById(elementId);
                if (element) {
                    element.innerHTML = getElementContent(elementData);
                }

                // Update the properties panel to show current value
                if (property === 'strokeWidth') {
                    const strokeWidthDisplay = document.querySelector(`small.text-muted`);
                    if (strokeWidthDisplay && strokeWidthDisplay.textContent.includes('Current:')) {
                        strokeWidthDisplay.textContent = `Current: ${value}px`;
                    }
                }
            }
        }
        window.updateShapeProperty = updateShapeProperty;

        // Update image properties
        function updateImageProperty(elementId, property, value) {
            const elementData = quizElements.find(e => e.id === elementId);
            if (elementData) {
                // Store the property in the element data
                elementData[property] = value;

                // Re-render the element to apply the changes
                const element = document.getElementById(elementId);
                if (element) {
                    element.innerHTML = getElementContent(elementData);
                }
            }
        }
        window.updateImageProperty = updateImageProperty;

        // Update shape dimensions
        function updateShapeDimension(elementId, property, value) {
            const elementData = quizElements.find(e => e.id === elementId);
            if (elementData) {
                // Store the dimension property in the element data
                elementData[property] = parseInt(value);

                // Re-render the element to apply the changes
                const element = document.getElementById(elementId);
                if (element) {
                    element.innerHTML = getElementContent(elementData);
                }

                // For certain shapes, we might want to update the container size too
                if (elementData.type === 'line' && property === 'shapeLength') {
                    // Update container width for lines
                    element.style.width = (parseInt(value) + 20) + 'px';
                    elementData.width = parseInt(value) + 20;
                } else if ((elementData.type === 'circle' || elementData.type === 'square') &&
                          (property === 'shapeDiameter' || property === 'shapeSideLength')) {
                    // Update container size for circles and squares
                    const size = parseInt(value) + 20;
                    element.style.width = size + 'px';
                    element.style.height = size + 'px';
                    elementData.width = size;
                    elementData.height = size;
                }
            }
        }
        window.updateShapeDimension = updateShapeDimension;

        // Add element to canvas (for quick buttons)
        function addElementToCanvas(type) {
            try {
                // Find a good position for the new element
                const canvas = document.getElementById('canvas');
                if (!canvas) {
                    console.error('Canvas element not found!');
                    // Fallback to default position
                    createElement(type, 150, 150);
                    return;
                }

                const canvasRect = canvas.getBoundingClientRect();

                // Calculate position relative to canvas (center-ish with some randomness)
                const x = Math.max(50, Math.min(canvasRect.width - 200, 100 + Math.random() * 200));
                const y = Math.max(50, Math.min(canvasRect.height - 150, 100 + Math.random() * 150));

                // Create the element
                createElement(type, x, y);
            } catch (error) {
                console.error('Error in addElementToCanvas:', error);
                // Fallback to default position
                createElement(type, 150, 150);
            }
        }
        window.addElementToCanvas = addElementToCanvas;

        // Chart rendering functions
        function renderChart(element) {
            const canvas = document.getElementById(`chart-${element.id}`);
            if (!canvas || !window.Chart) {
                console.log('Canvas or Chart.js not available for', element.id);
                return;
            }

            // Destroy existing chart if it exists
            if (canvas.chart) {
                canvas.chart.destroy();
            }

            // Parse chart data
            const chartDataStr = element.chartData || getDefaultChartData(element.type);
            const dataPoints = parseChartData(chartDataStr);

            // Get color theme
            const colors = getChartColors(element.colorTheme || 'blue', dataPoints.length);

            // Create chart configuration
            const config = createChartConfig(element, dataPoints, colors);

            // Create the chart
            try {
                canvas.chart = new Chart(canvas, config);
                console.log('Chart created successfully for', element.id);
            } catch (error) {
                console.error('Error creating chart:', error);
            }
        }

        function getDefaultChartData(chartType) {
            switch (chartType) {
                case 'pie-chart':
                    return 'Red:30, Blue:25, Green:20, Yellow:25';
                case 'bar-chart':
                case 'line-chart':
                default:
                    return 'Jan:10, Feb:20, Mar:15, Apr:25, May:30';
            }
        }

        function parseChartData(dataStr) {
            const pairs = dataStr.split(',').map(pair => pair.trim());
            const labels = [];
            const values = [];

            pairs.forEach(pair => {
                const [label, value] = pair.split(':').map(item => item.trim());
                if (label && value && !isNaN(parseFloat(value))) {
                    labels.push(label);
                    values.push(parseFloat(value));
                }
            });

            return { labels, values };
        }

        function getChartColors(theme, count) {
            const themes = {
                blue: ['#3b82f6', '#60a5fa', '#93c5fd', '#bfdbfe', '#dbeafe'],
                green: ['#10b981', '#34d399', '#6ee7b7', '#9decf9', '#a7f3d0'],
                red: ['#ef4444', '#f87171', '#fca5a5', '#fecaca', '#fee2e2'],
                purple: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#ddd6fe', '#ede9fe'],
                rainbow: ['#ef4444', '#f59e0b', '#10b981', '#3b82f6', '#8b5cf6', '#ec4899']
            };

            const colorSet = themes[theme] || themes.blue;
            const colors = [];

            for (let i = 0; i < count; i++) {
                colors.push(colorSet[i % colorSet.length]);
            }

            return colors;
        }

        function createChartConfig(element, dataPoints, colors) {
            const baseConfig = {
                data: {
                    labels: dataPoints.labels,
                    datasets: [{
                        data: dataPoints.values,
                        backgroundColor: colors,
                        borderColor: colors.map(color => color),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: !!(element.chartTitle),
                            text: element.chartTitle || '',
                            font: { size: 12 }
                        },
                        legend: {
                            display: element.type === 'pie-chart',
                            position: 'bottom',
                            labels: { font: { size: 10 } }
                        }
                    }
                }
            };

            // Chart type specific configurations
            switch (element.type) {
                case 'bar-chart':
                    return {
                        type: 'bar',
                        ...baseConfig,
                        options: {
                            ...baseConfig.options,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: !!(element.yAxisLabel),
                                        text: element.yAxisLabel || '',
                                        font: { size: 10 }
                                    },
                                    ticks: { font: { size: 9 } }
                                },
                                x: {
                                    title: {
                                        display: !!(element.xAxisLabel),
                                        text: element.xAxisLabel || '',
                                        font: { size: 10 }
                                    },
                                    ticks: { font: { size: 9 } }
                                }
                            }
                        }
                    };

                case 'line-chart':
                    return {
                        type: 'line',
                        ...baseConfig,
                        data: {
                            ...baseConfig.data,
                            datasets: [{
                                ...baseConfig.data.datasets[0],
                                fill: false,
                                tension: 0.1
                            }]
                        },
                        options: {
                            ...baseConfig.options,
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: !!(element.yAxisLabel),
                                        text: element.yAxisLabel || '',
                                        font: { size: 10 }
                                    },
                                    ticks: { font: { size: 9 } }
                                },
                                x: {
                                    title: {
                                        display: !!(element.xAxisLabel),
                                        text: element.xAxisLabel || '',
                                        font: { size: 10 }
                                    },
                                    ticks: { font: { size: 9 } }
                                }
                            }
                        }
                    };

                case 'pie-chart':
                default:
                    return {
                        type: 'pie',
                        ...baseConfig
                    };
            }
        }

        // Update chart properties
        function updateChartProperty(elementId, property, value) {
            const elementData = quizElements.find(e => e.id === elementId);
            if (elementData) {
                // Store the property in the element data
                elementData[property] = value;

                // Re-render the chart
                setTimeout(() => renderChart(elementData), 100);
            }
        }
        window.updateChartProperty = updateChartProperty;

        // Trigger image upload dialog
        function triggerImageUpload(elementId) {
            console.log('Triggering image upload for element:', elementId);

            // Create a hidden file input
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = 'image/*';
            fileInput.style.display = 'none';

            fileInput.onchange = function(e) {
                handleImageUpload(elementId, e.target);
                document.body.removeChild(fileInput);
            };

            document.body.appendChild(fileInput);
            fileInput.click();
        }
        window.triggerImageUpload = triggerImageUpload;

        // Handle image upload
        function handleImageUpload(elementId, input) {
            const file = input.files[0];
            if (!file) return;

            // Validate file type
            if (!file.type.startsWith('image/')) {
                alert('Please select a valid image file');
                return;
            }

            // Validate file size (max 5MB)
            if (file.size > 5 * 1024 * 1024) {
                alert('Image file is too large. Please select an image smaller than 5MB');
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                const element = document.getElementById(elementId);
                const elementData = quizElements.find(el => el.id === elementId);

                if (element && elementData) {
                    // Update element content
                    elementData.content = e.target.result;

                    // Re-render the element with the new image
                    element.innerHTML = getElementContent(elementData);

                    console.log('Image uploaded successfully for element:', elementId);
                }
            };

            reader.onerror = function() {
                alert('Error reading the image file');
            };

            reader.readAsDataURL(file);
        }

        // Table manipulation functions
        function addTableRow(elementId) {
            const element = document.getElementById(elementId);
            const table = element.querySelector('table');
            if (table) {
                const newRow = table.insertRow();
                const cellCount = table.rows[0].cells.length;

                for (let i = 0; i < cellCount; i++) {
                    const newCell = newRow.insertCell();
                    newCell.contentEditable = true;
                    newCell.style.cssText = 'border: 1px solid #e2e8f0; padding: 8px; outline: none;';
                    newCell.onclick = function(e) { e.stopPropagation(); };
                    newCell.textContent = 'New Cell';
                }
                console.log('Added row to table:', elementId);
            }
        }
        window.addTableRow = addTableRow;

        function addTableColumn(elementId) {
            const element = document.getElementById(elementId);
            const table = element.querySelector('table');
            if (table) {
                for (let i = 0; i < table.rows.length; i++) {
                    const newCell = table.rows[i].insertCell();
                    newCell.contentEditable = true;
                    newCell.style.cssText = 'border: 1px solid #e2e8f0; padding: 8px; outline: none;';
                    newCell.onclick = function(e) { e.stopPropagation(); };
                    newCell.textContent = 'New Cell';
                }
                console.log('Added column to table:', elementId);
            }
        }
        window.addTableColumn = addTableColumn;

        function removeTableRow(elementId) {
            const element = document.getElementById(elementId);
            const table = element.querySelector('table');
            if (table && table.rows.length > 1) {
                table.deleteRow(table.rows.length - 1);
                console.log('Removed row from table:', elementId);
            } else {
                alert('Cannot remove the last row');
            }
        }
        window.removeTableRow = removeTableRow;

        function removeTableColumn(elementId) {
            const element = document.getElementById(elementId);
            const table = element.querySelector('table');
            if (table && table.rows[0].cells.length > 1) {
                for (let i = 0; i < table.rows.length; i++) {
                    table.rows[i].deleteCell(table.rows[i].cells.length - 1);
                }
                console.log('Removed column from table:', elementId);
            } else {
                alert('Cannot remove the last column');
            }
        }
        window.removeTableColumn = removeTableColumn;

        // Delete element
        function deleteElement(elementId) {
            const element = document.getElementById(elementId);
            if (element) {
                element.remove();
                quizElements = quizElements.filter(e => e.id !== elementId);

                if (selectedElement === elementId) {
                    deselectAllElements();
                }

                // Show placeholder if no elements left
                if (quizElements.length === 0) {
                    document.querySelector('.canvas-placeholder').style.display = 'block';
                }
            }
        }

        // Duplicate element
        function duplicateElement(elementId) {
            const elementData = quizElements.find(e => e.id === elementId);
            if (elementData) {
                createElement(elementData.type, elementData.x + 20, elementData.y + 20);
            }
        }

        // Clear canvas
        function clearCanvas() {
            if (confirm('Are you sure you want to clear the entire canvas? This action cannot be undone.')) {
                document.querySelectorAll('.canvas-element').forEach(el => el.remove());
                quizElements = [];
                selectedElement = null;
                elementCounter = 0;
                document.querySelector('.canvas-placeholder').style.display = 'block';
                showDefaultProperties();
            }
        }
        window.clearCanvas = clearCanvas;

        // Save quiz settings
        function saveQuizSettings() {
            const title = document.getElementById('quizTitle').value;
            const grade = document.getElementById('quizGrade').value;
            const subject = document.getElementById('quizSubject').value;
            const type = document.getElementById('quizType').value;
            const description = document.getElementById('quizDescription').value;

            if (!title || !grade || !subject) {
                alert('Please fill in all required fields');
                return;
            }

            quizSettings = {
                title: title,
                description: description,
                gradeLevel: grade,
                subject: subject,
                quizType: type
            };

            // Update canvas title
            document.querySelector('.canvas-title').textContent = 'Complex Quiz Builder - ' + title;

            // Close modal
            const modal = bootstrap.Modal.getInstance(document.getElementById('quizSettingsModal'));
            modal.hide();
        }
        window.saveQuizSettings = saveQuizSettings;

        // Open quiz settings modal
        function openQuizSettings() {
            // Show the quiz settings modal
            const modal = new bootstrap.Modal(document.getElementById('quizSettingsModal'));
            modal.show();

            // Pre-populate fields with current settings if they exist
            if (quizSettings.title) {
                document.getElementById('quizTitle').value = quizSettings.title;
            }
            if (quizSettings.grade) {
                document.getElementById('quizGrade').value = quizSettings.grade;
            }
            if (quizSettings.subject) {
                document.getElementById('quizSubject').value = quizSettings.subject;
            }
            if (quizSettings.type) {
                document.getElementById('quizType').value = quizSettings.type;
            }
            if (quizSettings.description) {
                document.getElementById('quizDescription').value = quizSettings.description;
            }
        }
        window.openQuizSettings = openQuizSettings;

        // Preview quiz
        function previewQuiz() {
            if (quizElements.length === 0) {
                alert('Please add some elements to preview the quiz');
                return;
            }

            // Sync current content from DOM before preview
            syncElementsContent();

            // Create preview window
            const previewWindow = window.open('', '_blank', 'width=800,height=600');
            const previewContent = generatePreviewHTML();

            previewWindow.document.write(previewContent);
            previewWindow.document.close();
        }
        window.previewQuiz = previewQuiz;

        // Generate preview HTML
        function generatePreviewHTML() {
            var elementsHTML = '';

            quizElements.forEach(function(element) {
                var styleString = '';
                for (var key in element.style) {
                    if (element.style.hasOwnProperty(key)) {
                        styleString += key + ': ' + element.style[key] + '; ';
                    }
                }

                // Get the current content from the DOM element (for edited content)
                var currentContent = getCurrentElementContent(element);

                elementsHTML += '<div style="position: absolute; left: ' + element.x + 'px; top: ' + element.y + 'px; width: ' + element.width + 'px; height: ' + element.height + 'px; ' + styleString + '">' +
                    currentContent +
                    '</div>';
            });

            var previewHTML = '<!DOCTYPE html>' +
                '<html>' +
                '<head>' +
                '<title>Quiz Preview - ' + quizSettings.title + '</title>' +
                '<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">' +
                '<style>' +
                'body { font-family: Inter, sans-serif; margin: 20px; background: #f8fafc; }' +
                '.preview-header { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }' +
                '.preview-canvas { position: relative; background: white; min-height: 800px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }' +
                '</style>' +
                '</head>' +
                '<body>' +
                '<div class="preview-header">' +
                '<h2>' + quizSettings.title + '</h2>' +
                '<p><strong>Grade:</strong> ' + quizSettings.gradeLevel + ' | <strong>Subject:</strong> ' + quizSettings.subject + '</p>' +
                '<p>' + quizSettings.description + '</p>' +
                '</div>' +
                '<div class="preview-canvas">' +
                elementsHTML +
                '</div>' +
                '</body>' +
                '</html>';

            return previewHTML;
        }

        // Get current content from DOM element (captures edited content)
        function getCurrentElementContent(element) {
            const domElement = document.getElementById(element.id);
            if (!domElement) {
                // Fallback to original content if DOM element not found
                return getElementContent(element);
            }

            switch(element.type) {
                case 'textbox':
                    // Get the current text from contenteditable div
                    const textDiv = domElement.querySelector('[contenteditable="true"]');
                    return textDiv ? '<div>' + textDiv.innerHTML + '</div>' : getElementContent(element);

                case 'table':
                    // Get the current table with all edited cell content
                    const table = domElement.querySelector('table');
                    if (table) {
                        // Clone the table and remove contenteditable and onclick attributes for preview
                        const clonedTable = table.cloneNode(true);
                        const cells = clonedTable.querySelectorAll('td');
                        cells.forEach(cell => {
                            cell.removeAttribute('contenteditable');
                            cell.removeAttribute('onclick');
                            // Clean up the style to remove outline
                            cell.style.outline = 'none';
                        });
                        return clonedTable.outerHTML;
                    }
                    return getElementContent(element);

                case 'question':
                case 'sub-question':
                    // Get current question content
                    const questionDiv = domElement.querySelector('[contenteditable="true"]');
                    if (questionDiv) {
                        const questionType = element.type === 'question' ? 'Question' : 'Sub-question';
                        const bgColor = element.type === 'question' ? '#f0f9ff' : '#fefce8';
                        const borderColor = element.type === 'question' ? '#0ea5e9' : '#eab308';
                        const marginLeft = element.type === 'sub-question' ? 'margin-left: 20px;' : '';

                        return '<div style="padding: 15px; background: ' + bgColor + '; border-left: 4px solid ' + borderColor + '; ' + marginLeft + '">' +
                            '<strong>' + questionType + ':</strong>' +
                            '<div style="margin-top: 8px;">' + questionDiv.innerHTML + '</div>' +
                            '</div>';
                    }
                    return getElementContent(element);

                case 'answer-area':
                    // Get current answer area content
                    const textarea = domElement.querySelector('textarea');
                    if (textarea) {
                        return '<div style="padding: 15px; background: #f0fdf4; border: 2px dashed #22c55e; border-radius: 8px;">' +
                            '<div style="color: #16a34a; font-weight: 600; margin-bottom: 8px;">' +
                            '<i class="fas fa-edit" style="margin-right: 8px;"></i>Answer Area' +
                            '</div>' +
                            '<div style="width: 100%; min-height: 60px; border: 1px solid #e2e8f0; border-radius: 4px; padding: 8px; background: white;">' +
                            (textarea.value || 'Students will write their answer here...') +
                            '</div>' +
                            '</div>';
                    }
                    return getElementContent(element);

                case 'image':
                    // Images should already be properly stored in element.content
                    return getElementContent(element);

                case 'latex':
                    // LaTeX content should be preserved
                    return getElementContent(element);

                default:
                    // For other elements, get the current innerHTML
                    return domElement.innerHTML || getElementContent(element);
            }
        }

        // Sanitize content for safe storage
        function sanitizeContent(content) {
            if (!content) return '';

            // Convert to string
            let sanitized = String(content);

            // Remove excessive whitespace and newlines
            sanitized = sanitized.replace(/\s+/g, ' ').trim();

            // Limit content length
            if (sanitized.length > 5000) {
                sanitized = sanitized.substring(0, 5000) + '...';
            }

            return sanitized;
        }

        // Sync current DOM content back to element data
        function syncElementsContent() {
            quizElements.forEach(function(element) {
                const domElement = document.getElementById(element.id);
                if (!domElement) return;

                try {
                    switch(element.type) {
                        case 'textbox':
                            const textDiv = domElement.querySelector('[contenteditable="true"]');
                            if (textDiv) {
                                element.content = sanitizeContent(textDiv.innerHTML);
                            }
                            break;

                        case 'question':
                        case 'sub-question':
                            const questionDiv = domElement.querySelector('[contenteditable="true"]');
                            if (questionDiv) {
                                element.content = sanitizeContent(questionDiv.innerHTML);
                            }
                            break;

                        case 'answer-area':
                            const textarea = domElement.querySelector('textarea');
                            if (textarea) {
                                element.content = sanitizeContent(textarea.value);
                            }
                            break;

                        case 'table':
                            const table = domElement.querySelector('table');
                            if (table) {
                                // Store the current table HTML (sanitized)
                                element.content = sanitizeContent(table.outerHTML);
                            }
                            break;
                    }
                } catch (error) {
                    console.error('Error syncing content for element:', element.id, error);
                    // Keep existing content if sync fails
                }
            });
        }

        // Save quiz
        function saveQuiz() {
            if (!quizSettings.title) {
                alert('Please set quiz settings first');
                return;
            }

            if (quizElements.length === 0) {
                alert('Please add some elements to the quiz');
                return;
            }

            // Sync current content from DOM before saving
            syncElementsContent();

            // Clean and validate elements data
            const cleanElements = quizElements.map(element => ({
                id: element.id || '',
                type: element.type || '',
                x: Number(element.x) || 0,
                y: Number(element.y) || 0,
                width: Number(element.width) || 200,
                height: Number(element.height) || 100,
                content: element.content || '',
                style: element.style || {}
            }));

            console.log('Sending quiz data:', {
                title: quizSettings.title,
                elementsCount: cleanElements.length,
                elements: cleanElements
            });

            const quizData = {
                ...quizSettings,
                elements: cleanElements,
                isComplexQuiz: true
            };

            // Send to server
            fetch('/create-complex-quiz', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(quizData)
            })
            .then(response => {
                console.log('Server response status:', response.status);
                if (!response.ok) {
                    throw new Error('Server responded with status: ' + response.status);
                }
                return response.json();
            })
            .then(data => {
                console.log('Server response data:', data);
                if (data.success) {
                    alert('Quiz saved successfully!');
                    window.location.href = '/teacher/dashboard';
                } else {
                    console.error('Save failed:', data);
                    alert('Error saving quiz: ' + data.message + (data.details ? '\nDetails: ' + data.details.join(', ') : ''));
                }
            })
            .catch(error => {
                console.error('Error saving quiz:', error);
                alert('Error saving quiz: ' + error.message + '\nPlease check the console for more details.');
            });
        }
        window.saveQuiz = saveQuiz;

        // Make functions globally available for onclick handlers
        window.addElementToCanvas = addElementToCanvas;
        window.testDragDrop = testDragDrop;
        window.clearCanvas = clearCanvas;
        window.previewQuiz = previewQuiz;
        window.saveQuiz = saveQuiz;
        window.saveQuizSettings = saveQuizSettings;
        window.openQuizSettings = openQuizSettings;
        window.deleteElement = deleteElement;
        window.duplicateElement = duplicateElement;
        window.updateElementProperty = updateElementProperty;
        window.updateElementStyle = updateElementStyle;
        window.updateLatexContent = updateLatexContent;
        window.handleImageUpload = handleImageUpload;
        window.showCanvasInstructions = showCanvasInstructions;
    </script>
</body>
</html>
