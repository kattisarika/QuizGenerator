<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Take Quiz - <%= quiz.title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- MathJax for Math Equation Support -->
    <script>
    window.MathJax = {
        tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']],
            processEscapes: true,
            processEnvironments: true
        },
        options: {
            skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
        }
    };
    </script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>

    <!-- Chart.js for charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        /* Text Answer Styles */
        .text-answer-section {
            margin-top: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            border: 2px solid #e9ecef;
        }
        
        .text-answer-label {
            display: block;
            font-weight: 600;
            color: #495057;
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .text-answer-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            font-size: 14px;
            line-height: 1.5;
            resize: vertical;
            min-height: 80px;
            transition: border-color 0.3s ease;
        }
        
        .text-answer-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        
        .no-options-message {
            margin-top: 20px;
            padding: 20px;
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            text-align: center;
        }
        
        .no-options-message p {
            margin: 0;
            color: #856404;
        }
        
        .no-options-message i {
            color: #f39c12;
        }



        .document-source {
            margin-left: auto;
            color: #6b7280;
            font-size: 14px;
        }

        .pdf-images-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .pdf-image-item {
            background: #f8fafc;
            border: 1px solid #e2e8f0;
            border-radius: 8px;
            padding: 15px;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }

        .pdf-image-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

        .pdf-image-header {
            margin-bottom: 12px;
        }

        .pdf-image-label {
            font-weight: 600;
            color: #374151;
            display: block;
            margin-bottom: 4px;
        }

        .pdf-image-subtitle {
            font-size: 12px;
            color: #6b7280;
        }

        .image-info {
            margin-top: 10px;
            text-align: center;
        }

        /* Image Modal Styles */
        .image-modal {
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.8);
            backdrop-filter: blur(4px);
        }

        .image-modal-content {
            position: relative;
            margin: 2% auto;
            padding: 20px;
            width: 90%;
            max-width: 1200px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
            animation: modalSlideIn 0.3s ease-out;
        }

        @keyframes modalSlideIn {
            from {
                opacity: 0;
                transform: translateY(-50px) scale(0.9);
            }
            to {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        .image-modal-close {
            position: absolute;
            top: 15px;
            right: 20px;
            color: #6b7280;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            transition: color 0.2s ease;
        }

        .image-modal-close:hover {
            color: #ef4444;
        }

        .modal-image {
            width: 100%;
            max-height: 80vh;
            object-fit: contain;
            border-radius: 8px;
            margin-top: 10px;
        }

        #modalImageTitle {
            color: #374151;
            margin: 0 30px 15px 0;
            font-size: 20px;
            font-weight: 600;
        }
        
        /* Question Indicator Styles */
        .question-indicator {
            display: inline-block;
            width: 40px;
            height: 40px;
            line-height: 40px;
            text-align: center;
            border-radius: 50%;
            background-color: #e9ecef;
            color: #495057;
            margin: 0 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
        }
        
        .question-indicator:hover {
            background-color: #dee2e6;
            transform: scale(1.1);
        }
        
        .question-indicator.answered {
            background-color: #28a745;
            color: white;
        }
        
        .question-indicator.active {
            background-color: #007bff;
            color: white;
            transform: scale(1.1);
        }
        
        .question-indicator.unanswered-highlight {
            background-color: #dc3545;
            color: white;
            animation: pulse 0.5s ease-in-out;
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.5);
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        /* Math Toolbar Styles */
        .math-toolbar {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .math-toolbar .btn-group {
            margin-bottom: 8px;
        }

        .math-toolbar .btn {
            font-size: 12px;
            padding: 6px 10px;
            border-radius: 6px;
            transition: all 0.2s ease;
        }

        .math-toolbar .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .math-toolbar .btn:active {
            transform: translateY(0);
        }

        .math-help {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }

        /* Rich Text Editor Styles */
        .rich-text-toolbar {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px 8px 0 0;
            padding: 10px;
            border-bottom: none;
        }

        .rich-text-toolbar .btn {
            margin-right: 5px;
            border-radius: 4px;
        }

        .rich-text-content {
            border: 1px solid #dee2e6;
            border-radius: 0 0 8px 8px;
            min-height: 120px;
            max-height: 300px;
            overflow-y: auto;
            line-height: 1.6;
        }

        .rich-text-content:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .rich-text-content ul, .rich-text-content ol {
            margin-left: 20px;
        }

        .rich-text-content p {
            margin-bottom: 8px;
        }

        /* Math Preview Styles */
        .math-preview {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border: 2px solid #dee2e6;
            border-radius: 10px;
            padding: 20px;
            margin-top: 15px;
            min-height: 80px;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);
        }

        .math-preview strong {
            color: #495057;
            font-weight: 600;
            margin-bottom: 10px;
            display: block;
        }

        /* Editor Toggle Buttons */
        .btn-group .btn.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-color: #667eea;
            color: white;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

        .btn-group .btn:not(.active):hover {
            background: #e9ecef;
            border-color: #667eea;
            color: #667eea;
        }

        /* Question Image Styles */
        .question-image-container {
            margin-top: 15px;
            text-align: center;
        }

        .question-image {
            max-width: 100%;
            max-height: 300px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }

        .question-image:hover {
            transform: scale(1.02);
        }

        /* Complex Quiz Styles */
        .complex-quiz-container {
            background: #ffffff;
            border: 2px solid #e2e8f0;
            border-radius: 12px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
            margin: 20px 0;
            overflow: hidden;
        }

        #complex-quiz-canvas {
            background: #fafafa;
            background-image:
                linear-gradient(rgba(0,0,0,.1) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0,0,0,.1) 1px, transparent 1px);
            background-size: 20px 20px;
            position: relative;
            min-height: 600px;
        }

        .complex-quiz-container h3 {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            margin: 0;
            padding: 15px 20px;
            font-size: 18px;
            font-weight: 600;
        }

        /* Complex Quiz Element Styles */
        .complex-quiz-container textarea {
            font-family: 'Inter', sans-serif;
            font-size: 14px;
            line-height: 1.5;
            border: 2px solid #e2e8f0;
            border-radius: 6px;
            transition: border-color 0.2s ease;
        }

        .complex-quiz-container textarea:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .complex-quiz-container table {
            font-family: 'Inter', sans-serif;
            font-size: 14px;
        }

        .complex-quiz-container table td {
            border: 1px solid #e2e8f0 !important;
            padding: 8px !important;
        }

        /* Complex Quiz One-Question-Per-Page Styles */
        .complex-question-group {
            display: none;
            position: relative;
            width: 100%;
            min-height: 400px;
            background: #ffffff;
            border-radius: 8px;
            padding: 20px;
            margin: 10px 0;
        }

        .complex-question-group.active {
            display: block;
        }

        .complex-question-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 15px 20px;
            margin: -20px -20px 20px -20px;
            border-radius: 8px 8px 0 0;
            font-size: 18px;
            font-weight: 600;
        }

        .complex-question-elements {
            position: relative;
            min-height: 300px;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 6px;
            overflow: auto;
        }

        #submit-complex-quiz-btn {
            background: linear-gradient(135deg, #10b981 0%, #059669 100%);
            border: none;
            padding: 12px 30px;
            font-size: 16px;
            font-weight: 600;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(16, 185, 129, 0.3);
            transition: all 0.2s ease;
        }

        #submit-complex-quiz-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(16, 185, 129, 0.4);
        }

        /* One Question Per Page Navigation Styles */
        .quiz-navigation-container {
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            padding: 20px;
            margin-top: 30px;
        }

        .nav-buttons {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 20px;
        }

        .nav-buttons button {
            min-width: 120px;
            padding: 10px 20px;
            font-weight: 600;
            border-radius: 6px;
            transition: all 0.2s ease;
        }

        .nav-buttons button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .question-status {
            text-align: center;
            flex: 1;
        }

        .answer-status {
            font-size: 14px;
            color: #6c757d;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .answer-status.answered {
            color: #28a745;
        }

        .answer-status.unanswered {
            color: #dc3545;
        }

        .question-indicators {
            display: flex;
            gap: 8px;
            justify-content: center;
            align-items: center;
        }

        .question-indicator {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #e9ecef;
            border: 2px solid #dee2e6;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
        }

        .question-indicator:hover {
            transform: scale(1.2);
        }

        .question-indicator.current {
            background: #007bff;
            border-color: #0056b3;
            transform: scale(1.3);
        }

        .question-indicator.answered {
            background: #28a745;
            border-color: #1e7e34;
        }

        .question-indicator.answered::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 8px;
            font-weight: bold;
        }

        #answer-required-alert {
            background-color: #fff3cd;
            border-color: #ffeaa7;
            color: #856404;
            border-radius: 6px;
            padding: 12px 16px;
            margin-top: 15px;
            margin-bottom: 0;
            display: none;
        }

        #answer-required-alert.show {
            display: block;
            animation: slideDown 0.3s ease;
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        @keyframes bounce {
            0%, 20%, 60%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-10px);
            }
            80% {
                transform: translateY(-5px);
            }
        }

        /* Ensure questions are hidden by default for one-question-per-page */
        .question-container {
            display: none !important;
        }

        .question-container.active {
            display: block !important;
        }

        /* Regular quiz question container visibility rules */
        .question-container:not(.complex-question-group) {
            display: none;
        }

        .question-container.active:not(.complex-question-group) {
            display: block !important;
        }

        /* Complex quiz elements should not be affected by regular quiz rules */
        .complex-question-group {
            display: none;
        }

        .complex-question-group.active {
            display: block !important;
        }
    </style>

    <!-- Immediate script to hide questions for one-question-per-page -->
    <script>
        // Debug: Check quiz data immediately
        console.log('🔍 QUIZ DEBUG - Quiz data available:', {
            quizId: '<%= quiz._id %>',
            quizTitle: '<%= quiz.title %>',
            isComplexQuiz: <%= quiz.isComplexQuiz ? 'true' : 'false' %>,
            hasQuestions: <%= quiz.questions ? 'true' : 'false' %>,
            questionsLength: <%= quiz.questions ? quiz.questions.length : 0 %>,
            hasElements: <%= quiz.elements ? 'true' : 'false' %>,
            elementsLength: <%= quiz.elements ? quiz.elements.length : 0 %>,
            hasComplexQuizData: <%= quiz.complexQuizData ? 'true' : 'false' %>
        });

        // Debug: Show the actual quiz object structure
        console.log('🔍 QUIZ OBJECT KEYS:', Object.keys({
            <% Object.keys(quiz).forEach((key, index) => { %>
                '<%= key %>': '<%= typeof quiz[key] %>'<%= index < Object.keys(quiz).length - 1 ? ',' : '' %>
            <% }); %>
        }));

        <% if (quiz.questions && quiz.questions.length > 0) { %>
            console.log('🔍 FIRST QUESTION SAMPLE:', {
                question: '<%= quiz.questions[0].question ? quiz.questions[0].question.substring(0, 100).replace(/'/g, "\\'") : "No question text" %>',
                type: '<%= quiz.questions[0].type || "unknown" %>',
                hasOptions: <%= quiz.questions[0].options ? 'true' : 'false' %>,
                optionsCount: <%= quiz.questions[0].options ? quiz.questions[0].options.length : 0 %>
            });

            // Check if first question is visible after page load
            setTimeout(() => {
                const firstQuestion = document.getElementById('question-0');
                if (firstQuestion) {
                    const computedStyle = window.getComputedStyle(firstQuestion);
                    const isVisible = firstQuestion.style.display !== 'none' &&
                                    computedStyle.display !== 'none';

                    console.log('🔍 FIRST QUESTION VISIBILITY CHECK:', {
                        exists: true,
                        display: firstQuestion.style.display,
                        computedDisplay: computedStyle.display,
                        visibility: computedStyle.visibility,
                        opacity: computedStyle.opacity,
                        height: computedStyle.height,
                        overflow: computedStyle.overflow,
                        isVisible: isVisible,
                        classList: Array.from(firstQuestion.classList),
                        innerHTML: firstQuestion.innerHTML.substring(0, 200) + '...'
                    });

                    // Try to force visibility
                    console.log('🔧 Attempting to force question visibility...');
                    firstQuestion.style.display = 'block !important';
                    firstQuestion.style.visibility = 'visible';
                    firstQuestion.style.opacity = '1';
                    firstQuestion.style.height = 'auto';
                    firstQuestion.style.overflow = 'visible';

                    // Check again after forcing
                    setTimeout(() => {
                        const newComputedStyle = window.getComputedStyle(firstQuestion);
                        console.log('🔍 AFTER FORCING VISIBILITY:', {
                            display: firstQuestion.style.display,
                            computedDisplay: newComputedStyle.display,
                            visibility: newComputedStyle.visibility,
                            opacity: newComputedStyle.opacity
                        });
                    }, 100);
                } else {
                    console.log('❌ FIRST QUESTION NOT FOUND IN DOM');
                }
            }, 1000);
        <% } %>

        // This script runs immediately to hide all questions except the first
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔧 Immediate question hiding script running...');

            // Wait a tiny bit for DOM to be fully ready
            setTimeout(function() {
                // Check if this is a complex quiz
                const isComplexQuiz = <%= quiz.isComplexQuiz ? 'true' : 'false' %>;
                const hasComplexQuizData = <%= quiz.complexQuizData ? 'true' : 'false' %>;

                console.log('🔍 Quiz type check:', { isComplexQuiz, hasComplexQuizData });

                if (isComplexQuiz && hasComplexQuizData) {
                    console.log('✅ Complex quiz detected - skipping regular question initialization');
                    return; // Don't initialize regular question logic for complex quizzes
                }

                // Regular quiz initialization
                const questionContainers = document.querySelectorAll('.question-container:not(.complex-question-group)');
                console.log('Found regular question containers:', questionContainers.length);
                console.log('Expected question containers:', <%= quiz.questions ? quiz.questions.length : 0 %>);

                // Debug: Show all question container IDs
                questionContainers.forEach((container, index) => {
                    console.log(`Container ${index}: ID=${container.id}, classes=${container.className}`);
                });

                // Only hide questions if we have the expected number
                const expectedCount = <%= quiz.questions ? quiz.questions.length : 0 %>;
                if (questionContainers.length === expectedCount) {
                    questionContainers.forEach((container, index) => {
                        if (container.classList) {
                            container.classList.remove('active');
                        }
                        container.style.display = 'none';
                        console.log(`Immediately hid question ${index}`);
                    });

                    // Show only the first question
                    if (questionContainers.length > 0) {
                        const firstQuestion = questionContainers[0];
                        if (firstQuestion.classList) {
                            firstQuestion.classList.add('active');
                        }
                        firstQuestion.style.display = 'block';
                        console.log('Immediately showed first question');
                        console.log('First question classes:', firstQuestion.className);
                        console.log('First question style:', firstQuestion.style.cssText);
                    }
                } else {
                    console.error(`❌ Question count mismatch! Found ${questionContainers.length}, expected ${expectedCount}`);
                    console.log('This suggests duplicate question rendering or leftover elements');

                    // Try to show only questions with proper IDs (question-0, question-1, etc.)
                    for (let i = 0; i < expectedCount; i++) {
                        const questionElement = document.getElementById(`question-${i}`);
                        if (questionElement) {
                            questionElement.style.display = i === 0 ? 'block' : 'none';
                            if (i === 0) {
                                console.log(`Showed question-${i} as first question`);
                            }
                        }
                    }
                }
            }, 10);
        });
    </script>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="/">SkillOns</a>
            </div>
            <div class="nav-menu">
                <a href="/student/dashboard" class="nav-link">Dashboard</a>
                <a href="/available-quizzes" class="nav-link">Browse Quizzes</a>
                <a href="/student/study-material" class="nav-link">View Study Material</a>
                <a href="/my-results" class="nav-link">My Results</a>
                <a href="/logout" class="nav-link logout-btn">Logout</a>
            </div>
        </div>
    </nav>

    <main class="main-content">
        <div class="quiz-taking-container">
            <div class="quiz-header">
                <div class="quiz-info">
                    <h1><%= quiz.title %></h1>
                    <p><%= quiz.description %></p>
                    

                </div>
                
                <div class="quiz-timer">
                    <div class="timer-display">
                        <i class="fas fa-clock"></i>
                        <span id="timer">00:00</span>
                    </div>
                </div>
            </div>

            <div class="progress-info">
                <span id="current-question">Question 1 of <%= quiz.questions.length %></span>
            </div>

            <div class="quiz-progress">
                <div class="progress-bar">
                    <div class="progress-fill" id="progress-fill"></div>
                </div>
            </div>

            <div class="quiz-content">


                <form id="quiz-form">
                    <div id="questions-container">
                        <!-- Debug: Template rendering check -->
                        <script>
                            console.log('🔍 TEMPLATE DEBUG - Questions container rendering...');
                            console.log('Quiz object keys:', <%= JSON.stringify(Object.keys(quiz)) %>);
                            console.log('Quiz isComplexQuiz:', <%= quiz.isComplexQuiz ? 'true' : 'false' %>);
                            console.log('Quiz has complexQuizData:', <%= quiz.complexQuizData ? 'true' : 'false' %>);
                            console.log('Quiz has questions:', <%= quiz.questions ? 'true' : 'false' %>);
                            console.log('Quiz has elements:', <%= quiz.elements ? 'true' : 'false' %>);
                            <% if (quiz.questions) { %>
                                console.log('Questions array length:', <%= quiz.questions.length %>);
                                console.log('Questions array type:', typeof <%= JSON.stringify(quiz.questions) %>);
                                <% if (quiz.questions.length > 0) { %>
                                    <% quiz.questions.forEach((question, index) => { %>
                                        console.log('Question <%= index %>:', {
                                            hasQuestion: <%= question.question ? 'true' : 'false' %>,
                                        questionText: '<%= question.question ? question.question.substring(0, 50).replace(/'/g, "\\'") : "No question text" %>...',
                                        hasOptions: <%= question.options ? 'true' : 'false' %>,
                                        optionsCount: <%= question.options ? question.options.length : 0 %>,
                                        type: '<%= question.type || "unknown" %>'
                                    });
                                <% }); %>
                            <% } %>
                        </script>

                        <% if (quiz.isComplexQuiz && quiz.complexQuizData) { %>
                            <!-- Complex Quiz Canvas Rendering -->
                            <div class="complex-quiz-container" style="position: relative; width: 100%; min-height: 600px; background: #ffffff; border: 1px solid #e2e8f0; border-radius: 8px; margin: 20px 0;">
                                <div id="complex-quiz-canvas" style="position: relative; width: 100%; height: 600px; overflow: auto;">
                                    <!-- Complex quiz elements will be rendered here -->
                                </div>
                            </div>

                            <script>
                                // Complex quiz data from server
                                const complexQuizData = <%- JSON.stringify(quiz.complexQuizData) %>;
                                console.log('Complex quiz data:', complexQuizData);

                                // Render complex quiz elements with one-question-per-page
                                function renderComplexQuiz() {
                                    const canvas = document.getElementById('complex-quiz-canvas');
                                    if (!canvas || !complexQuizData || !complexQuizData.elements) {
                                        console.log('No complex quiz data to render');
                                        return;
                                    }

                                    console.log('Rendering complex quiz with one-question-per-page navigation');
                                    console.log('Total elements:', complexQuizData.elements.length);

                                    // Group elements by questions
                                    const questionGroups = groupElementsByQuestions(complexQuizData.elements);
                                    console.log('Question groups:', questionGroups.length);

                                    // Clear canvas
                                    canvas.innerHTML = '';

                                    // Create question groups
                                    questionGroups.forEach((group, groupIndex) => {
                                        const questionGroupDiv = document.createElement('div');
                                        questionGroupDiv.className = 'complex-question-group';
                                        questionGroupDiv.id = `complex-question-${groupIndex}`;
                                        questionGroupDiv.setAttribute('data-question-index', groupIndex);

                                        // Add question header
                                        const headerDiv = document.createElement('div');
                                        headerDiv.className = 'complex-question-header';
                                        headerDiv.innerHTML = `Question ${groupIndex + 1} of ${questionGroups.length}`;
                                        questionGroupDiv.appendChild(headerDiv);

                                        // Add elements container
                                        const elementsDiv = document.createElement('div');
                                        elementsDiv.className = 'complex-question-elements';
                                        elementsDiv.style.position = 'relative';
                                        elementsDiv.style.minHeight = '400px';

                                        // Render elements in this group
                                        group.elements.forEach((element, index) => {
                                            const elementDiv = document.createElement('div');
                                            elementDiv.id = element.id;
                                            elementDiv.style.position = 'absolute';
                                            elementDiv.style.left = element.x + 'px';
                                            elementDiv.style.top = element.y + 'px';
                                            elementDiv.style.width = element.width + 'px';
                                            elementDiv.style.height = element.height + 'px';
                                            elementDiv.style.zIndex = '10';

                                            // Apply element styles
                                            if (element.style) {
                                                Object.keys(element.style).forEach(key => {
                                                    elementDiv.style[key] = element.style[key];
                                                });
                                            }

                                            elementDiv.innerHTML = getComplexElementContent(element);
                                            elementsDiv.appendChild(elementDiv);
                                        });

                                        // Note: Answer areas are now handled by explicit 'answer-area' elements
                                        // No automatic answer box creation to avoid duplicates

                                        questionGroupDiv.appendChild(elementsDiv);
                                        canvas.appendChild(questionGroupDiv);
                                    });

                                    // Initialize complex quiz navigation
                                    if (window.initializeComplexQuizNavigation) {
                                        window.initializeComplexQuizNavigation(questionGroups.length);
                                    } else {
                                        console.error('initializeComplexQuizNavigation not found');
                                    }

                                    // Process LaTeX if MathJax is available
                                    if (window.MathJax) {
                                        MathJax.typesetPromise([canvas]).catch(function (err) {
                                            console.log('MathJax typeset error:', err.message);
                                        });
                                    }

                                    console.log('Complex quiz rendered successfully with navigation');
                                }

                                // Group elements by questions for one-question-per-page navigation
                                function groupElementsByQuestions(elements) {
                                    const groups = [];
                                    let currentGroup = null;

                                    elements.forEach(element => {
                                        if (element.type === 'question' || element.type === 'sub-question') {
                                            // Start a new group for each question
                                            if (currentGroup) {
                                                groups.push(currentGroup);
                                            }
                                            currentGroup = {
                                                questionElement: element,
                                                elements: [element]
                                            };
                                        } else if (currentGroup) {
                                            // Add non-question elements to current group
                                            currentGroup.elements.push(element);
                                        } else {
                                            // If no question group exists yet, create a general group
                                            if (groups.length === 0) {
                                                groups.push({
                                                    questionElement: null,
                                                    elements: []
                                                });
                                            }
                                            groups[groups.length - 1].elements.push(element);
                                        }
                                    });

                                    // Add the last group if it exists
                                    if (currentGroup) {
                                        groups.push(currentGroup);
                                    }

                                    // If no groups were created, create a default group
                                    if (groups.length === 0) {
                                        groups.push({
                                            questionElement: null,
                                            elements: elements
                                        });
                                    }

                                    return groups;
                                }

                                // Get element content for student view
                                function getComplexElementContent(element) {
                                    switch(element.type) {
                                        case 'textbox':
                                            return '<div style="width: 100%; height: 100%; padding: 8px; overflow: auto;">' + (element.content || 'Text content') + '</div>';

                                        case 'question':
                                            return '<div style="padding: 15px; background: #f0f9ff; border-left: 4px solid #0ea5e9; height: 100%; box-sizing: border-box;">' +
                                                '<strong style="color: #0ea5e9;">Question:</strong>' +
                                                '<div style="margin-top: 8px;">' + (element.content || 'Question text') + '</div>' +
                                                '</div>';

                                        case 'sub-question':
                                            return '<div style="padding: 15px; background: #fefce8; border-left: 4px solid #eab308; margin-left: 20px; height: 100%; box-sizing: border-box;">' +
                                                '<strong style="color: #eab308;">Sub-question:</strong>' +
                                                '<div style="margin-top: 8px;">' + (element.content || 'Sub-question text') + '</div>' +
                                                '</div>';

                                        case 'answer-area':
                                            const answerId = 'complex-answer-' + element.id;
                                            return '<div style="padding: 15px; background: #f0fdf4; border: 2px dashed #22c55e; border-radius: 8px; height: 100%; box-sizing: border-box;">' +
                                                '<div style="color: #16a34a; font-weight: 600; margin-bottom: 8px;">' +
                                                '<i class="fas fa-edit" style="margin-right: 8px;"></i>Answer Area' +
                                                '</div>' +
                                                '<textarea id="' + answerId + '" style="width: 100%; height: calc(100% - 40px); border: 1px solid #e2e8f0; border-radius: 4px; padding: 8px; resize: none;" placeholder="Write your answer here..."></textarea>' +
                                                '</div>';

                                        case 'table':
                                            if (element.content && element.content.includes('<table')) {
                                                // If content contains table HTML, use it directly
                                                return element.content;
                                            } else {
                                                // Fallback table
                                                return '<table style="width: 100%; border-collapse: collapse; height: 100%;">' +
                                                    '<tr><td style="border: 1px solid #e2e8f0; padding: 8px;">Cell 1</td><td style="border: 1px solid #e2e8f0; padding: 8px;">Cell 2</td></tr>' +
                                                    '<tr><td style="border: 1px solid #e2e8f0; padding: 8px;">Cell 3</td><td style="border: 1px solid #e2e8f0; padding: 8px;">Cell 4</td></tr>' +
                                                    '</table>';
                                            }

                                        case 'image':
                                            if (element.content && element.content.startsWith('data:image')) {
                                                // Enhanced data URL validation
                                                var isValidDataURL = element.content.includes(',') &&
                                                                   element.content.length > 100 &&
                                                                   element.content.match(/^data:image\/(jpeg|jpg|png|gif|webp);base64,/);

                                                if (!isValidDataURL) {
                                                    console.warn('Invalid data URL detected for element:', element.id, 'Length:', element.content.length);
                                                    return '<div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #fee2e2; border: 2px dashed #ef4444; color: #dc2626;">' +
                                                        '<div style="text-align: center;"><i class="fas fa-exclamation-triangle fa-2x"></i><br><small>Invalid image data</small></div>' +
                                                        '</div>';
                                                }

                                                // Check for truncated data URLs (common issue)
                                                if (element.content.endsWith('...')) {
                                                    console.warn('Truncated data URL detected for element:', element.id);
                                                    return '<div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #fef3c7; border: 2px dashed #f59e0b; color: #92400e;">' +
                                                        '<div style="text-align: center;"><i class="fas fa-exclamation-triangle fa-2x"></i><br><small>Image data was truncated<br>Please re-upload the image</small></div>' +
                                                        '</div>';
                                                }

                                                var objectFit = element.objectFit || 'contain';
                                                var objectPosition = element.objectPosition || 'center';

                                                // Create safe data URL
                                                var safeDataURL = element.content;

                                                return '<div style="width: 100%; height: 100%; overflow: hidden; border-radius: 4px;">' +
                                                    '<img src="' + safeDataURL + '" style="width: 100%; height: 100%; object-fit: ' + objectFit + '; object-position: ' + objectPosition + '; border-radius: 4px; display: block;" alt="Quiz Image" onerror="this.parentElement.innerHTML=\'<div style=\\\'display: flex; align-items: center; justify-content: center; height: 100%; background: #fee2e2; border: 2px dashed #ef4444; color: #dc2626;\\\'><div style=\\\'text-align: center;\\\'><i class=\\\'fas fa-exclamation-triangle fa-2x\\\'></i><br><small>Image failed to load</small></div></div>\';">' +
                                                    '</div>';
                                            } else {
                                                return '<div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #f8fafc; border: 2px dashed #cbd5e1; color: #64748b;">' +
                                                    '<div style="text-align: center;"><i class="fas fa-image fa-2x"></i><br><small>Image</small></div>' +
                                                    '</div>';
                                            }

                                        case 'latex':
                                            return '<div style="display: flex; align-items: center; justify-content: center; height: 100%; padding: 10px; background: #fefce8; border: 1px solid #eab308; border-radius: 4px;">' +
                                                '<div class="math-content">$$' + (element.content || 'x = \\frac{-b \\pm \\sqrt{b^2-4ac}}{2a}') + '$$</div>' +
                                                '</div>';

                                        // 2D Geometric Shapes
                                        case 'line':
                                            var lineLength = element.shapeLength || 180;
                                            var lineViewBox = '0 0 ' + (lineLength + 20) + ' 20';
                                            var lineX2 = lineLength + 10;
                                            return '<svg width="100%" height="100%" viewBox="' + lineViewBox + '" style="background: #ffffff;">' +
                                                '<line x1="10" y1="10" x2="' + lineX2 + '" y2="10" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '"' +
                                                (element.strokeDasharray ? ' stroke-dasharray="' + element.strokeDasharray + '"' : '') + ' />' +
                                                '</svg>';

                                        case 'triangle':
                                            var baseWidth = element.shapeBaseWidth || 110;
                                            var triangleHeight = element.shapeHeight || 110;
                                            var triangleViewBox = '0 0 ' + (baseWidth + 20) + ' ' + (triangleHeight + 20);
                                            var topX = (baseWidth + 20) / 2;
                                            var topY = 10;
                                            var leftX = 10;
                                            var rightX = baseWidth + 10;
                                            var bottomY = triangleHeight + 10;
                                            return '<svg width="100%" height="100%" viewBox="' + triangleViewBox + '" style="background: #ffffff;">' +
                                                '<polygon points="' + topX + ',' + topY + ' ' + leftX + ',' + bottomY + ' ' + rightX + ',' + bottomY + '" fill="' + (element.fillColor || '#dbeafe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        case 'square':
                                            var sideLength = element.shapeSideLength || 100;
                                            var squareViewBox = '0 0 ' + (sideLength + 20) + ' ' + (sideLength + 20);
                                            return '<svg width="100%" height="100%" viewBox="' + squareViewBox + '" style="background: #ffffff;">' +
                                                '<rect x="10" y="10" width="' + sideLength + '" height="' + sideLength + '" fill="' + (element.fillColor || '#dbeafe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        case 'rectangle':
                                            var rectWidth = element.shapeWidth || 160;
                                            var rectHeight = element.shapeHeight || 100;
                                            var rectViewBox = '0 0 ' + (rectWidth + 20) + ' ' + (rectHeight + 20);
                                            return '<svg width="100%" height="100%" viewBox="' + rectViewBox + '" style="background: #ffffff;">' +
                                                '<rect x="10" y="10" width="' + rectWidth + '" height="' + rectHeight + '" fill="' + (element.fillColor || '#dbeafe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        case 'rhombus':
                                            var rhombusWidth = element.shapeWidth || 140;
                                            var rhombusHeight = element.shapeHeight || 100;
                                            var rhombusViewBox = '0 0 ' + (rhombusWidth + 20) + ' ' + (rhombusHeight + 20);
                                            var rhombusCenterX = (rhombusWidth + 20) / 2;
                                            var rhombusCenterY = rhombusHeight / 2 + 10;
                                            var rhombusHalfWidth = rhombusWidth / 2;
                                            var rhombusHalfHeight = rhombusHeight / 2;
                                            var rhombusTop = rhombusCenterX + ',' + (rhombusCenterY - rhombusHalfHeight);
                                            var rhombusRight = (rhombusCenterX + rhombusHalfWidth) + ',' + rhombusCenterY;
                                            var rhombusBottom = rhombusCenterX + ',' + (rhombusCenterY + rhombusHalfHeight);
                                            var rhombusLeft = (rhombusCenterX - rhombusHalfWidth) + ',' + rhombusCenterY;
                                            return '<svg width="100%" height="100%" viewBox="' + rhombusViewBox + '" style="background: #ffffff;">' +
                                                '<polygon points="' + rhombusTop + ' ' + rhombusRight + ' ' + rhombusBottom + ' ' + rhombusLeft + '" fill="' + (element.fillColor || '#dbeafe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        case 'parallelogram':
                                            var paraWidth = element.shapeWidth || 160;
                                            var paraHeight = element.shapeHeight || 80;
                                            var paraViewBox = '0 0 ' + (paraWidth + 40) + ' ' + (paraHeight + 20);
                                            var skew = 20;
                                            var topLeft = (skew + 10) + ',10';
                                            var topRight = (paraWidth + skew + 10) + ',10';
                                            var bottomRight = (paraWidth + 10) + ',' + (paraHeight + 10);
                                            var bottomLeft = '10,' + (paraHeight + 10);
                                            return '<svg width="100%" height="100%" viewBox="' + paraViewBox + '" style="background: #ffffff;">' +
                                                '<polygon points="' + topLeft + ' ' + topRight + ' ' + bottomRight + ' ' + bottomLeft + '" fill="' + (element.fillColor || '#dbeafe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        case 'circle':
                                            var diameter = element.shapeDiameter || 100;
                                            var radius = diameter / 2;
                                            var circleViewBox = '0 0 ' + (diameter + 20) + ' ' + (diameter + 20);
                                            var circleCx = (diameter + 20) / 2;
                                            var circleCy = (diameter + 20) / 2;
                                            return '<svg width="100%" height="100%" viewBox="' + circleViewBox + '" style="background: #ffffff;">' +
                                                '<circle cx="' + circleCx + '" cy="' + circleCy + '" r="' + radius + '" fill="' + (element.fillColor || '#dbeafe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        case 'pentagon':
                                            var pentSize = element.shapeSize || 90;
                                            var pentViewBox = '0 0 ' + (pentSize + 20) + ' ' + (pentSize + 20);
                                            var pentCenterX = (pentSize + 20) / 2;
                                            var pentCenterY = (pentSize + 20) / 2;
                                            var pentRadius = pentSize / 2;
                                            var pentPoints = [];
                                            for (var i = 0; i < 5; i++) {
                                                var angle = (i * 2 * Math.PI / 5) - (Math.PI / 2);
                                                var x = pentCenterX + pentRadius * Math.cos(angle);
                                                var y = pentCenterY + pentRadius * Math.sin(angle);
                                                pentPoints.push(x.toFixed(1) + ',' + y.toFixed(1));
                                            }
                                            return '<svg width="100%" height="100%" viewBox="' + pentViewBox + '" style="background: #ffffff;">' +
                                                '<polygon points="' + pentPoints.join(' ') + '" fill="' + (element.fillColor || '#dbeafe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        case 'hexagon':
                                            var hexSize = element.shapeSize || 90;
                                            var hexViewBox = '0 0 ' + (hexSize + 20) + ' ' + (hexSize + 20);
                                            var hexCenterX = (hexSize + 20) / 2;
                                            var hexCenterY = (hexSize + 20) / 2;
                                            var hexRadius = hexSize / 2;
                                            var hexPoints = [];
                                            for (var i = 0; i < 6; i++) {
                                                var angle = (i * 2 * Math.PI / 6) - (Math.PI / 2);
                                                var x = hexCenterX + hexRadius * Math.cos(angle);
                                                var y = hexCenterY + hexRadius * Math.sin(angle);
                                                hexPoints.push(x.toFixed(1) + ',' + y.toFixed(1));
                                            }
                                            return '<svg width="100%" height="100%" viewBox="' + hexViewBox + '" style="background: #ffffff;">' +
                                                '<polygon points="' + hexPoints.join(' ') + '" fill="' + (element.fillColor || '#dbeafe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        // 3D Shapes
                                        case 'cube':
                                            var cubeSize = element.shapeSize || 80;
                                            var cubeViewBox = '0 0 ' + (cubeSize + 40) + ' ' + (cubeSize + 40);
                                            var cubeDepth = cubeSize * 0.3;
                                            var cubeFrontX = 20;
                                            var cubeFrontY = cubeDepth + 20;
                                            return '<svg width="100%" height="100%" viewBox="' + cubeViewBox + '" style="background: #ffffff;">' +
                                                '<rect x="' + cubeFrontX + '" y="' + cubeFrontY + '" width="' + cubeSize + '" height="' + cubeSize + '" fill="' + (element.fillColor || '#dbeafe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '<polygon points="' + cubeFrontX + ',' + cubeFrontY + ' ' + (cubeFrontX + cubeDepth) + ',' + (cubeFrontY - cubeDepth) + ' ' + (cubeFrontX + cubeSize + cubeDepth) + ',' + (cubeFrontY - cubeDepth) + ' ' + (cubeFrontX + cubeSize) + ',' + cubeFrontY + '" fill="' + (element.fillColor || '#bfdbfe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '<polygon points="' + (cubeFrontX + cubeSize) + ',' + cubeFrontY + ' ' + (cubeFrontX + cubeSize + cubeDepth) + ',' + (cubeFrontY - cubeDepth) + ' ' + (cubeFrontX + cubeSize + cubeDepth) + ',' + (cubeFrontY + cubeSize - cubeDepth) + ' ' + (cubeFrontX + cubeSize) + ',' + (cubeFrontY + cubeSize) + '" fill="' + (element.fillColor || '#93c5fd') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        case 'sphere':
                                            var sphereSize = element.shapeSize || 80;
                                            var sphereRadius = sphereSize / 2;
                                            var sphereViewBox = '0 0 ' + (sphereSize + 20) + ' ' + (sphereSize + 20);
                                            var sphereCx = (sphereSize + 20) / 2;
                                            var sphereCy = (sphereSize + 20) / 2;
                                            return '<svg width="100%" height="100%" viewBox="' + sphereViewBox + '" style="background: #ffffff;">' +
                                                '<defs><radialGradient id="sphereGrad-' + element.id + '" cx="0.3" cy="0.3">' +
                                                '<stop offset="0%" stop-color="#ffffff" />' +
                                                '<stop offset="100%" stop-color="' + (element.fillColor || '#3b82f6') + '" />' +
                                                '</radialGradient></defs>' +
                                                '<circle cx="' + sphereCx + '" cy="' + sphereCy + '" r="' + sphereRadius + '" fill="url(#sphereGrad-' + element.id + ')" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        case 'cuboid':
                                            var cuboidWidth = element.shapeWidth || 120;
                                            var cuboidHeight = element.shapeHeight || 80;
                                            var cuboidDepth = element.shapeDepth || 60;
                                            var cuboidViewBox = '0 0 ' + (cuboidWidth + cuboidDepth + 20) + ' ' + (cuboidHeight + cuboidDepth + 20);
                                            var cuboidFrontX = 10;
                                            var cuboidFrontY = cuboidDepth + 10;
                                            return '<svg width="100%" height="100%" viewBox="' + cuboidViewBox + '" style="background: #ffffff;">' +
                                                '<rect x="' + cuboidFrontX + '" y="' + cuboidFrontY + '" width="' + cuboidWidth + '" height="' + cuboidHeight + '" fill="' + (element.fillColor || '#dbeafe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '<polygon points="' + cuboidFrontX + ',' + cuboidFrontY + ' ' + (cuboidFrontX + cuboidDepth) + ',' + (cuboidFrontY - cuboidDepth) + ' ' + (cuboidFrontX + cuboidWidth + cuboidDepth) + ',' + (cuboidFrontY - cuboidDepth) + ' ' + (cuboidFrontX + cuboidWidth) + ',' + cuboidFrontY + '" fill="' + (element.fillColor || '#bfdbfe') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '<polygon points="' + (cuboidFrontX + cuboidWidth) + ',' + cuboidFrontY + ' ' + (cuboidFrontX + cuboidWidth + cuboidDepth) + ',' + (cuboidFrontY - cuboidDepth) + ' ' + (cuboidFrontX + cuboidWidth + cuboidDepth) + ',' + (cuboidFrontY + cuboidHeight - cuboidDepth) + ' ' + (cuboidFrontX + cuboidWidth) + ',' + (cuboidFrontY + cuboidHeight) + '" fill="' + (element.fillColor || '#93c5fd') + '" stroke="' + (element.strokeColor || '#3b82f6') + '" stroke-width="' + (element.strokeWidth || 2) + '" />' +
                                                '</svg>';

                                        // Charts
                                        case 'bar-chart':
                                        case 'line-chart':
                                        case 'pie-chart':
                                            // Schedule chart rendering for student view
                                            setTimeout(function() { renderStudentChart(element); }, 100);
                                            return '<div style="padding: 15px; background: #f8fafc; border: 1px solid #e2e8f0; height: 100%; box-sizing: border-box;">' +
                                                '<canvas id="student-chart-' + element.id + '" style="width: 100%; height: calc(100% - 40px);"></canvas>' +
                                                '<small style="color: #64748b; display: block; text-align: center; margin-top: 8px;">' + element.type.replace('-', ' ').toUpperCase() + '</small>' +
                                                '</div>';

                                        default:
                                            return '<div style="padding: 8px; background: #f8fafc; border: 1px solid #e2e8f0; border-radius: 4px; height: 100%; box-sizing: border-box;">' +
                                                (element.content || 'Content') +
                                                '</div>';
                                    }
                                }

                                // Render complex quiz when page loads
                                document.addEventListener('DOMContentLoaded', function() {
                                    renderComplexQuiz();

                                    // Process LaTeX if MathJax is available
                                    if (window.MathJax) {
                                        setTimeout(() => {
                                            MathJax.typesetPromise().catch(console.error);
                                        }, 500);
                                    }
                                });
                            </script>
                        <% } else { %>
                            <!-- Regular Quiz Questions -->
                            <script>
                                console.log('🔍 REGULAR QUIZ SECTION - About to render questions...');
                                console.log('Questions available:', <%= quiz.questions ? quiz.questions.length : 0 %>);

                                // Debug: Check questions after rendering
                                setTimeout(() => {
                                    const renderedQuestions = document.querySelectorAll('.question-container:not(.complex-question-group)');
                                    console.log('🔍 QUESTIONS RENDERED:', renderedQuestions.length);
                                    renderedQuestions.forEach((q, i) => {
                                        console.log(`Rendered question ${i}: ID=${q.id}, classes=${q.className}, display=${window.getComputedStyle(q).display}`);
                                    });
                                }, 100);
                            </script>

                            <!-- Debug: Check questions before rendering -->
                            <script>
                                console.log('🔍 QUESTIONS RENDERING CHECK:');
                                console.log('quiz.questions exists:', <%= quiz.questions ? 'true' : 'false' %>);
                                <% if (quiz.questions) { %>
                                    console.log('quiz.questions.length:', <%= quiz.questions.length %>);
                                    console.log('quiz.questions is array:', <%= Array.isArray(quiz.questions) %>);
                                <% } else { %>
                                    console.log('❌ quiz.questions is null/undefined');
                                <% } %>
                            </script>

                            <% if (quiz.questions && quiz.questions.length > 0) { %>
                                <% quiz.questions.forEach((question, index) => { %>
                                <div class="question-container <%= index === 0 ? 'active' : '' %>" id="question-<%= index %>" data-question-index="<%= index %>">
                                    <div class="question-header">
                                        <h3>Question <%= index + 1 %> of <%= quiz.questions.length %></h3>
                                        <span class="question-points"><%= question.points %> point<%= question.points !== 1 ? 's' : '' %></span>
                                    </div>

                                    <div class="question-content">
                                        <div class="question-text">
                                            <p><%- question.question %></p>
                                        </div>

                                        <!-- Question Image Display -->
                                        <% if (question.image) { %>
                                            <div class="question-image-container" data-s3-key="<%= question.image %>">
                                                <div class="question-image-loading" style="text-align: center; padding: 20px;">
                                                    <i class="fas fa-spinner fa-spin"></i> Loading question image...
                                                </div>
                                                <img class="question-image" style="max-width: 100%; max-height: 400px; margin-top: 15px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); display: none;" alt="Question Image">
                                            </div>
                                        <% } %>

                                        <% if (question.type === 'multiple-choice' && question.options && question.options.length > 0) { %>
                                            <!-- Multiple Choice Options -->
                                            <div class="options-list">
                                                <% question.options.forEach((option, optionIndex) => { %>
                                                    <div class="option-item" data-question="<%= index %>" data-option="<%= optionIndex %>">
                                                        <input type="radio"
                                                               id="q<%= index %>-opt<%= optionIndex %>"
                                                               name="question-<%= index %>"
                                                               value="<%= option %>"
                                                               data-question="<%= index %>"
                                                               data-option="<%= optionIndex %>">
                                                        <label for="q<%= index %>-opt<%= optionIndex %>" class="option-label">
                                                            <%= String.fromCharCode(65 + optionIndex) %>)
                                                        </label>
                                                        <span class="option-text"><%- option %></span>
                                                    </div>
                                                <% }); %>
                                            </div>
                                        <% } else if (question.type === 'short-answer' || question.isTextAnswer) { %>
                                            <!-- Text Answer Section -->
                                            <div class="text-answer-section">
                                                <label for="text-answer-<%= index %>" class="text-answer-label">
                                                    <i class="fas fa-edit"></i> Your Answer:
                                                </label>
                                                <textarea
                                                    id="text-answer-<%= index %>"
                                                    name="text-answer-<%= index %>"
                                                    class="text-answer-input"
                                                    placeholder="Type your answer here..."
                                                    rows="6"
                                                    data-question="<%= index %>"></textarea>

                                                <small class="text-muted">
                                                    <i class="fas fa-info-circle me-1"></i>
                                                    This is a text answer question. You can use rich text formatting and math equations.
                                                </small>
                                            </div>
                                        <% } else if (question.options && question.options.length > 0) { %>
                                            <!-- Fallback to multiple choice if type is not specified but options exist -->
                                            <div class="options-list">
                                                <% question.options.forEach((option, optionIndex) => { %>
                                                    <div class="option-item" data-question="<%= index %>" data-option="<%= optionIndex %>">
                                                        <input type="radio"
                                                               id="q<%= index %>-opt<%= optionIndex %>"
                                                               name="question-<%= index %>"
                                                               value="<%= option %>"
                                                               data-question="<%= index %>"
                                                               data-option="<%= optionIndex %>">
                                                        <label for="q<%= index %>-opt<%= optionIndex %>" class="option-label">
                                                            <%= String.fromCharCode(65 + optionIndex) %>)
                                                        </label>
                                                        <span class="option-text"><%- option %></span>
                                                    </div>
                                                <% }); %>
                                            </div>
                                        <% } else { %>
                                            <!-- No options available - show text input as fallback -->
                                            <div class="text-answer-section">
                                                <label for="text-answer-<%= index %>" class="text-answer-label">
                                                    <i class="fas fa-edit"></i> Your Answer:
                                                </label>
                                                <textarea
                                                    id="text-answer-<%= index %>"
                                                    name="text-answer-<%= index %>"
                                                    class="text-answer-input"
                                                    placeholder="Type your answer here..."
                                                    rows="6"
                                                    data-question="<%= index %>"></textarea>

                                                <small class="text-muted">
                                                    <i class="fas fa-info-circle me-1"></i>
                                                    Please provide your answer in the text area above.
                                                </small>
                                            </div>
                                        <% } %>
                                    </div>
                                </div>
                                <% }); %>
                            <% } else { %>
                                <!-- No questions available -->
                                <script>
                                    console.log('❌ NO QUESTIONS FOUND - Quiz has no questions to display');
                                </script>
                                <div class="alert alert-warning" style="margin: 20px; padding: 20px; text-align: center;">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <h4>No Questions Available</h4>
                                    <p>This quiz does not contain any questions to display.</p>
                                </div>
                            <% } %>
                        <% } %>

                        <!-- Question Progress Indicator with Achievement Badge -->
                        <div class="quiz-progress-container" style="margin-bottom: 20px; padding: 20px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 12px; border: 1px solid #dee2e6; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
                            <div class="progress-header" style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">
                                <div style="display: flex; align-items: center; gap: 15px;">
                                    <!-- Mini Achievement Badge -->
                                    <div class="mini-badge" style="position: relative;">
                                        <svg width="40" height="40" viewBox="0 0 40 40" style="filter: drop-shadow(0 2px 5px rgba(0,0,0,0.2));">
                                            <circle cx="20" cy="20" r="18" fill="url(#miniGoldGradient)" stroke="#FFD700" stroke-width="1"/>
                                            <circle cx="20" cy="20" r="14" fill="url(#miniInnerGradient)" stroke="#FFA500" stroke-width="0.5"/>
                                            <path d="M20 10 L23 16 L29 16 L24.5 20 L26 26 L20 23 L14 26 L15.5 20 L11 16 L17 16 Z"
                                                  fill="#FFD700" stroke="#FF8C00" stroke-width="0.5"/>
                                            <defs>
                                                <radialGradient id="miniGoldGradient" cx="50%" cy="30%">
                                                    <stop offset="0%" style="stop-color:#FFD700;stop-opacity:1" />
                                                    <stop offset="100%" style="stop-color:#FFA500;stop-opacity:1" />
                                                </radialGradient>
                                                <radialGradient id="miniInnerGradient" cx="50%" cy="30%">
                                                    <stop offset="0%" style="stop-color:#FFF8DC;stop-opacity:1" />
                                                    <stop offset="100%" style="stop-color:#FFD700;stop-opacity:1" />
                                                </radialGradient>
                                            </defs>
                                        </svg>
                                        <div id="progress-sparkle" style="position: absolute; top: -2px; right: -2px; font-size: 12px; animation: sparkle 2s infinite; opacity: 0;">✨</div>
                                    </div>

                                    <div>
                                        <span class="progress-text" style="font-weight: 700; color: #495057; font-size: 16px;">
                                            Question <span id="current-question-number">1</span> of <%= quiz.questions.length %>
                                        </span>
                                        <div style="font-size: 12px; color: #6c757d; margin-top: 2px;">
                                            🎯 Keep going! You're doing great!
                                        </div>
                                    </div>
                                </div>

                                <div style="text-align: right;">
                                    <span class="progress-percentage" style="font-size: 18px; color: #667eea; font-weight: 700;">
                                        <span id="progress-percentage">0</span>%
                                    </span>
                                    <div style="font-size: 12px; color: #6c757d;">Complete</div>
                                </div>
                            </div>

                            <div class="progress-bar-container" style="width: 100%; height: 12px; background: #e9ecef; border-radius: 6px; overflow: hidden; box-shadow: inset 0 2px 4px rgba(0,0,0,0.1);">
                                <div id="progress-bar" style="height: 100%; background: linear-gradient(90deg, #667eea 0%, #764ba2 100%); width: 0%; transition: width 0.5s ease; position: relative;">
                                    <div style="position: absolute; top: 0; left: 0; right: 0; bottom: 0; background: linear-gradient(90deg, transparent 0%, rgba(255,255,255,0.3) 50%, transparent 100%); animation: shimmer 2s infinite;"></div>
                                </div>
                            </div>

                            <!-- Achievement Milestones -->
                            <div style="display: flex; justify-content: space-between; margin-top: 10px; font-size: 12px; color: #6c757d;">
                                <span id="milestone-25" style="opacity: 0.5;">🥉 25%</span>
                                <span id="milestone-50" style="opacity: 0.5;">🥈 50%</span>
                                <span id="milestone-75" style="opacity: 0.5;">🥇 75%</span>
                                <span id="milestone-100" style="opacity: 0.5;">🏆 100%</span>
                            </div>
                        </div>

                        <style>
                            @keyframes shimmer {
                                0% { transform: translateX(-100%); }
                                100% { transform: translateX(100%); }
                            }

                            .mini-badge:hover {
                                transform: scale(1.1);
                                transition: transform 0.3s ease;
                            }
                        </style>




                    <div class="quiz-navigation">
                        <% if (quiz.isComplexQuiz && quiz.complexQuizData) { %>
                            <!-- Complex Quiz Navigation - One Question Per Page -->
                            <div class="quiz-navigation-container" style="margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 8px; border: 1px solid #e9ecef;">
                                <div class="nav-buttons" style="display: flex; justify-content: space-between; align-items: center;">
                                    <button type="button" id="complex-prev-btn" class="btn btn-outline-secondary" disabled style="min-width: 120px;">
                                        <i class="fas fa-chevron-left"></i> Previous
                                    </button>

                                    <div class="question-status" style="text-align: center;">
                                        <div id="complex-answer-status" class="answer-status" style="font-size: 14px; color: #6c757d; margin-bottom: 5px;">
                                            Please answer the question to continue
                                        </div>
                                        <div id="complex-question-indicators" class="question-indicators" style="display: flex; gap: 8px; justify-content: center;">
                                            <!-- Question indicators will be populated by JavaScript -->
                                        </div>
                                    </div>

                                    <button type="button" id="complex-next-btn" class="btn btn-primary" style="min-width: 120px;">
                                        Next <i class="fas fa-chevron-right"></i>
                                    </button>

                                    <button type="submit" id="submit-complex-quiz-btn" class="btn btn-success" style="display: none; min-width: 120px;">
                                        <i class="fas fa-check"></i> Submit Quiz
                                    </button>
                                </div>

                                <!-- Answer Requirement Alert for Complex Quiz -->
                                <div id="complex-answer-required-alert" class="alert alert-warning" style="display: none; margin-top: 15px; margin-bottom: 0;">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <strong>Answer Required:</strong> Please answer the question before proceeding to the next one.
                                </div>
                            </div>
                        <% } else { %>
                            <!-- Regular Quiz Navigation - One Question Per Page -->
                            <div class="quiz-navigation-container" style="margin-top: 30px; padding: 20px; background: #f8f9fa; border-radius: 8px; border: 1px solid #e9ecef;">
                                <div class="nav-buttons" style="display: flex; justify-content: space-between; align-items: center;">
                                    <button type="button" id="prev-btn" class="btn btn-outline-secondary" disabled style="min-width: 120px;">
                                        <i class="fas fa-chevron-left"></i> Previous
                                    </button>

                                    <div class="question-status" style="text-align: center;">
                                        <div id="answer-status" class="answer-status" style="font-size: 14px; color: #6c757d; margin-bottom: 5px;">
                                            Please select an answer to continue
                                        </div>
                                        <div class="question-indicators" style="display: flex; gap: 8px; justify-content: center;">
                                            <% for (let i = 0; i < quiz.questions.length; i++) { %>
                                                <div class="question-indicator" data-question="<%= i %>" style="width: 12px; height: 12px; border-radius: 50%; background: #e9ecef; border: 2px solid #dee2e6; cursor: pointer; transition: all 0.2s ease;" title="Question <%= i + 1 %>"></div>
                                            <% } %>
                                        </div>
                                    </div>

                                    <button type="button" id="next-btn" class="btn btn-primary" style="min-width: 120px;">
                                        Next <i class="fas fa-chevron-right"></i>
                                    </button>

                                    <button type="submit" id="submit-btn" class="btn btn-success" style="display: none; min-width: 120px;">
                                        <i class="fas fa-check"></i> Submit Quiz
                                    </button>
                                </div>

                                <!-- Answer Requirement Alert -->
                                <div id="answer-required-alert" class="alert alert-warning" style="display: none; margin-top: 15px; margin-bottom: 0;">
                                    <i class="fas fa-exclamation-triangle"></i>
                                    <strong>Answer Required:</strong> Please answer the question before proceeding to the next one.
                                </div>
                            </div>
                        <% } %>
                </form>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="footer-content">
            <p>&copy; 2025 SkillOns. All rights reserved.</p>
        </div>
    </footer>

    <script>
        console.log('🚀 Script starting to execute...');
        
        // Global quiz data variables
        let currentQuestion = 0;
        let answers = {};
        let startTime = Date.now();
        let timerInterval;
        const totalQuestions = <%= quiz.questions.length %>;
        const quizId = '<%= quiz._id %>';
        
        // Initialize quiz
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🚀 DOM Content Loaded - Starting quiz initialization');
            
            // Check if timer element exists immediately
            const timerElement = document.getElementById('timer');
            console.log('🔍 Timer element found:', timerElement);
            console.log('🔍 Timer element HTML:', timerElement ? timerElement.outerHTML : 'NOT FOUND');
            
            // Longer delay to ensure all elements are fully rendered
            setTimeout(() => {
                console.log('⏰ Starting timer...');
                const timerElementDelayed = document.getElementById('timer');
                console.log('🔍 Timer element after delay:', timerElementDelayed);
                
                if (timerElementDelayed) {
                    startTimer();
                    console.log('📊 Updating progress...');
                    updateProgress();
                    console.log('✅ Initializing answered questions...');
                    initializeAnsweredQuestions();
                } else {
                    console.error('❌ Timer element still not found after delay');
                    // Try to find any timer-related elements
                    const allSpans = document.querySelectorAll('span');
                    console.log('🔍 All span elements:', allSpans);
                    allSpans.forEach((span, index) => {
                        if (span.id === 'timer' || span.textContent.includes('00:00')) {
                            console.log(`🔍 Found potential timer element ${index}:`, span);
                        }
                    });
                }
            }, 500);
            
            // Add event listeners for navigation buttons with null checks
            const nextBtn = document.getElementById('next-btn');
            const prevBtn = document.getElementById('prev-btn');

            if (nextBtn) {
                nextBtn.addEventListener('click', nextQuestion);
            } else {
                console.warn('Next button not found');
            }

            if (prevBtn) {
                prevBtn.addEventListener('click', previousQuestion);
            } else {
                console.warn('Previous button not found');
            }

            // Add event listeners for question indicators
            const indicators = document.querySelectorAll('.question-indicator');
            if (indicators.length > 0) {
                indicators.forEach((indicator, index) => {
                    if (indicator) {
                        indicator.addEventListener('click', () => goToQuestion(index));
                    }
                });
            } else {
                console.warn('No question indicators found');
            }

            // Add event listeners for option items (click anywhere on the option area)
            const optionItems = document.querySelectorAll('.option-item');
            if (optionItems.length > 0) {
                optionItems.forEach((optionItem) => {
                    if (optionItem) {
                        optionItem.addEventListener('click', function() {
                            const questionIndex = this.dataset.question;
                            const optionIndex = this.dataset.option;
                            selectOption(questionIndex, optionIndex);
                        });
                    }
                });
            } else {
                console.warn('No option items found');
            }
            
            // Initialize one-question-per-page navigation with delay
            setTimeout(() => {
                // Check if this is a complex quiz
                const isComplexQuiz = <%= quiz.isComplexQuiz ? 'true' : 'false' %>;
                const hasComplexQuizData = <%= quiz.complexQuizData ? 'true' : 'false' %>;

                if (isComplexQuiz && hasComplexQuizData) {
                    console.log('✅ Complex quiz detected - skipping regular quiz initialization');
                    // Complex quiz initialization is handled by renderComplexQuiz()
                    setupBeforeUnloadProtection();
                    return;
                }

                // Regular quiz initialization
                const firstQuestion = document.getElementById('question-0');
                const isFirstQuestionVisible = firstQuestion &&
                    firstQuestion.style.display === 'block';

                if (!isFirstQuestionVisible) {
                    console.log('🔄 First question not visible, running full initialization...');
                    initializeOneQuestionPerPage();
                } else {
                    console.log('✅ First question already visible, skipping duplicate initialization');
                    // Just set up navigation state
                    updateNavigationState();
                    updateProgress();
                }

                // Set up beforeunload protection after initialization
                setupBeforeUnloadProtection();
            }, 500);
        });

        // Initialize visual feedback for already answered questions
        function initializeAnsweredQuestions() {
            document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
                const questionIndex = parseInt(radio.dataset.question);
                const optionIndex = parseInt(radio.dataset.option);
                
                // Mark the option as selected
                const questionContainer = document.getElementById(`question-${questionIndex}`);
                if (questionContainer) {
                    const selectedOption = questionContainer.querySelector(`.option-item[data-option="${optionIndex}"]`);
                    if (selectedOption) {
                        selectedOption.classList.add('option-selected');
                    }
                }
                
                // Mark the indicator as answered
                const indicator = document.getElementById(`indicator-${questionIndex}`);
                if (indicator) {
                    indicator.classList.add('answered');
                }
                
                // Store in answers object with correct format
                answers[questionIndex] = {
                    selectedAnswer: radio.value
                };
            });
        }

        // Function to select an option when clicking anywhere on the option area
        function selectOption(questionIndex, optionIndex) {
            console.log('🎯 selectOption called with:', questionIndex, optionIndex);
            // Convert string indices to integers
            questionIndex = parseInt(questionIndex);
            optionIndex = parseInt(optionIndex);
            
            const radioButton = document.getElementById(`q${questionIndex}-opt${optionIndex}`);
            if (radioButton) {
                radioButton.checked = true;
                
                // Update visual feedback for all options in this question
                const questionContainer = document.getElementById(`question-${questionIndex}`);
                const allOptions = questionContainer.querySelectorAll('.option-item');
                
                // Remove selected class from all options
                allOptions.forEach(opt => opt.classList.remove('option-selected'));
                
                // Add selected class to the clicked option
                const selectedOption = questionContainer.querySelector(`.option-item[data-option="${optionIndex}"]`);
                if (selectedOption) {
                    selectedOption.classList.add('option-selected');
                }
                
                // Update the question indicator to show it's been answered
                const indicator = document.getElementById(`indicator-${questionIndex}`);
                if (indicator) {
                    indicator.classList.add('answered');
                }
                
                // Store the answer as an object with selectedAnswer property
                answers[questionIndex] = {
                    selectedAnswer: radioButton.value
                };
                
                // Debug log
                console.log(`Selected option for question ${questionIndex}:`, radioButton.value);
                console.log('Current answers object:', answers);
            }
        }
        
        // Also make it available on window for competitive mode
        window.selectOption = selectOption;

        // Function to handle text answer updates
        function updateTextAnswer(questionIndex, value) {
            questionIndex = parseInt(questionIndex);
            
            // Store the text answer (trimmed to remove extra whitespace)
            answers[questionIndex] = {
                selectedAnswer: value.trim()
            };
            
            // Update the question indicator to show it's been answered
            const indicator = document.getElementById(`indicator-${questionIndex}`);
            if (indicator && value.trim()) {
                indicator.classList.add('answered');
            } else if (indicator) {
                indicator.classList.remove('answered');
            }
            
            // Debug log
            console.log(`Text answer for question ${questionIndex}:`, value);
            console.log('Current answers object:', answers);
        }

        // Function to handle fallback text answers for questions without options
        function handleFallbackAnswer(questionIndex, value) {
            questionIndex = parseInt(questionIndex);

            // Store the fallback answer
            answers[questionIndex] = {
                selectedAnswer: value.trim(),
                isFallbackAnswer: true
            };

            // Update the question indicator to show it's been answered
            const indicator = document.getElementById(`indicator-${questionIndex}`);
            if (indicator && value.trim()) {
                indicator.classList.add('answered');
            } else if (indicator) {
                indicator.classList.remove('answered');
            }

            console.log(`📝 Fallback answer updated for question ${questionIndex + 1}:`, value.trim());

            // Update progress and status
            updateProgress();
            updateAnswerStatus();
        }

        // Timer functions
        function startTimer() {
            let timerElement = document.getElementById('timer');
            if (!timerElement) {
                console.warn('Timer element not found, attempting to create fallback timer');
                // Try to create a fallback timer
                timerElement = createFallbackTimer();
                if (!timerElement) {
                    console.error('Failed to create fallback timer');
                    return;
                }
            }
            timerInterval = setInterval(updateTimer, 1000);
        }

        function createFallbackTimer() {
            try {
                console.log('🔧 Creating fallback timer...');
                // Look for the quiz-timer container
                let timerContainer = document.querySelector('.quiz-timer');
                if (!timerContainer) {
                    // Look for any container that might hold the timer
                    timerContainer = document.querySelector('.quiz-header') || document.querySelector('.quiz-content');
                }
                
                if (timerContainer) {
                    // Create a new timer element
                    const fallbackTimer = document.createElement('span');
                    fallbackTimer.id = 'timer';
                    fallbackTimer.textContent = '00:00';
                    fallbackTimer.style.fontSize = '18px';
                    fallbackTimer.style.fontWeight = 'bold';
                    fallbackTimer.style.color = '#2563EB';
                    
                    // Insert it into the container
                    timerContainer.appendChild(fallbackTimer);
                    console.log('✅ Fallback timer created successfully');
                    return fallbackTimer;
                } else {
                    console.error('❌ No suitable container found for fallback timer');
                    return null;
                }
            } catch (error) {
                console.error('❌ Error creating fallback timer:', error);
                return null;
            }
        }

        function updateTimer() {
            const timerElement = document.getElementById('timer');
            if (!timerElement) {
                console.warn('Timer element not found, stopping timer');
                if (timerInterval) {
                    clearInterval(timerInterval);
                }
                return;
            }
            
            const elapsed = Math.floor((Date.now() - startTime) / 1000);
            const minutes = Math.floor(elapsed / 60);
            const seconds = elapsed % 60;
            timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function updateProgress() {
            const progress = ((currentQuestion + 1) / totalQuestions) * 100;
            const progressFill = document.getElementById('progress-fill');
            const currentQuestionSpan = document.getElementById('current-question');
            
            if (progressFill) {
                progressFill.style.width = progress + '%';
            }
            
            if (currentQuestionSpan) {
                currentQuestionSpan.textContent = `Question ${currentQuestion + 1} of ${totalQuestions}`;
            }
        }

        function showQuestion(index) {
            console.log(`🔄 Showing question ${index}`);

            // Debug: Check total questions available
            const allQuestions = document.querySelectorAll('.question-container');
            console.log(`Total questions in DOM: ${allQuestions.length}`);
            console.log(`Expected questions: ${totalQuestions}`);

            // Debug: Show IDs of all question containers
            allQuestions.forEach((q, i) => {
                console.log(`Question container ${i}: ID = ${q.id}, classes = ${q.className}`);
            });

            // Hide all questions
            allQuestions.forEach((q, i) => {
                if (q.classList) {
                    q.classList.remove('active');
                }
                q.style.display = 'none';
                console.log(`Question ${i} hidden`);
            });

            // Show the selected question
            const targetQuestion = document.getElementById(`question-${index}`);
            console.log(`Looking for question with ID: question-${index}`);
            console.log(`Question element found:`, targetQuestion);

            if (targetQuestion) {
                // Safe classList access
                if (targetQuestion.classList) {
                    targetQuestion.classList.add('active');
                }
                targetQuestion.style.display = 'block';
                console.log(`Question ${index} shown`);
                console.log(`Question ${index} classes:`, targetQuestion.className);
                console.log(`Question ${index} style:`, targetQuestion.style.cssText);

                // Double-check visibility
                const computedStyle = window.getComputedStyle(targetQuestion);
                console.log(`Question ${index} computed display:`, computedStyle.display);
            } else {
                console.error(`❌ Question ${index} not found! This means questions were not rendered in HTML.`);
                console.log('Available question IDs:',
                    Array.from(allQuestions).map(q => q.id));
                console.log('Total questions in DOM:', allQuestions.length);

                // Show a helpful error message to the user
                const questionsContainer = document.getElementById('questions-container');
                if (questionsContainer && allQuestions.length === 0) {
                    questionsContainer.innerHTML = `
                        <div class="alert alert-danger" style="margin: 20px; padding: 20px; text-align: center;">
                            <i class="fas fa-exclamation-triangle"></i>
                            <h4>Quiz Loading Error</h4>
                            <p>No questions were found for this quiz. Please contact your teacher or try refreshing the page.</p>
                            <button onclick="window.location.reload()" class="btn btn-primary">
                                <i class="fas fa-refresh"></i> Refresh Page
                            </button>
                        </div>
                    `;
                }
            }
            
            // Update active indicator
            document.querySelectorAll('.question-indicator').forEach(ind => ind.classList.remove('active'));
            const activeIndicator = document.getElementById(`indicator-${index}`);
            if (activeIndicator) {
                activeIndicator.classList.add('active');
            }
            
            // Update navigation buttons
            const prevBtn = document.getElementById('prev-btn');
            if (prevBtn) {
                prevBtn.disabled = index === 0;
            }
            
            // Handle single-question quiz or last question
            if (totalQuestions === 1 || index === totalQuestions - 1) {
                document.getElementById('next-btn').style.display = 'none';
                document.getElementById('submit-btn').style.display = 'inline-block';
            } else {
                document.getElementById('next-btn').style.display = 'inline-block';
                document.getElementById('submit-btn').style.display = 'none';
            }
            
            updateProgress();
        }

        // One Question Per Page Navigation System
        let regularCurrentQuestion = 0;
        let regularTotalQuestions = <%= quiz.questions.length %>;
        let studentAnswers = {}; // Store student answers

        function nextQuestion() {
            console.log('⏭️ nextQuestion called, current:', regularCurrentQuestion);
            console.log('Total questions available:', regularTotalQuestions);

            // Debug: Check current state of questions in DOM
            const allQuestions = document.querySelectorAll('.question-container:not(.complex-question-group)');
            console.log('Questions in DOM when nextQuestion called:', allQuestions.length);
            allQuestions.forEach((q, i) => {
                console.log(`Question ${i}: ID=${q.id}, display=${q.style.display}, classes=${q.className}`);
            });

            // Check if current question is answered
            if (!isCurrentQuestionAnswered()) {
                showAnswerRequiredAlert();
                return;
            }

            hideAnswerRequiredAlert();

            if (regularCurrentQuestion < regularTotalQuestions - 1) {
                regularCurrentQuestion++;
                console.log('Attempting to show question:', regularCurrentQuestion);
                showQuestion(regularCurrentQuestion);
                updateNavigationState();
                updateProgress();
            }
        }

        function previousQuestion() {
            console.log('⏮️ previousQuestion called, current:', regularCurrentQuestion);

            if (regularCurrentQuestion > 0) {
                regularCurrentQuestion--;
                showQuestion(regularCurrentQuestion);
                updateNavigationState();
                updateProgress();
            }
        }

        function goToQuestion(index) {
            console.log('🎯 goToQuestion called, index:', index);

            if (index >= 0 && index < regularTotalQuestions) {
                regularCurrentQuestion = index;
                showQuestion(regularCurrentQuestion);
                updateNavigationState();
                updateProgress();
            }
        }

        // Check if current question is answered
        function isCurrentQuestionAnswered() {
            const currentQuestionElement = document.getElementById(`question-${regularCurrentQuestion}`);
            if (!currentQuestionElement) return false;

            // Check for multiple choice answers
            const radioButtons = currentQuestionElement.querySelectorAll('input[type="radio"]');
            if (radioButtons.length > 0) {
                return Array.from(radioButtons).some(radio => radio.checked);
            }

            // Check for text answers
            const textInputs = currentQuestionElement.querySelectorAll('input[type="text"], textarea');
            if (textInputs.length > 0) {
                return Array.from(textInputs).some(input => input.value.trim() !== '');
            }

            // Check for rich text answers
            const richTextElements = currentQuestionElement.querySelectorAll('[contenteditable="true"]');
            if (richTextElements.length > 0) {
                return Array.from(richTextElements).some(element => element.textContent.trim() !== '');
            }

            return false;
        }

        // Show answer required alert
        function showAnswerRequiredAlert() {
            const alert = document.getElementById('answer-required-alert');
            if (alert) {
                alert.style.display = 'block';
                alert.classList.add('show');

                // Auto-hide after 3 seconds
                setTimeout(() => {
                    hideAnswerRequiredAlert();
                }, 3000);
            }
        }

        // Hide answer required alert
        function hideAnswerRequiredAlert() {
            const alert = document.getElementById('answer-required-alert');
            if (alert) {
                alert.style.display = 'none';
                alert.classList.remove('show');
            }
        }

        // Update navigation button states
        function updateNavigationState() {
            const prevBtn = document.getElementById('prev-btn');
            const nextBtn = document.getElementById('next-btn');
            const submitBtn = document.getElementById('submit-btn');

            // Update previous button
            if (prevBtn) {
                prevBtn.disabled = regularCurrentQuestion === 0;
            }

            // Update next/submit button
            if (regularCurrentQuestion === regularTotalQuestions - 1) {
                // Last question - show submit button
                if (nextBtn) nextBtn.style.display = 'none';
                if (submitBtn) submitBtn.style.display = 'inline-block';
            } else {
                // Not last question - show next button
                if (nextBtn) nextBtn.style.display = 'inline-block';
                if (submitBtn) submitBtn.style.display = 'none';
            }

            // Update question indicators
            updateQuestionIndicators();

            // Update answer status
            updateAnswerStatus();
        }

        // Update question indicators
        function updateQuestionIndicators() {
            const indicators = document.querySelectorAll('.question-indicator');

            indicators.forEach((indicator, index) => {
                indicator.classList.remove('current', 'answered');

                if (index === regularCurrentQuestion) {
                    indicator.classList.add('current');
                }

                if (isQuestionAnswered(index)) {
                    indicator.classList.add('answered');
                }
            });
        }

        // Check if a specific question is answered
        function isQuestionAnswered(questionIndex) {
            const questionElement = document.getElementById(`question-${questionIndex}`);
            if (!questionElement) return false;

            // Check for multiple choice answers
            const radioButtons = questionElement.querySelectorAll('input[type="radio"]');
            if (radioButtons.length > 0) {
                return Array.from(radioButtons).some(radio => radio.checked);
            }

            // Check for text answers
            const textInputs = questionElement.querySelectorAll('input[type="text"], textarea');
            if (textInputs.length > 0) {
                return Array.from(textInputs).some(input => input.value.trim() !== '');
            }

            // Check for rich text answers
            const richTextElements = questionElement.querySelectorAll('[contenteditable="true"]');
            if (richTextElements.length > 0) {
                return Array.from(richTextElements).some(element => element.textContent.trim() !== '');
            }

            return false;
        }

        // Update answer status text
        function updateAnswerStatus() {
            const statusElement = document.getElementById('answer-status');
            if (!statusElement) return;

            if (isCurrentQuestionAnswered()) {
                statusElement.textContent = 'Question answered ✓';
                statusElement.className = 'answer-status answered';
            } else {
                statusElement.textContent = 'Please select an answer to continue';
                statusElement.className = 'answer-status unanswered';
            }
        }

        // Update progress bar and counter with badge animations
        function updateProgress() {
            // Update question counter
            const questionNumber = document.getElementById('current-question-number');
            if (questionNumber) {
                questionNumber.textContent = regularCurrentQuestion + 1;
            }

            // Update progress percentage
            const progressPercentage = document.getElementById('progress-percentage');
            const progressBar = document.getElementById('progress-bar');
            const progressSparkle = document.getElementById('progress-sparkle');

            const answeredQuestions = Array.from({length: regularTotalQuestions}, (_, i) => i)
                .filter(i => isQuestionAnswered(i)).length;

            const percentage = Math.round((answeredQuestions / regularTotalQuestions) * 100);

            if (progressPercentage) {
                progressPercentage.textContent = percentage;

                // Animate percentage change
                progressPercentage.style.transform = 'scale(1.2)';
                progressPercentage.style.color = '#28a745';
                setTimeout(() => {
                    progressPercentage.style.transform = 'scale(1)';
                    progressPercentage.style.color = '#667eea';
                }, 300);
            }

            if (progressBar) {
                progressBar.style.width = percentage + '%';
            }

            // Show sparkle effect when progress increases
            if (progressSparkle && percentage > 0) {
                progressSparkle.style.opacity = '1';
                setTimeout(() => {
                    progressSparkle.style.opacity = '0';
                }, 1000);
            }

            // Update milestone achievements
            updateMilestones(percentage);
        }

        // Update milestone indicators
        function updateMilestones(percentage) {
            const milestones = [
                { id: 'milestone-25', threshold: 25 },
                { id: 'milestone-50', threshold: 50 },
                { id: 'milestone-75', threshold: 75 },
                { id: 'milestone-100', threshold: 100 }
            ];

            milestones.forEach(milestone => {
                const element = document.getElementById(milestone.id);
                if (element) {
                    if (percentage >= milestone.threshold) {
                        element.style.opacity = '1';
                        element.style.transform = 'scale(1.1)';
                        element.style.color = '#28a745';
                        element.style.fontWeight = 'bold';

                        // Add celebration effect for new milestones
                        if (!element.classList.contains('achieved')) {
                            element.classList.add('achieved');
                            element.style.animation = 'bounce 0.6s ease';
                            setTimeout(() => {
                                element.style.animation = '';
                            }, 600);
                        }
                    } else {
                        element.style.opacity = '0.5';
                        element.style.transform = 'scale(1)';
                        element.style.color = '#6c757d';
                        element.style.fontWeight = 'normal';
                    }
                }
            });
        }

        // Initialize one-question-per-page system
        function initializeOneQuestionPerPage() {
            console.log('🚀 Initializing one-question-per-page navigation');
            console.log('Total questions:', totalQuestions);

            // Check if this is a complex quiz - if so, don't initialize regular quiz logic
            const isComplexQuiz = <%= quiz.isComplexQuiz ? 'true' : 'false' %>;
            const hasComplexQuizData = <%= quiz.complexQuizData ? 'true' : 'false' %>;

            if (isComplexQuiz && hasComplexQuizData) {
                console.log('✅ Complex quiz detected in initializeOneQuestionPerPage - aborting regular quiz initialization');
                return;
            }

            // Debug: Check if questions exist in DOM (only regular questions)
            const questionContainers = document.querySelectorAll('.question-container:not(.complex-question-group)');
            console.log('Found regular question containers:', questionContainers.length);

            if (questionContainers.length === 0) {
                console.error('❌ No regular question containers found! Quiz questions may not be rendered.');
                console.log('Available elements with class containing "question":',
                    document.querySelectorAll('[class*="question"]').length);

                // Show error message to user only if this is not a complex quiz
                const questionsContainer = document.getElementById('questions-container');
                if (questionsContainer && !isComplexQuiz) {
                    questionsContainer.innerHTML = `
                        <div class="alert alert-danger" style="margin: 20px; padding: 20px; text-align: center;">
                            <i class="fas fa-exclamation-triangle"></i>
                            <h4>Quiz Loading Error</h4>
                            <p>No questions were found for this quiz. This could be due to:</p>
                            <ul style="text-align: left; margin: 15px 0;">
                                <li>Quiz data not loading properly</li>
                                <li>Server-side conversion issues</li>
                                <li>Template rendering problems</li>
                            </ul>
                            <button onclick="window.location.reload()" class="btn btn-primary">
                                <i class="fas fa-refresh"></i> Refresh Page
                            </button>
                            <a href="/student/dashboard" class="btn btn-secondary" style="margin-left: 10px;">
                                <i class="fas fa-arrow-left"></i> Back to Dashboard
                            </a>
                        </div>
                    `;
                }
                return;
            }

            // Force hide all questions first
            console.log('Hiding all questions...');
            questionContainers.forEach((q, index) => {
                q.classList.remove('active');
                q.style.display = 'none';
                console.log(`Question ${index} hidden`);
            });

            // Show only the first question
            console.log('Showing first question...');
            showQuestion(0);

            // Set up initial navigation state
            updateNavigationState();
            updateProgress();

            // Add event listeners for answer changes
            setupAnswerChangeListeners();

            console.log('✅ One-question-per-page navigation initialized');
        }

        // Set up listeners for answer changes to update status
        function setupAnswerChangeListeners() {
            // Listen for radio button changes
            document.addEventListener('change', function(e) {
                if (e.target.type === 'radio') {
                    updateAnswerStatus();
                    updateProgress();
                    hideAnswerRequiredAlert();
                }
            });

            // Listen for text input changes
            document.addEventListener('input', function(e) {
                if (e.target.type === 'text' || e.target.tagName === 'TEXTAREA' || e.target.contentEditable === 'true') {
                    updateAnswerStatus();
                    updateProgress();
                    hideAnswerRequiredAlert();

                    // Also update complex quiz status if this is a complex answer area
                    if (e.target.id && e.target.id.startsWith('complex-answer-')) {
                        updateComplexAnswerStatus();
                        hideComplexAnswerRequiredAlert();
                    }
                }
            });
        }



        // Complex Quiz Navigation System (Global Scope)
        let complexCurrentQuestion = 0;
        let complexTotalQuestions = 0;

        // Initialize complex quiz navigation
        function initializeComplexQuizNavigation(totalQuestions) {
            console.log('🚀 Initializing complex quiz navigation, total questions:', totalQuestions);

            complexTotalQuestions = totalQuestions;
            complexCurrentQuestion = 0;

            // Show only the first question
            showComplexQuestion(0);

            // Set up navigation buttons
            setupComplexNavigationButtons();

            // Create question indicators
            createComplexQuestionIndicators();

            // Update navigation state
            updateComplexNavigationState();

            console.log('✅ Complex quiz navigation initialized');
        }

        // Show specific complex question
        function showComplexQuestion(index) {
            console.log(`🔄 Showing complex question ${index}`);

            // Hide all question groups
            document.querySelectorAll('.complex-question-group').forEach((group, i) => {
                group.classList.remove('active');
                console.log(`Complex question ${i} hidden`);
            });

            // Show the selected question group
            const targetGroup = document.getElementById(`complex-question-${index}`);
            if (targetGroup) {
                targetGroup.classList.add('active');
                console.log(`Complex question ${index} shown`);
            } else {
                console.error(`Complex question ${index} not found!`);
            }
        }

        // Setup navigation button event listeners
        function setupComplexNavigationButtons() {
            const nextBtn = document.getElementById('complex-next-btn');
            const prevBtn = document.getElementById('complex-prev-btn');

            if (nextBtn) {
                nextBtn.addEventListener('click', nextComplexQuestion);
            }

            if (prevBtn) {
                prevBtn.addEventListener('click', previousComplexQuestion);
            }
        }

        // Navigate to next complex question
        function nextComplexQuestion() {
            console.log('⏭️ nextComplexQuestion called, current:', complexCurrentQuestion);

            // Check if current question is answered
            if (!isComplexQuestionAnswered(complexCurrentQuestion)) {
                showComplexAnswerRequiredAlert();
                return;
            }

            hideComplexAnswerRequiredAlert();

            if (complexCurrentQuestion < complexTotalQuestions - 1) {
                complexCurrentQuestion++;
                showComplexQuestion(complexCurrentQuestion);
                updateComplexNavigationState();
            }
        }

        // Navigate to previous complex question
        function previousComplexQuestion() {
            console.log('⏮️ previousComplexQuestion called, current:', complexCurrentQuestion);

            if (complexCurrentQuestion > 0) {
                complexCurrentQuestion--;
                showComplexQuestion(complexCurrentQuestion);
                updateComplexNavigationState();
            }
        }

        // Check if complex question is answered
        function isComplexQuestionAnswered(questionIndex) {
            const questionGroup = document.getElementById(`complex-question-${questionIndex}`);
            if (!questionGroup) return false;

            // Check for textarea answers in answer-area elements
            const textareas = questionGroup.querySelectorAll('textarea[id^="complex-answer-"]');
            if (textareas.length > 0) {
                return Array.from(textareas).some(textarea => textarea.value.trim() !== '');
            }

            // If no answer-area elements, consider the question answered (for questions without explicit answer areas)
            return true;
        }

        // Show complex answer required alert
        function showComplexAnswerRequiredAlert() {
            const alert = document.getElementById('complex-answer-required-alert');
            if (alert) {
                alert.style.display = 'block';
                alert.classList.add('show');

                setTimeout(() => {
                    hideComplexAnswerRequiredAlert();
                }, 3000);
            }
        }

        // Hide complex answer required alert
        function hideComplexAnswerRequiredAlert() {
            const alert = document.getElementById('complex-answer-required-alert');
            if (alert) {
                alert.style.display = 'none';
                alert.classList.remove('show');
            }
        }

        // Update complex navigation state
        function updateComplexNavigationState() {
            const prevBtn = document.getElementById('complex-prev-btn');
            const nextBtn = document.getElementById('complex-next-btn');
            const submitBtn = document.getElementById('submit-complex-quiz-btn');

            // Update previous button
            if (prevBtn) {
                prevBtn.disabled = complexCurrentQuestion === 0;
            }

            // Update next/submit button
            if (complexCurrentQuestion === complexTotalQuestions - 1) {
                // Last question - show submit button
                if (nextBtn) nextBtn.style.display = 'none';
                if (submitBtn) submitBtn.style.display = 'inline-block';
            } else {
                // Not last question - show next button
                if (nextBtn) nextBtn.style.display = 'inline-block';
                if (submitBtn) submitBtn.style.display = 'none';
            }

            // Update question indicators
            updateComplexQuestionIndicators();

            // Update answer status
            updateComplexAnswerStatus();
        }

        // Create question indicators for complex quiz
        function createComplexQuestionIndicators() {
            const container = document.getElementById('complex-question-indicators');
            if (!container) return;

            container.innerHTML = '';

            for (let i = 0; i < complexTotalQuestions; i++) {
                const indicator = document.createElement('div');
                indicator.className = 'question-indicator';
                indicator.setAttribute('data-question', i);
                indicator.style.width = '12px';
                indicator.style.height = '12px';
                indicator.style.borderRadius = '50%';
                indicator.style.background = '#e9ecef';
                indicator.style.border = '2px solid #dee2e6';
                indicator.style.cursor = 'pointer';
                indicator.style.transition = 'all 0.2s ease';
                indicator.title = `Question ${i + 1}`;

                indicator.addEventListener('click', () => {
                    complexCurrentQuestion = i;
                    showComplexQuestion(i);
                    updateComplexNavigationState();
                });

                container.appendChild(indicator);
            }
        }

        // Update complex question indicators
        function updateComplexQuestionIndicators() {
            const indicators = document.querySelectorAll('#complex-question-indicators .question-indicator');

            indicators.forEach((indicator, index) => {
                indicator.classList.remove('current', 'answered');

                if (index === complexCurrentQuestion) {
                    indicator.classList.add('current');
                    indicator.style.background = '#007bff';
                    indicator.style.borderColor = '#0056b3';
                    indicator.style.transform = 'scale(1.3)';
                } else {
                    indicator.style.background = '#e9ecef';
                    indicator.style.borderColor = '#dee2e6';
                    indicator.style.transform = 'scale(1)';
                }

                if (isComplexQuestionAnswered(index)) {
                    indicator.classList.add('answered');
                    indicator.style.background = '#28a745';
                    indicator.style.borderColor = '#1e7e34';
                }
            });
        }

        // Update complex answer status
        function updateComplexAnswerStatus() {
            const statusElement = document.getElementById('complex-answer-status');
            if (!statusElement) return;

            if (isComplexQuestionAnswered(complexCurrentQuestion)) {
                statusElement.textContent = 'Question answered ✓';
                statusElement.className = 'answer-status answered';
            } else {
                statusElement.textContent = 'Please answer the question to continue';
                statusElement.className = 'answer-status unanswered';
            }
        }

        // Validate all complex questions are answered
        function validateAllComplexQuestionsAnswered() {
            const unansweredQuestions = [];

            for (let i = 0; i < complexTotalQuestions; i++) {
                if (!isComplexQuestionAnswered(i)) {
                    unansweredQuestions.push(i + 1);
                }
            }

            if (unansweredQuestions.length > 0) {
                const questionText = unansweredQuestions.length === 1 ? 'question' : 'questions';
                const questionNumbers = unansweredQuestions.join(', ');

                if (confirm(`You have not answered ${questionText} ${questionNumbers}. Do you want to submit anyway?`)) {
                    return true; // Allow submission with unanswered questions
                } else {
                    // Go to first unanswered question
                    complexCurrentQuestion = unansweredQuestions[0] - 1;
                    showComplexQuestion(complexCurrentQuestion);
                    updateComplexNavigationState();
                    return false;
                }
            }

            return true;
        }

        // Beforeunload handler to prevent accidental navigation
        let isSubmitting = false;

        function beforeUnloadHandler(e) {
            // Only show warning if not submitting and there are answers
            if (!isSubmitting && hasAnyAnswers()) {
                e.preventDefault();
                e.returnValue = ''; // Chrome requires returnValue to be set
                return ''; // For older browsers
            }
        }

        // Check if user has entered any answers
        function hasAnyAnswers() {
            // Check regular quiz answers
            const radioButtons = document.querySelectorAll('input[type="radio"]:checked');
            const textInputs = document.querySelectorAll('input[type="text"], textarea');
            const richTextElements = document.querySelectorAll('[contenteditable="true"]');

            // Check if any radio buttons are selected
            if (radioButtons.length > 0) return true;

            // Check if any text inputs have content
            for (let input of textInputs) {
                if (input.value.trim() !== '') return true;
            }

            // Check if any rich text elements have content
            for (let element of richTextElements) {
                if (element.textContent.trim() !== '') return true;
            }

            return false;
        }

        // Set up beforeunload protection
        function setupBeforeUnloadProtection() {
            window.addEventListener('beforeunload', beforeUnloadHandler);
        }

        // Remove beforeunload protection
        function removeBeforeUnloadProtection() {
            isSubmitting = true;
            window.removeEventListener('beforeunload', beforeUnloadHandler);
            window.onbeforeunload = null;
        }

        // Make functions globally available
        window.nextQuestion = nextQuestion;
        window.previousQuestion = previousQuestion;
        window.goToQuestion = goToQuestion;
        window.updateProgress = updateProgress;
        window.updateNavigationState = updateNavigationState;
        window.initializeOneQuestionPerPage = initializeOneQuestionPerPage;
        window.initializeComplexQuizNavigation = initializeComplexQuizNavigation;
        window.nextComplexQuestion = nextComplexQuestion;
        window.previousComplexQuestion = previousComplexQuestion;
        window.validateAllComplexQuestionsAnswered = validateAllComplexQuestionsAnswered;
        window.removeBeforeUnloadProtection = removeBeforeUnloadProtection;
        window.initializeComplexQuizNavigation = initializeComplexQuizNavigation;
        window.nextComplexQuestion = nextComplexQuestion;
        window.previousComplexQuestion = previousComplexQuestion;

        // Track answers
        document.addEventListener('change', function(e) {
            if (e.target.type === 'radio') {
                const questionIndex = parseInt(e.target.dataset.question);
                const optionIndex = parseInt(e.target.dataset.option);
                const selectedAnswer = e.target.value;
                
                answers[questionIndex] = {
                    selectedAnswer: selectedAnswer,
                    optionIndex: optionIndex
                };
                
                // Mark indicator as answered
                const indicator = document.getElementById(`indicator-${questionIndex}`);
                if (indicator) {
                    indicator.classList.add('answered');
                }
            }
        });

        // Handle complex quiz submission
        function handleComplexQuizSubmission() {
            // Remove beforeunload warning before submission
            removeBeforeUnloadProtection();

            // Validate that all complex questions are answered
            if (window.validateAllComplexQuestionsAnswered && !window.validateAllComplexQuestionsAnswered()) {
                return; // Stop submission if validation fails
            }

            const complexAnswers = {};

            // Collect answers from complex quiz answer areas
            document.querySelectorAll('textarea[id^="complex-answer-"]').forEach(textarea => {
                const elementId = textarea.id.replace('complex-answer-', '');
                complexAnswers[elementId] = textarea.value;
            });

            console.log('Complex quiz answers:', complexAnswers);

            // Submit complex quiz
            submitComplexQuiz(complexAnswers);
        }

        // Submit complex quiz function
        function submitComplexQuiz(complexAnswers) {
            const submitData = {
                answers: complexAnswers,
                isComplexQuiz: true,
                timeSpent: Math.floor((Date.now() - startTime) / 1000)
            };

            console.log('Submitting complex quiz:', submitData);

            fetch(`/submit-quiz/<%= quiz._id %>`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(submitData)
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Ensure beforeunload protection is removed
                    removeBeforeUnloadProtection();

                    // Show custom completion modal instead of alert
                    showComplexQuizCompletionModal(data.needsManualGrading);

                    // Use replace instead of href to avoid back button issues
                    window.location.replace('/student/dashboard');
                } else {
                    // Re-enable beforeunload protection if submission failed
                    setupBeforeUnloadProtection();
                    alert('Error submitting quiz: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error submitting complex quiz:', error);
                // Re-enable beforeunload protection if submission failed
                setupBeforeUnloadProtection();
                alert('Error submitting quiz. Please try again.');
            });
        }

        // Handle form submission
        const quizForm = document.getElementById('quiz-form');
        if (quizForm) {
            quizForm.addEventListener('submit', function(e) {
                e.preventDefault();

                // Remove beforeunload warning before submission
                removeBeforeUnloadProtection();

            // Check if this is a complex quiz
            if (typeof complexQuizData !== 'undefined' && complexQuizData) {
                handleComplexQuizSubmission();
                return;
            }

            // Validate that all questions are answered
            if (!validateAllQuestionsAnswered()) {
                return; // Stop submission if validation fails
            }
            
            const timeTaken = Math.floor((Date.now() - startTime) / 1000);
            
            // Collect all answers from the form
            const answersArray = [];
            for (let i = 0; i < regularTotalQuestions; i++) {
                const questionElement = document.getElementById(`question-${i}`);
                let selectedAnswer = '';

                if (questionElement) {
                    // Check for multiple choice answers
                    const checkedRadio = questionElement.querySelector('input[type="radio"]:checked');
                    if (checkedRadio) {
                        selectedAnswer = checkedRadio.value;
                    } else {
                        // Check for text answers
                        const textInput = questionElement.querySelector('input[type="text"], textarea');
                        if (textInput && textInput.value.trim()) {
                            selectedAnswer = textInput.value.trim();
                        } else {
                            // Check for rich text answers
                            const richTextElement = questionElement.querySelector('[contenteditable="true"]');
                            if (richTextElement && richTextElement.textContent.trim()) {
                                selectedAnswer = richTextElement.innerHTML;
                            }
                        }
                    }
                }

                answersArray.push({
                    questionIndex: i,
                    selectedAnswer: selectedAnswer
                });
            }
            
            // Debug: Log what we're sending
            console.log('Sending answers to backend:', answersArray);
            console.log('Raw answers object:', answers);
            
            // Submit quiz
            fetch(`/submit-quiz/${quizId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    answers: answersArray,
                    timeTaken: timeTaken
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Ensure beforeunload protection is removed
                    removeBeforeUnloadProtection();

                    // Show completion message with results
                    showCompletionMessage(data);
                } else {
                    // Re-enable beforeunload protection if submission failed
                    setupBeforeUnloadProtection();
                    alert('Error submitting quiz: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                // Re-enable beforeunload protection if submission failed
                setupBeforeUnloadProtection();
                alert('Error submitting quiz. Please try again.');
            });
        });

        // Validation function for one-question-per-page system
        function validateAllQuestionsAnswered() {
            const unansweredQuestions = [];

            for (let i = 0; i < regularTotalQuestions; i++) {
                if (!isQuestionAnswered(i)) {
                    unansweredQuestions.push(i + 1);
                }
            }

            if (unansweredQuestions.length > 0) {
                const questionText = unansweredQuestions.length === 1 ? 'question' : 'questions';
                const questionNumbers = unansweredQuestions.join(', ');

                if (confirm(`You have not answered ${questionText} ${questionNumbers}. Do you want to submit anyway?`)) {
                    return true; // Allow submission with unanswered questions
                } else {
                    // Go to first unanswered question
                    goToQuestion(unansweredQuestions[0] - 1);
                    return false;
                }
            }

            return true;
        }

        // Show completion message
        function showCompletionMessage(data) {
            // Remove beforeunload protection when showing completion
            removeBeforeUnloadProtection();

            const message = `
                <div style="text-align: center; padding: 40px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 15px; color: white; margin: 20px; box-shadow: 0 10px 30px rgba(0,0,0,0.2);">
                    <!-- Achievement Badge -->
                    <div style="margin-bottom: 30px;">
                        <div class="achievement-badge" style="display: inline-block; position: relative; animation: bounceIn 1s ease-out;">
                            <svg width="120" height="120" viewBox="0 0 120 120" style="filter: drop-shadow(0 5px 15px rgba(0,0,0,0.3));">
                                <!-- Badge Background -->
                                <circle cx="60" cy="60" r="55" fill="url(#goldGradient)" stroke="#FFD700" stroke-width="3"/>

                                <!-- Inner Circle -->
                                <circle cx="60" cy="60" r="45" fill="url(#innerGradient)" stroke="#FFA500" stroke-width="2"/>

                                <!-- Star Icon -->
                                <path d="M60 25 L67 45 L87 45 L72 57 L78 77 L60 65 L42 77 L48 57 L33 45 L53 45 Z"
                                      fill="#FFD700" stroke="#FF8C00" stroke-width="1"/>

                                <!-- Decorative Elements -->
                                <circle cx="35" cy="35" r="3" fill="#FFD700" opacity="0.8"/>
                                <circle cx="85" cy="35" r="3" fill="#FFD700" opacity="0.8"/>
                                <circle cx="35" cy="85" r="3" fill="#FFD700" opacity="0.8"/>
                                <circle cx="85" cy="85" r="3" fill="#FFD700" opacity="0.8"/>

                                <!-- Gradients -->
                                <defs>
                                    <radialGradient id="goldGradient" cx="50%" cy="30%">
                                        <stop offset="0%" style="stop-color:#FFD700;stop-opacity:1" />
                                        <stop offset="100%" style="stop-color:#FFA500;stop-opacity:1" />
                                    </radialGradient>
                                    <radialGradient id="innerGradient" cx="50%" cy="30%">
                                        <stop offset="0%" style="stop-color:#FFF8DC;stop-opacity:1" />
                                        <stop offset="100%" style="stop-color:#FFD700;stop-opacity:1" />
                                    </radialGradient>
                                </defs>
                            </svg>

                            <!-- Sparkle Effects -->
                            <div style="position: absolute; top: -10px; left: -10px; animation: sparkle 2s infinite;">✨</div>
                            <div style="position: absolute; top: -5px; right: -10px; animation: sparkle 2s infinite 0.5s;">⭐</div>
                            <div style="position: absolute; bottom: -10px; left: 10px; animation: sparkle 2s infinite 1s;">💫</div>
                            <div style="position: absolute; bottom: -5px; right: 5px; animation: sparkle 2s infinite 1.5s;">✨</div>
                        </div>
                    </div>

                    <h2 style="color: #FFD700; font-size: 32px; margin: 20px 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); font-weight: bold;">
                        🎉 QUIZ COMPLETED! 🎉
                    </h2>

                    <div style="background: rgba(255,255,255,0.1); border-radius: 10px; padding: 20px; margin: 20px 0; backdrop-filter: blur(10px);">
                        <p style="font-size: 20px; margin: 10px 0; font-weight: 600;">
                            🏆 Congratulations on completing the quiz!
                        </p>
                        <p style="font-size: 16px; color: #E8F4FD; margin: 10px 0;">
                            ⏱️ Time taken: ${Math.floor(data.timeTaken / 60)}m ${data.timeTaken % 60}s
                        </p>
                        <p style="font-size: 14px; color: #B8E6B8; margin: 10px 0;">
                            📊 Your results are ready for review
                        </p>
                    </div>

                    <div style="margin: 30px 0;">
                        <a href="/quiz-result/${data.resultId}" class="btn btn-light btn-lg" style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #333; border: none; padding: 15px 30px; font-size: 18px; font-weight: bold; border-radius: 25px; text-decoration: none; display: inline-block; transition: all 0.3s ease; box-shadow: 0 5px 15px rgba(0,0,0,0.2);" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 25px rgba(0,0,0,0.3)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 5px 15px rgba(0,0,0,0.2)'">
                            <i class="fas fa-chart-bar" style="margin-right: 10px;"></i>View Your Results
                        </a>
                    </div>

                    <!-- Floating Elements -->
                    <div style="position: absolute; top: 20px; left: 20px; animation: float 3s ease-in-out infinite;">🎓</div>
                    <div style="position: absolute; top: 30px; right: 30px; animation: float 3s ease-in-out infinite 1s;">📚</div>
                    <div style="position: absolute; bottom: 30px; left: 30px; animation: float 3s ease-in-out infinite 2s;">🌟</div>
                </div>

                <style>
                    @keyframes bounceIn {
                        0% { transform: scale(0.3); opacity: 0; }
                        50% { transform: scale(1.05); }
                        70% { transform: scale(0.9); }
                        100% { transform: scale(1); opacity: 1; }
                    }

                    @keyframes sparkle {
                        0%, 100% { opacity: 0; transform: scale(0.5); }
                        50% { opacity: 1; transform: scale(1.2); }
                    }

                    @keyframes float {
                        0%, 100% { transform: translateY(0px); }
                        50% { transform: translateY(-10px); }
                    }

                    .achievement-badge:hover {
                        transform: scale(1.1);
                        transition: transform 0.3s ease;
                    }
                </style>
            `;

            document.querySelector('.quiz-taking-container').innerHTML = message;
        }

        // Show complex quiz completion modal with badge
        function showComplexQuizCompletionModal(needsManualGrading) {
            const modalHtml = `
                <div id="completion-modal" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); z-index: 10000; display: flex; align-items: center; justify-content: center; animation: fadeIn 0.5s ease;">
                    <div style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border-radius: 20px; padding: 40px; max-width: 500px; width: 90%; text-align: center; color: white; box-shadow: 0 20px 60px rgba(0,0,0,0.3); position: relative; animation: slideUp 0.6s ease;">

                        <!-- Achievement Badge -->
                        <div style="margin-bottom: 30px;">
                            <div class="complex-achievement-badge" style="display: inline-block; position: relative; animation: bounceIn 1s ease-out;">
                                <svg width="100" height="100" viewBox="0 0 100 100" style="filter: drop-shadow(0 5px 15px rgba(0,0,0,0.3));">
                                    <!-- Badge Background -->
                                    <circle cx="50" cy="50" r="45" fill="url(#complexGoldGradient)" stroke="#FFD700" stroke-width="2"/>

                                    <!-- Inner Circle -->
                                    <circle cx="50" cy="50" r="35" fill="url(#complexInnerGradient)" stroke="#FFA500" stroke-width="1.5"/>

                                    <!-- Check Mark -->
                                    <path d="M30 50 L42 62 L70 34" stroke="#FFD700" stroke-width="4" fill="none" stroke-linecap="round" stroke-linejoin="round"/>

                                    <!-- Decorative Dots -->
                                    <circle cx="25" cy="25" r="2" fill="#FFD700" opacity="0.8"/>
                                    <circle cx="75" cy="25" r="2" fill="#FFD700" opacity="0.8"/>
                                    <circle cx="25" cy="75" r="2" fill="#FFD700" opacity="0.8"/>
                                    <circle cx="75" cy="75" r="2" fill="#FFD700" opacity="0.8"/>

                                    <!-- Gradients -->
                                    <defs>
                                        <radialGradient id="complexGoldGradient" cx="50%" cy="30%">
                                            <stop offset="0%" style="stop-color:#FFD700;stop-opacity:1" />
                                            <stop offset="100%" style="stop-color:#FFA500;stop-opacity:1" />
                                        </radialGradient>
                                        <radialGradient id="complexInnerGradient" cx="50%" cy="30%">
                                            <stop offset="0%" style="stop-color:#FFF8DC;stop-opacity:1" />
                                            <stop offset="100%" style="stop-color:#FFD700;stop-opacity:1" />
                                        </radialGradient>
                                    </defs>
                                </svg>

                                <!-- Sparkle Effects -->
                                <div style="position: absolute; top: -5px; left: -5px; animation: sparkle 2s infinite;">✨</div>
                                <div style="position: absolute; top: 0px; right: -5px; animation: sparkle 2s infinite 0.5s;">⭐</div>
                                <div style="position: absolute; bottom: -5px; left: 5px; animation: sparkle 2s infinite 1s;">💫</div>
                                <div style="position: absolute; bottom: 0px; right: 0px; animation: sparkle 2s infinite 1.5s;">✨</div>
                            </div>
                        </div>

                        <h2 style="color: #FFD700; font-size: 28px; margin: 20px 0; text-shadow: 2px 2px 4px rgba(0,0,0,0.3); font-weight: bold;">
                            🎉 COMPLEX QUIZ COMPLETED! 🎉
                        </h2>

                        <div style="background: rgba(255,255,255,0.1); border-radius: 10px; padding: 20px; margin: 20px 0; backdrop-filter: blur(10px);">
                            ${needsManualGrading ? `
                                <p style="font-size: 18px; margin: 10px 0; font-weight: 600;">
                                    📝 Your answers have been submitted for review!
                                </p>
                                <p style="font-size: 14px; color: #E8F4FD; margin: 10px 0;">
                                    ⏳ Your teacher will review and grade your responses
                                </p>
                                <p style="font-size: 14px; color: #B8E6B8; margin: 10px 0;">
                                    📧 You'll receive your results once grading is complete
                                </p>
                            ` : `
                                <p style="font-size: 18px; margin: 10px 0; font-weight: 600;">
                                    🏆 Excellent work completing this complex quiz!
                                </p>
                                <p style="font-size: 14px; color: #E8F4FD; margin: 10px 0;">
                                    📊 Your responses have been successfully recorded
                                </p>
                            `}
                        </div>

                        <div style="margin: 30px 0;">
                            <button onclick="closeCompletionModal()" style="background: linear-gradient(45deg, #FFD700, #FFA500); color: #333; border: none; padding: 15px 30px; font-size: 16px; font-weight: bold; border-radius: 25px; cursor: pointer; transition: all 0.3s ease; box-shadow: 0 5px 15px rgba(0,0,0,0.2);" onmouseover="this.style.transform='translateY(-2px)'; this.style.boxShadow='0 8px 25px rgba(0,0,0,0.3)'" onmouseout="this.style.transform='translateY(0)'; this.style.boxShadow='0 5px 15px rgba(0,0,0,0.2)'">
                                <i class="fas fa-home" style="margin-right: 10px;"></i>Return to Dashboard
                            </button>
                        </div>

                        <!-- Floating Elements -->
                        <div style="position: absolute; top: 15px; left: 15px; animation: float 3s ease-in-out infinite;">🎓</div>
                        <div style="position: absolute; top: 20px; right: 20px; animation: float 3s ease-in-out infinite 1s;">📚</div>
                        <div style="position: absolute; bottom: 20px; left: 20px; animation: float 3s ease-in-out infinite 2s;">🌟</div>
                    </div>
                </div>

                <style>
                    @keyframes fadeIn {
                        from { opacity: 0; }
                        to { opacity: 1; }
                    }

                    @keyframes slideUp {
                        from { transform: translateY(50px); opacity: 0; }
                        to { transform: translateY(0); opacity: 1; }
                    }

                    @keyframes bounceIn {
                        0% { transform: scale(0.3); opacity: 0; }
                        50% { transform: scale(1.05); }
                        70% { transform: scale(0.9); }
                        100% { transform: scale(1); opacity: 1; }
                    }

                    @keyframes sparkle {
                        0%, 100% { opacity: 0; transform: scale(0.5); }
                        50% { opacity: 1; transform: scale(1.2); }
                    }

                    @keyframes float {
                        0%, 100% { transform: translateY(0px); }
                        50% { transform: translateY(-8px); }
                    }

                    .complex-achievement-badge:hover {
                        transform: scale(1.1);
                        transition: transform 0.3s ease;
                    }
                </style>
            `;

            // Add modal to body
            document.body.insertAdjacentHTML('beforeend', modalHtml);

            // Auto-close after 5 seconds
            setTimeout(() => {
                closeCompletionModal();
            }, 5000);
        }

        // Close completion modal and redirect
        function closeCompletionModal() {
            const modal = document.getElementById('completion-modal');
            if (modal) {
                modal.style.animation = 'fadeOut 0.3s ease';
                setTimeout(() => {
                    modal.remove();
                    window.location.replace('/student/dashboard');
                }, 300);
            }
        }

        // Add fadeOut animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes fadeOut {
                from { opacity: 1; }
                to { opacity: 0; }
            }
        `;
        document.head.appendChild(style);
        } else {
            console.error('Quiz form not found');
        }

        // Simple image loading functionality
        function loadQuestionImages() {
            const questionImageContainers = document.querySelectorAll('.question-image-container[data-s3-key]');
            
            if (questionImageContainers.length === 0) {
                console.log('No question images found');
                return;
            }

            console.log(`🔗 Loading ${questionImageContainers.length} question images`);

            questionImageContainers.forEach((container) => {
                const s3Key = container.dataset.s3Key;
                const questionIndex = container.dataset.questionIndex;
                const loadingDiv = container.querySelector('.question-image-loading');
                const img = container.querySelector('.question-image');

                if (!s3Key || !loadingDiv || !img) {
                    console.log(`Missing required elements for question ${questionIndex}`);
                    return;
                }

                // Use direct S3 URL
                const s3Url = `https://skillon-test.s3.amazonaws.com/${s3Key}`;
                console.log(`🔗 Loading image for question ${questionIndex}: ${s3Url}`);

                // Load the image
                img.onload = function() {
                    loadingDiv.style.display = 'none';
                    img.style.display = 'block';
                    console.log(`✅ Image loaded for question ${questionIndex}`);
                };

                img.onerror = function() {
                    loadingDiv.innerHTML = `
                        <div style="text-align: center; padding: 20px; color: #dc3545;">
                            <i class="fas fa-exclamation-triangle"></i> Failed to load image
                        </div>
                    `;
                    console.error(`❌ Failed to load image for question ${questionIndex}`);
                };

                img.src = s3Url;
            });
        }



        // Load images when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔄 DOM Content Loaded - Starting image loading...');
            
            // Debug: Check what images exist
            const questionImageContainers = document.querySelectorAll('.question-image-container');

            console.log('🔍 Image Debug Info:');
            console.log('  - Question image containers found:', questionImageContainers.length);

            if (questionImageContainers.length > 0) {
                questionImageContainers.forEach((container, index) => {
                    const s3Key = container.dataset.s3Key;
                    const questionIndex = container.dataset.questionIndex;
                    console.log(`  - Question ${index}: s3Key="${s3Key}", questionIndex="${questionIndex}"`);
                });
            }

            // Load question images after a short delay
            setTimeout(loadQuestionImages, 500);
        });

        // Image modal functions
        window.openImageModal = function(imageUrl, title) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            const modalTitle = document.getElementById('modalImageTitle');
            
            if (modal && modalImg && modalTitle) {
                modalTitle.textContent = title;
                modalImg.src = imageUrl;
                modal.style.display = 'block';
            }
        };

        window.closeImageModal = function() {
            const modal = document.getElementById('imageModal');
            if (modal) {
                modal.style.display = 'none';
            }
        };

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('imageModal');
            if (event.target === modal) {
                closeImageModal();
            }
        };

        // PDF Viewer and Download functions
        window.openPdfViewer = function(pdfUrl, fileName) {
            try {
                // Open PDF in a new tab/window
                const newWindow = window.open(pdfUrl, '_blank');
                if (!newWindow) {
                    // If popup blocked, show alert
                    alert('Popup blocked! Please allow popups for this site to view PDFs.');
                }
            } catch (error) {
                console.error('Error opening PDF viewer:', error);
                alert('Error opening PDF. Please try again.');
            }
        };

        window.downloadPdf = function(pdfUrl, fileName) {
            try {
                // Create a temporary link element for download
                const link = document.createElement('a');
                link.href = pdfUrl;
                link.download = fileName;
                link.target = '_blank';
                
                // Append to body, click, and remove
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                console.log('PDF download initiated:', fileName);
            } catch (error) {
                console.error('Error downloading PDF:', error);
                alert('Error downloading PDF. Please try again.');
            }
        };



        // Rich Text Editor and Math Support Functions
        function toggleStudentEditor(questionIndex, editorType) {
            const plainTextBtn = document.getElementById(`plainTextBtn-${questionIndex}`);
            const richTextBtn = document.getElementById(`richTextBtn-${questionIndex}`);
            const textarea = document.getElementById(`text-answer-${questionIndex}`);
            const richTextEditor = document.getElementById(`richTextEditor-${questionIndex}`);
            
            if (editorType === 'plain') {
                // Switch to plain text
                plainTextBtn.classList.add('active');
                richTextBtn.classList.remove('active');
                textarea.style.display = 'block';
                richTextEditor.style.display = 'none';
                
                // Update the answer in the answers object
                const richTextContent = document.getElementById(`richTextContent-${questionIndex}`);
                if (richTextContent) {
                    answers[questionIndex] = {
                        selectedAnswer: richTextContent.innerHTML
                    };
                }
            } else {
                // Switch to rich text
                richTextBtn.classList.add('active');
                plainTextBtn.classList.remove('active');
                textarea.style.display = 'none';
                richTextEditor.style.display = 'block';
                
                // Update the answer in the answers object
                if (textarea) {
                    const richTextContent = document.getElementById(`richTextContent-${questionIndex}`);
                    if (richTextContent) {
                        richTextContent.innerHTML = answers[questionIndex]?.selectedAnswer || '';
                    }
                }
            }
        }

        function insertMathInStudentEditor(questionIndex, mathSymbol) {
            const textarea = document.getElementById(`text-answer-${questionIndex}`);
            const richTextContent = document.getElementById(`richTextContent-${questionIndex}`);
            
            if (textarea && textarea.style.display !== 'none') {
                // Insert into plain text textarea
                const start = textarea.selectionStart;
                const end = textarea.selectionEnd;
                const text = textarea.value;
                const before = text.substring(0, start);
                const after = text.substring(end);
                
                textarea.value = before + mathSymbol + after;
                textarea.selectionStart = textarea.selectionEnd = start + mathSymbol.length;
                textarea.focus();
                
                // Update the answer
                updateTextAnswer(questionIndex, textarea.value);
            } else if (richTextContent && richTextContent.style.display !== 'none') {
                // Insert into rich text editor
                const selection = window.getSelection();
                if (selection.rangeCount > 0) {
                    const range = selection.getRangeAt(0);
                    const mathNode = document.createTextNode(mathSymbol);
                    range.deleteContents();
                    range.insertNode(mathNode);
                    range.collapse(false);
                    selection.removeAllRanges();
                    selection.addRange(range);
                    
                    // Update the answer
                    updateStudentRichTextAnswer(questionIndex);
                }
            }
        }

        function execStudentCommand(questionIndex, command) {
            const richTextContent = document.getElementById(`richTextContent-${questionIndex}`);
            if (richTextContent) {
                document.execCommand(command, false, null);
                richTextContent.focus();
                updateStudentRichTextAnswer(questionIndex);
            }
        }

        function updateStudentRichTextAnswer(questionIndex) {
            const richTextContent = document.getElementById(`richTextContent-${questionIndex}`);
            if (richTextContent) {
                answers[questionIndex] = {
                    selectedAnswer: richTextContent.innerHTML
                };
            }
        }

        // Student chart rendering function
        function renderStudentChart(element) {
            const canvas = document.getElementById('student-chart-' + element.id);
            if (!canvas || !window.Chart) {
                console.log('Canvas or Chart.js not available for student chart', element.id);
                return;
            }

            // Destroy existing chart if it exists
            if (canvas.chart) {
                canvas.chart.destroy();
            }

            // Parse chart data
            var chartDataStr = element.chartData || getDefaultStudentChartData(element.type);
            var dataPoints = parseStudentChartData(chartDataStr);

            // Get color theme
            var colors = getStudentChartColors(element.colorTheme || 'blue', dataPoints.length);

            // Create chart configuration
            var config = createStudentChartConfig(element, dataPoints, colors);

            // Create the chart
            try {
                canvas.chart = new Chart(canvas, config);
                console.log('Student chart created successfully for', element.id);
            } catch (error) {
                console.error('Error creating student chart:', error);
            }
        }

        function getDefaultStudentChartData(chartType) {
            switch (chartType) {
                case 'pie-chart':
                    return 'Red:30, Blue:25, Green:20, Yellow:25';
                case 'bar-chart':
                case 'line-chart':
                default:
                    return 'Jan:10, Feb:20, Mar:15, Apr:25, May:30';
            }
        }

        function parseStudentChartData(dataStr) {
            var pairs = dataStr.split(',').map(function(pair) { return pair.trim(); });
            var labels = [];
            var values = [];

            pairs.forEach(function(pair) {
                var parts = pair.split(':').map(function(item) { return item.trim(); });
                var label = parts[0];
                var value = parts[1];
                if (label && value && !isNaN(parseFloat(value))) {
                    labels.push(label);
                    values.push(parseFloat(value));
                }
            });

            return { labels: labels, values: values };
        }

        function getStudentChartColors(theme, count) {
            var themes = {
                blue: ['#3b82f6', '#60a5fa', '#93c5fd', '#bfdbfe', '#dbeafe'],
                green: ['#10b981', '#34d399', '#6ee7b7', '#9decf9', '#a7f3d0'],
                red: ['#ef4444', '#f87171', '#fca5a5', '#fecaca', '#fee2e2'],
                purple: ['#8b5cf6', '#a78bfa', '#c4b5fd', '#ddd6fe', '#ede9fe'],
                rainbow: ['#ef4444', '#f59e0b', '#10b981', '#3b82f6', '#8b5cf6', '#ec4899']
            };

            var colorSet = themes[theme] || themes.blue;
            var colors = [];

            for (var i = 0; i < count; i++) {
                colors.push(colorSet[i % colorSet.length]);
            }

            return colors;
        }

        function createStudentChartConfig(element, dataPoints, colors) {
            var baseConfig = {
                data: {
                    labels: dataPoints.labels,
                    datasets: [{
                        data: dataPoints.values,
                        backgroundColor: colors,
                        borderColor: colors.map(function(color) { return color; }),
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        title: {
                            display: !!(element.chartTitle),
                            text: element.chartTitle || '',
                            font: { size: 12 }
                        },
                        legend: {
                            display: element.type === 'pie-chart',
                            position: 'bottom',
                            labels: { font: { size: 10 } }
                        }
                    }
                }
            };

            // Chart type specific configurations
            switch (element.type) {
                case 'bar-chart':
                    return {
                        type: 'bar',
                        data: baseConfig.data,
                        options: Object.assign({}, baseConfig.options, {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: !!(element.yAxisLabel),
                                        text: element.yAxisLabel || '',
                                        font: { size: 10 }
                                    },
                                    ticks: { font: { size: 9 } }
                                },
                                x: {
                                    title: {
                                        display: !!(element.xAxisLabel),
                                        text: element.xAxisLabel || '',
                                        font: { size: 10 }
                                    },
                                    ticks: { font: { size: 9 } }
                                }
                            }
                        })
                    };

                case 'line-chart':
                    return {
                        type: 'line',
                        data: {
                            labels: baseConfig.data.labels,
                            datasets: [{
                                data: baseConfig.data.datasets[0].data,
                                backgroundColor: baseConfig.data.datasets[0].backgroundColor,
                                borderColor: baseConfig.data.datasets[0].borderColor,
                                borderWidth: baseConfig.data.datasets[0].borderWidth,
                                fill: false,
                                tension: 0.1
                            }]
                        },
                        options: Object.assign({}, baseConfig.options, {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                    title: {
                                        display: !!(element.yAxisLabel),
                                        text: element.yAxisLabel || '',
                                        font: { size: 10 }
                                    },
                                    ticks: { font: { size: 9 } }
                                },
                                x: {
                                    title: {
                                        display: !!(element.xAxisLabel),
                                        text: element.xAxisLabel || '',
                                        font: { size: 10 }
                                    },
                                    ticks: { font: { size: 9 } }
                                }
                            }
                        })
                    };

                case 'pie-chart':
                default:
                    return {
                        type: 'pie',
                        data: baseConfig.data,
                        options: baseConfig.options
                    };
            }
        }

        window.renderStudentChart = renderStudentChart;

        // Final debug log to confirm all functions are defined
        console.log('🎯 All functions registered:', {
            selectOption: typeof window.selectOption,
            nextQuestion: typeof window.nextQuestion,
            previousQuestion: typeof window.previousQuestion,
            goToQuestion: typeof window.goToQuestion,
            openImageModal: typeof window.openImageModal,
            closeImageModal: typeof window.closeImageModal,
            toggleStudentEditor: typeof window.toggleStudentEditor,
            insertMathInStudentEditor: typeof window.insertMathInStudentEditor,
            execStudentCommand: typeof window.execStudentCommand,
            updateStudentRichTextAnswer: typeof window.updateStudentRichTextAnswer,
            renderStudentChart: typeof window.renderStudentChart
        });

        console.log('🚀 Script execution completed!');
    </script>
    
    <!-- Image Modal -->
    <div id="imageModal" class="image-modal" style="display: none;">
        <div class="image-modal-content">
            <span class="image-modal-close" onclick="closeImageModal()">&times;</span>
            <h3 id="modalImageTitle"></h3>
            <img id="modalImage" class="modal-image" alt="Full size image">
        </div>
    </div>
    
    <!-- Session timeout management -->
    <script src="/js/session-timeout.js"></script>
</body>
</html> 