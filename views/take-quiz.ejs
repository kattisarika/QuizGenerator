<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Take Quiz - <%= quiz.title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- MathJax for Math Equation Support -->
    <script>
    window.MathJax = {
        tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']],
            processEscapes: true,
            processEnvironments: true
        },
        options: {
            skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
        }
    };
    </script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <style>
        /* Text Answer Styles */
        .text-answer-section {
            margin-top: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            border: 2px solid #e9ecef;
        }
        
        .text-answer-label {
            display: block;
            font-weight: 600;
            color: #495057;
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .text-answer-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            font-size: 14px;
            line-height: 1.5;
            resize: vertical;
            min-height: 80px;
            transition: border-color 0.3s ease;
        }
        
        .text-answer-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        
        .no-options-message {
            margin-top: 20px;
            padding: 20px;
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            text-align: center;
        }
        
        .no-options-message p {
            margin: 0;
            color: #856404;
        }
        
        .no-options-message i {
            color: #f39c12;
        }

        /* Math Toolbar Styles */
        .math-toolbar {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .math-toolbar .btn-group {
            margin-bottom: 8px;
        }

        .math-toolbar .btn {
            font-size: 12px;
            padding: 6px 10px;
            border-radius: 6px;
            transition: all 0.2s ease;
        }

        .math-toolbar .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .math-toolbar .btn:active {
            transform: translateY(0);
        }

        .math-help {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }

        /* Rich Text Editor Styles */
        .rich-text-toolbar {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px 8px 0 0;
            padding: 10px;
            border-bottom: none;
        }

        .rich-text-toolbar .btn {
            margin-right: 5px;
            border-radius: 4px;
        }

        .rich-text-content {
            border: 1px solid #dee2e6;
            border-radius: 0 0 8px 8px;
            min-height: 120px;
            max-height: 300px;
            overflow-y: auto;
            line-height: 1.6;
        }

        .rich-text-content:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .rich-text-content ul, .rich-text-content ol {
            margin-left: 20px;
        }

        .rich-text-content p {
            margin-bottom: 8px;
        }

        /* Math Preview Styles */
        .math-preview {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border: 2px solid #dee2e6;
            border-radius: 10px;
            padding: 20px;
            margin-top: 15px;
            min-height: 80px;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);
        }

        .math-preview strong {
            color: #495057;
            font-weight: 600;
            margin-bottom: 10px;
            display: block;
        }

        /* Editor Toggle Buttons */
        .btn-group .btn.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-color: #667eea;
            color: white;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

        .btn-group .btn:not(.active):hover {
            background: #e9ecef;
            border-color: #667eea;
            color: #667eea;
        }

        /* Question Image Styles */
        .question-image-container {
            margin-top: 15px;
            text-align: center;
        }

        .question-image {
            max-width: 100%;
            max-height: 300px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }

        .question-image:hover {
            transform: scale(1.02);
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="/">SkillOns</a>
            </div>
            <div class="nav-menu">
                <a href="/student/dashboard" class="nav-link">Dashboard</a>
                <a href="/available-quizzes" class="nav-link">Browse Quizzes</a>
                <a href="/student/study-material" class="nav-link">View Study Material</a>
                <a href="/my-results" class="nav-link">My Results</a>
                <a href="/logout" class="nav-link logout-btn">Logout</a>
            </div>
        </div>
    </nav>

    <main class="main-content">
        <div class="quiz-taking-container">
            <div class="quiz-header">
                <div class="quiz-info">
                    <h1><%= quiz.title %></h1>
                    <p><%= quiz.description %></p>
                </div>
                
                <div class="quiz-timer">
                    <div class="timer-display">
                        <i class="fas fa-clock"></i>
                        <span id="timer">00:00</span>
                    </div>
                </div>
            </div>

            <div class="progress-info">
                <span id="current-question">Question 1 of <%= quiz.questions.length %></span>
            </div>

            <div class="quiz-progress">
                <div class="progress-bar">
                    <div class="progress-fill" id="progress-fill"></div>
                </div>
            </div>

            <div class="quiz-content">
                <form id="quiz-form">
                    <div id="questions-container">
                        <% quiz.questions.forEach((question, index) => { %>
                            <div class="question-container" id="question-<%= index %>" style="display: <%= index === 0 ? 'block' : 'none' %>;">
                                <div class="question-header">
                                    <h3>Question <%= index + 1 %></h3>
                                    <span class="question-points"><%= question.points %> point<%= question.points !== 1 ? 's' : '' %></span>
                                </div>
                                
                                <div class="question-text">
                                    <%= question.question %>
                                    
                                    <% if (question.image) { %>
                                        <div class="question-image-container">
                                            <img src="<%= question.image %>" alt="Question Image" class="question-image" style="max-width: 100%; max-height: 300px; margin-top: 15px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1);">
                                        </div>
                                    <% } %>
                                    
                                    <!-- PDF Images Display -->
                                    <% if (quiz.pdfImages && quiz.pdfImages.length > 0) { %>
                                        <div class="pdf-images-container">
                                            <h4 class="pdf-images-title">
                                                <i class="fas fa-images"></i> Document Images
                                            </h4>
                                            <div class="pdf-images-grid">
                                                <% quiz.pdfImages.forEach((pdfImage, imgIndex) => { %>
                                                    <div class="pdf-image-item">
                                                        <div class="pdf-image-header">
                                                            <span class="pdf-image-label">Page <%= pdfImage.page %></span>
                                                            <% if (pdfImage.imageIndex > 1) { %>
                                                                <span class="pdf-image-subtitle">Image <%= pdfImage.imageIndex %></span>
                                                            <% } %>
                                                        </div>
                                                        <img src="<%= pdfImage.url %>" 
                                                             alt="PDF Page <%= pdfImage.page %> Image <%= pdfImage.imageIndex %>" 
                                                             class="pdf-image" 
                                                             style="max-width: 100%; max-height: 400px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); cursor: pointer;"
                                                             onclick="openImageModal('<%= pdfImage.url %>', 'Page <%= pdfImage.page %>')">
                                                    </div>
                                                <% }); %>
                                            </div>
                                        </div>
                                    <% } %>
                                </div>
                                
                                <% if (question.type === 'multiple-choice' && question.options && question.options.length > 0) { %>
                                    <!-- Multiple Choice Options -->
                                    <div class="options-list">
                                        <% question.options.forEach((option, optionIndex) => { %>
                                            <div class="option-item" onclick="selectOption('<%= index %>', '<%= optionIndex %>')" data-question="<%= index %>" data-option="<%= optionIndex %>">
                                                <input type="radio" 
                                                       id="q<%= index %>-opt<%= optionIndex %>" 
                                                       name="question-<%= index %>" 
                                                       value="<%= option %>"
                                                       data-question="<%= index %>"
                                                       data-option="<%= optionIndex %>">
                                                <label for="q<%= index %>-opt<%= optionIndex %>" class="option-label">
                                                    <%= String.fromCharCode(65 + optionIndex) %>)
                                                </label>
                                                <span class="option-text"><%= option %></span>
                                            </div>
                                        <% }); %>
                                    </div>
                                <% } else if (question.type === 'short-answer' || question.isTextAnswer) { %>
                                    <!-- Text Answer Input with Rich Text Editor and Math Support -->
                                    <div class="text-answer-section">
                                        <label for="text-answer-<%= index %>" class="text-answer-label">
                                            <i class="fas fa-keyboard me-2"></i>Your Answer:
                                        </label>
                                        
                                        <!-- Rich Text Editor Toggle -->
                                        <div class="mb-2">
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button type="button" class="btn btn-outline-primary active" id="plainTextBtn-<%= index %>" onclick="toggleStudentEditor('<%= index %>', 'plain')">
                                                    <i class="fas fa-font"></i> Plain Text
                                                </button>
                                                <button type="button" class="btn btn-outline-primary" id="richTextBtn-<%= index %>" onclick="toggleStudentEditor('<%= index %>', 'rich')">
                                                    <i class="fas fa-edit"></i> Rich Text
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Math Toolbar -->
                                        <div class="math-toolbar">
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\frac{a}{b}')" title="Fraction">
                                                    <i class="fas fa-divide"></i> Fraction
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\sqrt{x}')" title="Square Root">
                                                    √ Root
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', 'x^{2}')" title="Exponent">
                                                    x² Power
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', 'x_{n}')" title="Subscript">
                                                    x₁ Subscript
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\sum_{i=1}^{n}')" title="Sum">
                                                    Σ Sum
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\int_{a}^{b}')" title="Integral">
                                                    ∫ Integral
                                                </button>
                                            </div>
                                            <div class="btn-group btn-group-sm mt-2" role="group">
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\alpha')" title="Alpha">
                                                    α Alpha
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\beta')" title="Beta">
                                                    β Beta
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\theta')" title="Theta">
                                                    θ Theta
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\pi')" title="Pi">
                                                    π Pi
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\pm')" title="Plus-Minus">
                                                    ± Plus-Minus
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\neq')" title="Not Equal">
                                                    ≠ Not Equal
                                                </button>
                                            </div>
                                            <div class="math-help">
                                                <i class="fas fa-info-circle"></i> Use $ for inline math: $x^2$ or $$ for display math: $$\frac{a}{b}$$
                                                <br>
                                                <small class="text-muted">Click any button above to insert common math symbols, or type LaTeX directly.</small>
                                            </div>
                                        </div>
                                        
                                        <!-- Plain Text Input -->
                                        <textarea 
                                            id="text-answer-<%= index %>" 
                                            class="text-answer-input" 
                                            placeholder="Type your answer here. Use $ for math: $x^2 + y^2 = z^2$"
                                            rows="4"
                                            oninput="updateTextAnswer('<%= index %>', this.value)"
                                            data-question="<%= index %>">
                                        </textarea>
                                        
                                        <!-- Rich Text Editor (Hidden by default) -->
                                        <div id="richTextEditor-<%= index %>" style="display: none;">
                                            <div class="rich-text-toolbar mb-2">
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="execStudentCommand('<%= index %>', 'bold')" title="Bold">
                                                    <i class="fas fa-bold"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="execStudentCommand('<%= index %>', 'italic')" title="Italic">
                                                    <i class="fas fa-italic"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="execStudentCommand('<%= index %>', 'underline')" title="Underline">
                                                    <i class="fas fa-underline"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="execStudentCommand('<%= index %>', 'insertUnorderedList')" title="Bullet List">
                                                    <i class="fas fa-list-ul"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="execStudentCommand('<%= index %>', 'insertOrderedList')" title="Numbered List">
                                                    <i class="fas fa-list-ol"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\frac{a}{b}')" title="Math">
                                                    <i class="fas fa-square-root-alt"></i>
                                                </button>
                                            </div>
                                            <div class="rich-text-content" id="richTextContent-<%= index %>" contenteditable="true" style="border: 1px solid #dee2e6; border-radius: 0.375rem; padding: 0.75rem; min-height: 120px; background: white;" oninput="updateStudentRichTextAnswer('<%= index %>')"></div>
                                        </div>
                                        
                                        <!-- Live Preview -->
                                        <div id="answerPreview-<%= index %>" class="math-preview" style="display: none;">
                                            <strong>Preview:</strong>
                                            <div id="answerPreviewContent-<%= index %>">Your answer preview will appear here...</div>
                                        </div>
                                        
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle me-1"></i>
                                            This is a text answer question. You can use rich text formatting and math equations.
                                        </small>
                                    </div>
                                <% } else if (question.options && question.options.length > 0) { %>
                                    <!-- Fallback to multiple choice if type is not specified but options exist -->
                                    <div class="options-list">
                                        <% question.options.forEach((option, optionIndex) => { %>
                                            <div class="option-item" onclick="selectOption('<%= index %>', '<%= optionIndex %>')" data-question="<%= index %>" data-option="<%= optionIndex %>">
                                                <input type="radio" 
                                                       id="q<%= index %>-opt<%= optionIndex %>" 
                                                       name="question-<%= index %>" 
                                                       value="<%= option %>"
                                                       data-question="<%= index %>"
                                                       data-option="<%= optionIndex %>">
                                                <label for="q<%= index %>-opt<%= optionIndex %>" class="option-label">
                                                    <%= String.fromCharCode(65 + optionIndex) %>)
                                                </label>
                                                <span class="option-text"><%= option %></span>
                                            </div>
                                        <% }); %>
                                    </div>
                                <% } else { %>
                                    <!-- No options available - show message -->
                                    <div class="no-options-message">
                                        <p class="text-muted">
                                            <i class="fas fa-exclamation-triangle me-2"></i>
                                            No answer options available for this question.
                                        </p>
                                    </div>
                                <% } %>
                            </div>
                        <% }); %>
                    </div>

                    <div class="quiz-navigation">
                        <div class="nav-buttons">
                            <button type="button" id="prev-btn" class="btn btn-secondary" onclick="previousQuestion()" disabled>
                                <i class="fas fa-chevron-left"></i> Previous
                            </button>
                            
                            <button type="button" id="next-btn" class="btn btn-primary" onclick="nextQuestion()">
                                Next <i class="fas fa-chevron-right"></i>
                            </button>
                            
                            <button type="submit" id="submit-btn" class="btn btn-success" style="display: none;">
                                <i class="fas fa-check"></i> Submit Quiz
                            </button>
                        </div>
                        
                        <div class="question-indicators">
                            <% quiz.questions.forEach((question, index) => { %>
                                <div class="question-indicator <%= index === 0 ? 'active' : '' %>" 
                                     onclick="goToQuestion(<%= index %>)" 
                                     id="indicator-<%= index %>">
                                    <%= index + 1 %>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="footer-content">
            <p>&copy; 2025 SkillOns. All rights reserved.</p>
        </div>
    </footer>

    <script>
        let currentQuestion = 0;
        let answers = {};
        let startTime = Date.now();
        let timerInterval;
        const totalQuestions = <%= quiz.questions.length %>;
        const quizId = '<%= quiz._id %>';

        // Initialize quiz
        document.addEventListener('DOMContentLoaded', function() {
            startTimer();
            updateProgress();
            initializeAnsweredQuestions();
        });

        // Initialize visual feedback for already answered questions
        function initializeAnsweredQuestions() {
            document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
                const questionIndex = parseInt(radio.dataset.question);
                const optionIndex = parseInt(radio.dataset.option);
                
                // Mark the option as selected
                const questionContainer = document.getElementById(`question-${questionIndex}`);
                if (questionContainer) {
                    const selectedOption = questionContainer.querySelector(`.option-item[data-option="${optionIndex}"]`);
                    if (selectedOption) {
                        selectedOption.classList.add('option-selected');
                    }
                }
                
                // Mark the indicator as answered
                const indicator = document.getElementById(`indicator-${questionIndex}`);
                if (indicator) {
                    indicator.classList.add('answered');
                }
                
                // Store in answers object with correct format
                answers[questionIndex] = {
                    selectedAnswer: radio.value
                };
            });
        }

        // Function to select an option when clicking anywhere on the option area
        function selectOption(questionIndex, optionIndex) {
            // Convert string indices to integers
            questionIndex = parseInt(questionIndex);
            optionIndex = parseInt(optionIndex);
            
            const radioButton = document.getElementById(`q${questionIndex}-opt${optionIndex}`);
            if (radioButton) {
                radioButton.checked = true;
                
                // Update visual feedback for all options in this question
                const questionContainer = document.getElementById(`question-${questionIndex}`);
                const allOptions = questionContainer.querySelectorAll('.option-item');
                
                // Remove selected class from all options
                allOptions.forEach(opt => opt.classList.remove('option-selected'));
                
                // Add selected class to the clicked option
                const selectedOption = questionContainer.querySelector(`.option-item[data-option="${optionIndex}"]`);
                if (selectedOption) {
                    selectedOption.classList.add('option-selected');
                }
                
                // Update the question indicator to show it's been answered
                const indicator = document.getElementById(`indicator-${questionIndex}`);
                if (indicator) {
                    indicator.classList.add('answered');
                }
                
                // Store the answer as an object with selectedAnswer property
                answers[questionIndex] = {
                    selectedAnswer: radioButton.value
                };
                
                // Debug log
                console.log(`Selected option for question ${questionIndex}:`, radioButton.value);
                console.log('Current answers object:', answers);
            }
        }

        // Function to handle text answer updates
        function updateTextAnswer(questionIndex, value) {
            questionIndex = parseInt(questionIndex);
            
            // Store the text answer (trimmed to remove extra whitespace)
            answers[questionIndex] = {
                selectedAnswer: value.trim()
            };
            
            // Update the question indicator to show it's been answered
            const indicator = document.getElementById(`indicator-${questionIndex}`);
            if (indicator && value.trim()) {
                indicator.classList.add('answered');
            } else if (indicator) {
                indicator.classList.remove('answered');
            }
            
            // Update preview if it exists
            updateAnswerPreview(questionIndex, value);
            
            // Debug log
            console.log(`Text answer for question ${questionIndex}:`, value);
            console.log('Current answers object:', answers);
        }

        // Rich Text Editor Toggle for Students
        function toggleStudentEditor(questionIndex, type) {
            const plainTextBtn = document.getElementById(`plainTextBtn-${questionIndex}`);
            const richTextBtn = document.getElementById(`richTextBtn-${questionIndex}`);
            const textarea = document.getElementById(`text-answer-${questionIndex}`);
            const richTextEditor = document.getElementById(`richTextEditor-${questionIndex}`);
            const richTextContent = document.getElementById(`richTextContent-${questionIndex}`);

            if (type === 'rich') {
                // Switch to rich text editor
                plainTextBtn.classList.remove('active');
                richTextBtn.classList.add('active');
                textarea.style.display = 'none';
                richTextEditor.style.display = 'block';
                
                // Transfer content from textarea to rich text editor
                richTextContent.innerHTML = textarea.value.trim().replace(/\n/g, '<br>');
                
                // Update preview
                updateAnswerPreview(questionIndex, richTextContent.innerText.trim());
            } else {
                // Switch to plain text editor
                plainTextBtn.classList.add('active');
                richTextBtn.classList.remove('active');
                textarea.style.display = 'block';
                richTextEditor.style.display = 'none';
                
                // Transfer content from rich text editor to textarea
                textarea.value = richTextContent.innerText.trim();
                
                // Update preview
                updateAnswerPreview(questionIndex, textarea.value.trim());
            }
        }

        // Insert math in student rich text editor
        function insertMathInStudentEditor(questionIndex, latex) {
            const textarea = document.getElementById(`text-answer-${questionIndex}`);
            const richTextContent = document.getElementById(`richTextContent-${questionIndex}`);
            
            if (richTextContent.style.display !== 'none') {
                // Rich text editor is active
                const selection = window.getSelection();
                if (selection.rangeCount > 0) {
                    const range = selection.getRangeAt(0);
                    const mathNode = document.createElement('span');
                    mathNode.innerHTML = '$' + latex + '$';
                    range.deleteContents();
                    range.insertNode(mathNode);
                    range.collapse(false);
                    richTextContent.focus();
                    
                    // Update answer and preview
                    updateStudentRichTextAnswer(questionIndex);
                }
            } else {
                // Plain text editor is active
                const start = textarea.selectionStart;
                const end = textarea.selectionEnd;
                const text = textarea.value;
                
                // Insert LaTeX with $ delimiters
                const insertion = '$' + latex + '$';
                textarea.value = text.substring(0, start) + insertion + text.substring(end);
                
                // Update cursor position
                textarea.selectionStart = start + insertion.length;
                textarea.selectionEnd = start + insertion.length;
                textarea.focus();
                
                // Update answer and preview
                updateTextAnswer(questionIndex, textarea.value);
            }
        }

        // Rich text editor commands for students
        function execStudentCommand(questionIndex, command) {
            document.execCommand(command, false, null);
            updateStudentRichTextAnswer(questionIndex);
        }

        // Update student rich text answer
        function updateStudentRichTextAnswer(questionIndex) {
            const richTextContent = document.getElementById(`richTextContent-${questionIndex}`);
            if (richTextContent) {
                const answer = richTextContent.innerText.trim(); // Trim whitespace
                answers[questionIndex] = {
                    selectedAnswer: answer
                };
                
                // Update preview
                updateAnswerPreview(questionIndex, answer);
                
                // Update indicator
                const indicator = document.getElementById(`indicator-${questionIndex}`);
                if (indicator && answer.trim()) {
                    indicator.classList.add('answered');
                } else if (indicator) {
                    indicator.classList.remove('answered');
                }
                
                console.log(`Rich text answer for question ${questionIndex}:`, answer);
            }
        }

        // Update answer preview with math rendering
        function updateAnswerPreview(questionIndex, value) {
            const previewDiv = document.getElementById(`answerPreview-${questionIndex}`);
            const previewContent = document.getElementById(`answerPreviewContent-${questionIndex}`);
            
            if (previewDiv && previewContent) {
                if (value.trim()) {
                    previewContent.innerHTML = value;
                    previewDiv.style.display = 'block';
                    
                    // Re-render math with MathJax
                    if (window.MathJax) {
                        MathJax.typesetPromise([previewContent]).catch((e) => console.log(e));
                    }
                } else {
                    previewDiv.style.display = 'none';
                }
            }
        }

        function startTimer() {
            timerInterval = setInterval(updateTimer, 1000);
        }

        function updateTimer() {
            const elapsed = Math.floor((Date.now() - startTime) / 1000);
            const minutes = Math.floor(elapsed / 60);
            const seconds = elapsed % 60;
            document.getElementById('timer').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function updateProgress() {
            const progress = ((currentQuestion + 1) / totalQuestions) * 100;
            document.getElementById('progress-fill').style.width = progress + '%';
            document.getElementById('current-question').textContent = 
                `Question ${currentQuestion + 1} of ${totalQuestions}`;
        }

        function showQuestion(index) {
            // Hide all questions
            document.querySelectorAll('.question-container').forEach(q => q.style.display = 'none');
            
            // Show current question
            const currentQuestionElement = document.getElementById(`question-${index}`);
            currentQuestionElement.style.display = 'block';
            
            // Check if this question has been answered and highlight the selected option
            const selectedRadio = currentQuestionElement.querySelector('input[type="radio"]:checked');
            if (selectedRadio) {
                const optionIndex = selectedRadio.dataset.option;
                const allOptions = currentQuestionElement.querySelectorAll('.option-item');
                allOptions.forEach(opt => opt.classList.remove('option-selected'));
                const selectedOption = currentQuestionElement.querySelector(`.option-item[data-option="${optionIndex}"]`);
                if (selectedOption) {
                    selectedOption.classList.add('option-selected');
                }
            }
            
            // Update indicators
            document.querySelectorAll('.question-indicator').forEach(ind => ind.classList.remove('active'));
            document.getElementById(`indicator-${index}`).classList.add('active');
            
            // Update navigation buttons
            document.getElementById('prev-btn').disabled = index === 0;
            
            if (index === totalQuestions - 1) {
                document.getElementById('next-btn').style.display = 'none';
                document.getElementById('submit-btn').style.display = 'inline-block';
            } else {
                document.getElementById('next-btn').style.display = 'inline-block';
                document.getElementById('submit-btn').style.display = 'none';
            }
            
            updateProgress();
        }

        function nextQuestion() {
            if (currentQuestion < totalQuestions - 1) {
                currentQuestion++;
                showQuestion(currentQuestion);
            }
        }

        function previousQuestion() {
            if (currentQuestion > 0) {
                currentQuestion--;
                showQuestion(currentQuestion);
            }
        }

        function goToQuestion(index) {
            currentQuestion = index;
            showQuestion(currentQuestion);
        }

        // Track answers
        document.addEventListener('change', function(e) {
            if (e.target.type === 'radio') {
                const questionIndex = parseInt(e.target.dataset.question);
                const optionIndex = parseInt(e.target.dataset.option);
                const selectedAnswer = e.target.value;
                
                answers[questionIndex] = {
                    selectedAnswer: selectedAnswer,
                    optionIndex: optionIndex
                };
                
                // Mark indicator as answered
                document.getElementById(`indicator-${questionIndex}`).classList.add('answered');
            }
        });

        // Handle form submission
        document.getElementById('quiz-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const timeTaken = Math.floor((Date.now() - startTime) / 1000);
            
            // Collect all answers
            const answersArray = [];
            for (let i = 0; i < totalQuestions; i++) {
                if (answers[i]) {
                    answersArray.push({
                        questionIndex: i,
                        selectedAnswer: answers[i].selectedAnswer
                    });
                } else {
                    answersArray.push({
                        questionIndex: i,
                        selectedAnswer: ''
                    });
                }
            }
            
            // Debug: Log what we're sending
            console.log('Sending answers to backend:', answersArray);
            console.log('Raw answers object:', answers);
            
            // Submit quiz
            fetch(`/submit-quiz/${quizId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    answers: answersArray,
                    timeTaken: timeTaken
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show completion message with results
                    showCompletionMessage(data);
                } else {
                    alert('Error submitting quiz: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error submitting quiz. Please try again.');
            });
        });

        // Track if quiz is submitted
        let quizSubmitted = false;
        
        // Warn before leaving page (only if quiz not submitted)
        window.addEventListener('beforeunload', function(e) {
            if (!quizSubmitted) {
                e.preventDefault();
                e.returnValue = 'Are you sure you want to leave? Your progress will be lost.';
            }
        });
        
        // Function to show completion message
        function showCompletionMessage(data) {
            // Mark quiz as submitted to prevent leave warning
            quizSubmitted = true;
            
            // Stop the timer
            if (timerInterval) {
                clearInterval(timerInterval);
            }
            
            // Hide the quiz form
            document.getElementById('quiz-form').style.display = 'none';
            
            // Create and show completion message
            const completionHTML = `
                <div class="quiz-completion-container" style="
                    max-width: 600px;
                    margin: 50px auto;
                    padding: 40px;
                    background: white;
                    border-radius: 15px;
                    box-shadow: 0 10px 40px rgba(0,0,0,0.1);
                    text-align: center;
                    animation: fadeIn 0.5s ease-in;
                ">
                    <div class="completion-icon" style="
                        width: 100px;
                        height: 100px;
                        margin: 0 auto 20px;
                        background: linear-gradient(135deg, #28a745, #20c997);
                        border-radius: 50%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        animation: scaleIn 0.5s ease-out;
                    ">
                        <i class="fas fa-check" style="font-size: 50px; color: white;"></i>
                    </div>
                    
                    <h2 style="color: #28a745; margin-bottom: 20px; font-size: 32px;">Quiz Completed!</h2>
                    
                    <div class="score-display" style="
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        padding: 30px;
                        border-radius: 10px;
                        margin: 20px 0;
                    ">
                        <h3 style="margin: 0 0 10px 0; font-size: 24px;">Your Score</h3>
                        <div style="font-size: 48px; font-weight: bold;">
                            ${data.percentage}%
                        </div>
                        <div style="margin-top: 15px; font-size: 20px;">
                            ${data.correctAnswers} out of ${data.totalQuestions} answers correct
                        </div>
                    </div>
                    
                    <div class="result-message" style="
                        padding: 20px;
                        background: #f8f9fa;
                        border-radius: 10px;
                        margin: 20px 0;
                    ">
                        <p style="margin: 0; font-size: 18px; color: #333;">
                            ${data.percentage >= 70 ? 
                                '🎉 Excellent work! You did a great job!' : 
                                data.percentage >= 50 ? 
                                '👍 Good effort! Keep practicing to improve!' : 
                                '📚 Keep studying! You can do better next time!'}
                        </p>
                    </div>
                    
                    <button onclick="viewDetailedResults('${data.resultId}')" style="
                        background: #667eea;
                        color: white;
                        border: none;
                        padding: 15px 40px;
                        font-size: 18px;
                        border-radius: 50px;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        margin-top: 20px;
                        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
                    " onmouseover="this.style.transform='scale(1.05)'; this.style.boxShadow='0 6px 20px rgba(102, 126, 234, 0.4)'" 
                       onmouseout="this.style.transform='scale(1)'; this.style.boxShadow='0 4px 15px rgba(102, 126, 234, 0.3)'">
                        <i class="fas fa-chart-bar"></i> View Detailed Results
                    </button>
                    
                    <div style="margin-top: 20px;">
                        <a href="/student/dashboard" style="
                            color: #667eea;
                            text-decoration: none;
                            font-size: 16px;
                            padding: 10px 20px;
                            border: 2px solid #667eea;
                            border-radius: 25px;
                            display: inline-block;
                            transition: all 0.3s ease;
                        " onmouseover="this.style.background='#667eea'; this.style.color='white'" 
                           onmouseout="this.style.background='transparent'; this.style.color='#667eea'">
                            <i class="fas fa-home"></i> Return to Dashboard
                        </a>
                    </div>
                </div>
                
                <style>
                    @keyframes fadeIn {
                        from { opacity: 0; transform: translateY(20px); }
                        to { opacity: 1; transform: translateY(0); }
                    }
                    @keyframes scaleIn {
                        from { transform: scale(0); }
                        to { transform: scale(1); }
                    }
                </style>
            `;
            
            // Replace the quiz content with completion message
            document.querySelector('.quiz-content').innerHTML = completionHTML;
            
            // Update the header to show completion
            const quizHeader = document.querySelector('.quiz-header h2');
            if (quizHeader) {
                quizHeader.innerHTML = '<i class="fas fa-trophy"></i> Quiz Results';
            }
            
            // Hide progress bar and timer
            const progressBar = document.querySelector('.quiz-progress');
            if (progressBar) {
                progressBar.style.display = 'none';
            }
            
            // Scroll to top smoothly
            window.scrollTo({ top: 0, behavior: 'smooth' });
            
            // Play a success sound if available
            const audio = new Audio('data:audio/wav;base64,UklGRjIAAABXQVZFZm10IBAAAAABAAEAQB8AAEAfAAABAAgAZGF0YQoAAADmbP//2WD//11g//8=');
            audio.play().catch(e => console.log('Audio play failed:', e));
        }
        
        // Function to view detailed results
        function viewDetailedResults(resultId) {
            // Mark as submitted to prevent warning
            quizSubmitted = true;
            // Navigate to results page
            window.location.href = `/quiz-result/${resultId}`;
        }
        
        // Function to open image modal
        function openImageModal(imageUrl, title) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            const modalTitle = document.getElementById('modalImageTitle');
            
            modalTitle.textContent = title;
            modalImg.src = imageUrl;
            modal.style.display = 'block';
        }
        
        // Function to close image modal
        function closeImageModal() {
            const modal = document.getElementById('imageModal');
            modal.style.display = 'none';
        }
        
        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('imageModal');
            if (event.target === modal) {
                closeImageModal();
            }
        }
    </script>
    
    <!-- Image Modal -->
    <div id="imageModal" class="image-modal" style="display: none;">
        <div class="image-modal-content">
            <span class="image-modal-close" onclick="closeImageModal()">&times;</span>
            <h3 id="modalImageTitle"></h3>
            <img id="modalImage" class="modal-image" alt="Full size image">
        </div>
    </div>
    
    <!-- Session timeout management -->
    <script src="/js/session-timeout.js"></script>
</body>
</html> 