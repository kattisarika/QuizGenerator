<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= isCompetitive ? 'Competitive Quiz' : 'Take Quiz' %> - <%= quiz.title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <% if (isCompetitive) { %>
    <script src="/socket.io/socket.io.js"></script>
    <% } %>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="/">Take Quiz Now!</a>
            </div>
            <div class="nav-menu">
                <a href="/student/dashboard" class="nav-link">Dashboard</a>
                <a href="/available-quizzes" class="nav-link">Browse Quizzes</a>
                <a href="/student/study-material" class="nav-link">View Study Material</a>
                <a href="/my-results" class="nav-link">My Results</a>
                <a href="/logout" class="nav-link logout-btn">Logout</a>
            </div>
        </div>
    </nav>

    <main class="main-content">
        <% if (isCompetitive) { %>
        <!-- Competitive Mode Live Leaderboard -->
        <div id="competitive-sidebar" style="position: fixed; right: 20px; top: 100px; width: 300px; background: white; border-radius: 10px; box-shadow: 0 4px 20px rgba(0,0,0,0.1); padding: 20px; z-index: 1000; max-height: 70vh; overflow-y: auto;">
            <h4><i class="fas fa-trophy text-warning"></i> Live Leaderboard</h4>
            <div id="live-leaderboard">
                <div class="text-center text-muted">
                    <i class="fas fa-spinner fa-spin"></i> Loading...
                </div>
            </div>
            
            <hr>
            
            <h5><i class="fas fa-users text-primary"></i> Participants</h5>
            <div id="participants-list">
                <div class="text-center text-muted">
                    <i class="fas fa-spinner fa-spin"></i> Loading...
                </div>
            </div>
            
            <!-- Winner Announcement -->
            <div id="winner-announcement" style="display: none;" class="alert alert-success text-center">
                <h5><i class="fas fa-crown text-warning"></i> Quiz Complete!</h5>
                <p class="mb-0" id="winner-text"></p>
            </div>
        </div>
        <% } %>
        
        <div class="quiz-taking-container" style="<%= isCompetitive ? 'margin-right: 340px;' : '' %>">
            <div class="quiz-header">
                <div class="quiz-info">
                    <h1><%= quiz.title %></h1>
                    <p><%= quiz.description %></p>
                </div>
                
                <div class="quiz-timer">
                    <div class="timer-display">
                        <i class="fas fa-clock"></i>
                        <span id="timer">00:00</span>
                    </div>
                </div>
            </div>

            <div class="progress-info">
                <span id="current-question">Question 1 of <%= quiz.questions.length %></span>
            </div>

            <div class="quiz-progress">
                <div class="progress-bar">
                    <div class="progress-fill" id="progress-fill"></div>
                </div>
            </div>

            <div class="quiz-content">
                <form id="quiz-form">
                    <div id="questions-container">
                        <% quiz.questions.forEach((question, index) => { %>
                            <div class="question-container" id="question-<%= index %>" style="display: <%= index === 0 ? 'block' : 'none' %>;">
                                <div class="question-header">
                                    <h3>Question <%= index + 1 %></h3>
                                    <span class="question-points"><%= question.points %> point<%= question.points !== 1 ? 's' : '' %></span>
                                </div>
                                
                                <div class="question-text">
                                    <%= question.question %>
                                </div>
                                
                                <div class="options-list">
                                    <% question.options.forEach((option, optionIndex) => { %>
                                        <div class="option-item">
                                            <input type="radio" 
                                                   id="q<%= index %>-opt<%= optionIndex %>" 
                                                   name="question-<%= index %>" 
                                                   value="<%= option %>"
                                                   data-question="<%= index %>"
                                                   data-option="<%= optionIndex %>">
                                            <label for="q<%= index %>-opt<%= optionIndex %>" class="option-label">
                                                <%= String.fromCharCode(65 + optionIndex) %>)
                                            </label>
                                            <span class="option-text"><%= option %></span>
                                        </div>
                                    <% }); %>
                                </div>
                            </div>
                        <% }); %>
                    </div>

                    <div class="quiz-navigation">
                        <div class="nav-buttons">
                            <button type="button" id="prev-btn" class="btn btn-secondary" onclick="previousQuestion()" disabled>
                                <i class="fas fa-chevron-left"></i> Previous
                            </button>
                            
                            <button type="button" id="next-btn" class="btn btn-primary" onclick="nextQuestion()">
                                Next <i class="fas fa-chevron-right"></i>
                            </button>
                            
                            <button type="submit" id="submit-btn" class="btn btn-success" style="display: none;">
                                <i class="fas fa-check"></i> Submit Quiz
                            </button>
                        </div>
                        
                        <div class="question-indicators">
                            <% quiz.questions.forEach((question, index) => { %>
                                <div class="question-indicator <%= index === 0 ? 'active' : '' %>" 
                                     onclick="goToQuestion(<%= index %>)" 
                                     id="indicator-<%= index %>">
                                    <%= index + 1 %>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="footer-content">
            <p>&copy; 2024 Take Quiz Now!. All rights reserved.</p>
        </div>
    </footer>

    <script>
        let currentQuestion = 0;
        let answers = {};
        let startTime = Date.now();
        let timerInterval;
        const totalQuestions = <%= quiz.questions.length %>;
        const quizId = '<%= quiz._id %>';
        let isSubmittingQuiz = false;

        // Initialize quiz
        document.addEventListener('DOMContentLoaded', function() {
            startTimer();
            updateProgress();
        });

        function startTimer() {
            timerInterval = setInterval(updateTimer, 1000);
        }

        function updateTimer() {
            const elapsed = Math.floor((Date.now() - startTime) / 1000);
            const minutes = Math.floor(elapsed / 60);
            const seconds = elapsed % 60;
            document.getElementById('timer').textContent = 
                `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function updateProgress() {
            const progress = ((currentQuestion + 1) / totalQuestions) * 100;
            document.getElementById('progress-fill').style.width = progress + '%';
            document.getElementById('current-question').textContent = 
                `Question ${currentQuestion + 1} of ${totalQuestions}`;
        }

        function showQuestion(index) {
            // Hide all questions
            document.querySelectorAll('.question-container').forEach(q => q.style.display = 'none');
            
            // Show current question
            document.getElementById(`question-${index}`).style.display = 'block';
            
            // Update indicators
            document.querySelectorAll('.question-indicator').forEach(ind => ind.classList.remove('active'));
            document.getElementById(`indicator-${index}`).classList.add('active');
            
            // Update navigation buttons
            document.getElementById('prev-btn').disabled = index === 0;
            
            if (index === totalQuestions - 1) {
                document.getElementById('next-btn').style.display = 'none';
                document.getElementById('submit-btn').style.display = 'inline-block';
            } else {
                document.getElementById('next-btn').style.display = 'inline-block';
                document.getElementById('submit-btn').style.display = 'none';
            }
            
            updateProgress();
        }

        function nextQuestion() {
            if (currentQuestion < totalQuestions - 1) {
                currentQuestion++;
                showQuestion(currentQuestion);
            }
        }

        function previousQuestion() {
            if (currentQuestion > 0) {
                currentQuestion--;
                showQuestion(currentQuestion);
            }
        }

        function goToQuestion(index) {
            currentQuestion = index;
            showQuestion(currentQuestion);
        }

        // Track answers
        document.addEventListener('change', function(e) {
            if (e.target.type === 'radio') {
                const questionIndex = parseInt(e.target.dataset.question);
                const optionIndex = parseInt(e.target.dataset.option);
                const selectedAnswer = e.target.value;
                
                answers[questionIndex] = {
                    selectedAnswer: selectedAnswer,
                    optionIndex: optionIndex
                };
                
                // Mark indicator as answered
                document.getElementById(`indicator-${questionIndex}`).classList.add('answered');
            }
        });

        // Make entire option area clickable
        document.addEventListener('click', function(e) {
            const optionItem = e.target.closest('.option-item');
            if (optionItem) {
                const radioInput = optionItem.querySelector('input[type="radio"]');
                if (radioInput && !radioInput.checked) {
                    radioInput.checked = true;
                    // Trigger the change event to update answers
                    radioInput.dispatchEvent(new Event('change', { bubbles: true }));
                }
            }
        });

        // Handle form submission
        document.getElementById('quiz-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Count answered questions
            const answeredCount = Object.keys(answers).length;
            const unansweredCount = totalQuestions - answeredCount;
            
            // Show confirmation dialog
            let confirmMessage = `You have answered ${answeredCount} out of ${totalQuestions} questions.`;
            if (unansweredCount > 0) {
                confirmMessage += `\n\n${unansweredCount} question(s) remain unanswered and will be marked as incorrect.`;
            }
            confirmMessage += '\n\nAre you ready to submit your quiz and see your results?';
            
            if (!confirm(confirmMessage)) {
                return; // User cancelled submission
            }
            
            // Set submission flag to prevent beforeunload warning
            isSubmittingQuiz = true;
            
            const timeTaken = Math.floor((Date.now() - startTime) / 1000);
            
            // Show loading state
            const submitBtn = document.getElementById('submit-btn');
            const originalText = submitBtn.textContent;
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Submitting...';
            
            // Collect all answers
            const answersArray = [];
            for (let i = 0; i < totalQuestions; i++) {
                if (answers[i]) {
                    answersArray.push({
                        questionIndex: i,
                        selectedAnswer: answers[i].selectedAnswer
                    });
                } else {
                    answersArray.push({
                        questionIndex: i,
                        selectedAnswer: ''
                    });
                }
            }
            
            // Submit quiz
            fetch(`/submit-quiz/${quizId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    answers: answersArray,
                    timeTaken: timeTaken
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Clear timer
                    clearInterval(timerInterval);
                    // Navigate to results page
                    window.location.href = `/quiz-result/${data.resultId}`;
                } else {
                    // Reset submission flag and button state
                    isSubmittingQuiz = false;
                    submitBtn.disabled = false;
                    submitBtn.textContent = originalText;
                    alert('Error submitting quiz: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                // Reset submission flag and button state
                isSubmittingQuiz = false;
                submitBtn.disabled = false;
                submitBtn.textContent = originalText;
                alert('Error submitting quiz. Please try again.');
            });
        });

        // Warn before leaving page (only if not submitting quiz)
        window.addEventListener('beforeunload', function(e) {
            if (!isSubmittingQuiz) {
                e.preventDefault();
                e.returnValue = 'Are you sure you want to leave? Your progress will be lost.';
            }
        });
    </script>
    
    <% if (isCompetitive) { %>
    <!-- Competitive Mode Real-time Features -->
    <script>
        let competitiveSocket;
        let sessionId = '<%= sessionId %>';
        let questionStartTime = Date.now();
        
        // Initialize competitive features
        if (typeof io !== 'undefined') {
            competitiveSocket = io();
            
            // Join session room
            competitiveSocket.emit('join-session', sessionId);
            
            // Listen for real-time updates
            competitiveSocket.on('question-answered', function(data) {
                updateLiveLeaderboard();
                showQuestionAlert(data);
            });
            
            competitiveSocket.on('participant-completed', function(data) {
                updateLiveLeaderboard();
                showCompletionAlert(data);
            });
            
            competitiveSocket.on('quiz-finished', function(data) {
                showWinnerAnnouncement(data.winner, data.finalLeaderboard);
            });
            
            // Load initial leaderboard
            updateLiveLeaderboard();
            loadParticipants();
        }
        
        // Override the nextQuestion function for competitive mode
        const originalNextQuestion = window.nextQuestion;
        window.nextQuestion = function() {
            // Track time for this question
            const timeTaken = Math.round((Date.now() - questionStartTime) / 1000);
            
            // Send progress update if answer was selected
            const selectedAnswer = document.querySelector('input[name="answer"]:checked');
            if (selectedAnswer && currentQuestionIndex > 0) {
                const question = quizData.questions[currentQuestionIndex - 1];
                const isCorrect = selectedAnswer.value === question.correctAnswer;
                
                // Send progress to server
                fetch(`/quiz-session/${sessionId}/progress`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        questionIndex: currentQuestionIndex - 1,
                        selectedAnswer: selectedAnswer.value,
                        timeTaken: timeTaken,
                        isCorrect: isCorrect
                    })
                }).catch(console.error);
            }
            
            // Reset timer for next question
            questionStartTime = Date.now();
            
            // Call original function
            originalNextQuestion();
        };
        
        // Override quiz submission for competitive mode
        const originalSubmitQuiz = window.submitQuiz;
        window.submitQuiz = async function() {
            const totalTimeTaken = Math.round((Date.now() - quizStartTime) / 1000);
            
            try {
                // Mark as completed in session
                await fetch(`/quiz-session/${sessionId}/complete`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ totalTimeTaken })
                });
            } catch (error) {
                console.error('Error updating competitive session:', error);
            }
            
            // Call original submit function
            originalSubmitQuiz();
        };
        
        // Update live leaderboard
        async function updateLiveLeaderboard() {
            try {
                const response = await fetch(`/quiz-session/${sessionId}/leaderboard`);
                const data = await response.json();
                
                if (data.success) {
                    const leaderboardDiv = document.getElementById('live-leaderboard');
                    leaderboardDiv.innerHTML = data.leaderboard.map((participant, index) => `
                        <div class="d-flex justify-content-between align-items-center mb-2 p-2 ${index === 0 ? 'bg-warning bg-opacity-25' : 'bg-light'} rounded">
                            <div>
                                <strong>${index + 1}. ${participant.studentName}</strong>
                                <br>
                                <small class="text-muted">Q${participant.currentQuestion} • ${participant.score} correct</small>
                            </div>
                            <div class="text-end">
                                <div class="badge ${participant.status === 'completed' ? 'bg-success' : 'bg-primary'}">${participant.status}</div>
                                <br>
                                <small class="text-muted">${formatTime(participant.timeTaken)}</small>
                            </div>
                        </div>
                    `).join('');
                }
            } catch (error) {
                console.error('Error updating leaderboard:', error);
            }
        }
        
        // Load participants list
        async function loadParticipants() {
            try {
                const response = await fetch(`/quiz-session/${sessionId}/leaderboard`);
                const data = await response.json();
                
                console.log('Participants API response:', data); // Debug log
                
                if (data.success && data.leaderboard) {
                    const participantsCount = data.participants || data.leaderboard.length || 0;
                    const participantsDiv = document.getElementById('participants-list');
                    participantsDiv.innerHTML = `
                        <div class="text-center mb-2">
                            <span class="badge bg-info">${participantsCount} participants</span>
                        </div>
                        ${data.leaderboard.map(p => `
                            <div class="d-flex align-items-center mb-1">
                                <i class="fas fa-user-circle text-primary me-2"></i>
                                <span class="small">${p.studentName}</span>
                            </div>
                        `).join('')}
                    `;
                } else {
                    console.error('Invalid API response:', data);
                    const participantsDiv = document.getElementById('participants-list');
                    participantsDiv.innerHTML = `
                        <div class="text-center text-muted">
                            <i class="fas fa-exclamation-triangle"></i> Unable to load participants
                        </div>
                    `;
                }
            } catch (error) {
                console.error('Error loading participants:', error);
                const participantsDiv = document.getElementById('participants-list');
                participantsDiv.innerHTML = `
                    <div class="text-center text-muted">
                        <i class="fas fa-wifi"></i> Connection error
                    </div>
                `;
            }
        }
        
        // Show question answered alert
        function showQuestionAlert(data) {
            if (data.isCorrect) {
                const toast = document.createElement('div');
                toast.className = 'alert alert-success position-fixed';
                toast.style.cssText = 'top: 20px; left: 50%; transform: translateX(-50%); z-index: 9999; min-width: 300px;';
                toast.innerHTML = `<i class="fas fa-check-circle"></i> ${data.studentName} got question ${data.questionIndex + 1} right in ${data.timeTaken}s!`;
                document.body.appendChild(toast);
                setTimeout(() => toast.remove(), 3000);
            }
        }
        
        // Show completion alert
        function showCompletionAlert(data) {
            const toast = document.createElement('div');
            toast.className = 'alert alert-info position-fixed';
            toast.style.cssText = 'top: 60px; left: 50%; transform: translateX(-50%); z-index: 9999; min-width: 300px;';
            toast.innerHTML = `<i class="fas fa-flag-checkered"></i> ${data.studentName} finished! (${data.completedCount}/${data.totalParticipants} done)`;
            document.body.appendChild(toast);
            setTimeout(() => toast.remove(), 4000);
        }
        
        // Show winner announcement
        function showWinnerAnnouncement(winner, leaderboard) {
            const winnerDiv = document.getElementById('winner-announcement');
            const winnerText = document.getElementById('winner-text');
            
            winnerText.innerHTML = `
                🏆 <strong>${winner.studentName}</strong> wins!<br>
                Score: ${winner.score}/${leaderboard.length} in ${formatTime(winner.timeTaken)}
            `;
            
            winnerDiv.style.display = 'block';
            
            // Show confetti or celebration effect
            confetti && confetti({
                particleCount: 100,
                spread: 70,
                origin: { y: 0.6 }
            });
        }
        
        // Format time helper
        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = seconds % 60;
            return `${mins}:${secs.toString().padStart(2, '0')}`;
        }
        
        // Update leaderboard every 5 seconds
        setInterval(updateLiveLeaderboard, 5000);
        
        // Track question start time
        questionStartTime = Date.now();
    </script>
    <% } %>
    
    <!-- Session timeout management -->
    <script src="/js/session-timeout.js"></script>
</body>
</html> 