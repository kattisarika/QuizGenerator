<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Take Quiz - <%= quiz.title %></title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    
    <!-- MathJax for Math Equation Support -->
    <script>
    window.MathJax = {
        tex: {
            inlineMath: [['$', '$'], ['\\(', '\\)']],
            displayMath: [['$$', '$$'], ['\\[', '\\]']],
            processEscapes: true,
            processEnvironments: true
        },
        options: {
            skipHtmlTags: ['script', 'noscript', 'style', 'textarea', 'pre']
        }
    };
    </script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <style>
        /* Text Answer Styles */
        .text-answer-section {
            margin-top: 20px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 10px;
            border: 2px solid #e9ecef;
        }
        
        .text-answer-label {
            display: block;
            font-weight: 600;
            color: #495057;
            margin-bottom: 10px;
            font-size: 16px;
        }
        
        .text-answer-input {
            width: 100%;
            padding: 12px;
            border: 2px solid #dee2e6;
            border-radius: 8px;
            font-size: 14px;
            line-height: 1.5;
            resize: vertical;
            min-height: 80px;
            transition: border-color 0.3s ease;
        }
        
        .text-answer-input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }
        
        .no-options-message {
            margin-top: 20px;
            padding: 20px;
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            border-radius: 8px;
            text-align: center;
        }
        
        .no-options-message p {
            margin: 0;
            color: #856404;
        }
        
        .no-options-message i {
            color: #f39c12;
        }
        
        /* Question Indicator Styles */
        .question-indicator {
            display: inline-block;
            width: 40px;
            height: 40px;
            line-height: 40px;
            text-align: center;
            border-radius: 50%;
            background-color: #e9ecef;
            color: #495057;
            margin: 0 5px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
        }
        
        .question-indicator:hover {
            background-color: #dee2e6;
            transform: scale(1.1);
        }
        
        .question-indicator.answered {
            background-color: #28a745;
            color: white;
        }
        
        .question-indicator.active {
            background-color: #007bff;
            color: white;
            transform: scale(1.1);
        }
        
        .question-indicator.unanswered-highlight {
            background-color: #dc3545;
            color: white;
            animation: pulse 0.5s ease-in-out;
            box-shadow: 0 0 10px rgba(220, 53, 69, 0.5);
        }
        
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.2); }
            100% { transform: scale(1); }
        }

        /* Math Toolbar Styles */
        .math-toolbar {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            padding: 15px;
            margin-bottom: 15px;
        }

        .math-toolbar .btn-group {
            margin-bottom: 8px;
        }

        .math-toolbar .btn {
            font-size: 12px;
            padding: 6px 10px;
            border-radius: 6px;
            transition: all 0.2s ease;
        }

        .math-toolbar .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .math-toolbar .btn:active {
            transform: translateY(0);
        }

        .math-help {
            font-size: 12px;
            color: #6c757d;
            margin-top: 5px;
        }

        /* Rich Text Editor Styles */
        .rich-text-toolbar {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 8px 8px 0 0;
            padding: 10px;
            border-bottom: none;
        }

        .rich-text-toolbar .btn {
            margin-right: 5px;
            border-radius: 4px;
        }

        .rich-text-content {
            border: 1px solid #dee2e6;
            border-radius: 0 0 8px 8px;
            min-height: 120px;
            max-height: 300px;
            overflow-y: auto;
            line-height: 1.6;
        }

        .rich-text-content:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
        }

        .rich-text-content ul, .rich-text-content ol {
            margin-left: 20px;
        }

        .rich-text-content p {
            margin-bottom: 8px;
        }

        /* Math Preview Styles */
        .math-preview {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border: 2px solid #dee2e6;
            border-radius: 10px;
            padding: 20px;
            margin-top: 15px;
            min-height: 80px;
            box-shadow: inset 0 2px 4px rgba(0,0,0,0.05);
        }

        .math-preview strong {
            color: #495057;
            font-weight: 600;
            margin-bottom: 10px;
            display: block;
        }

        /* Editor Toggle Buttons */
        .btn-group .btn.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-color: #667eea;
            color: white;
            box-shadow: 0 2px 8px rgba(102, 126, 234, 0.3);
        }

        .btn-group .btn:not(.active):hover {
            background: #e9ecef;
            border-color: #667eea;
            color: #667eea;
        }

        /* Question Image Styles */
        .question-image-container {
            margin-top: 15px;
            text-align: center;
        }

        .question-image {
            max-width: 100%;
            max-height: 300px;
            border-radius: 8px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }

        .question-image:hover {
            transform: scale(1.02);
        }
    </style>
</head>
<body>
    <nav class="navbar">
        <div class="nav-container">
            <div class="nav-logo">
                <a href="/">SkillOns</a>
            </div>
            <div class="nav-menu">
                <a href="/student/dashboard" class="nav-link">Dashboard</a>
                <a href="/available-quizzes" class="nav-link">Browse Quizzes</a>
                <a href="/student/study-material" class="nav-link">View Study Material</a>
                <a href="/my-results" class="nav-link">My Results</a>
                <a href="/logout" class="nav-link logout-btn">Logout</a>
            </div>
        </div>
    </nav>

    <main class="main-content">
        <div class="quiz-taking-container">
            <div class="quiz-header">
                <div class="quiz-info">
                    <h1><%= quiz.title %></h1>
                    <p><%= quiz.description %></p>
                    
                    <!-- Re-extract PDF Images Button (Only for Teachers/Admins) -->
                    <% if (quiz.pdfImages && quiz.pdfImages.length === 0 && quiz.questionPaperUrl && user && (user.role === 'teacher' || user.role === 'admin')) { %>
                        <div class="reextract-section" style="margin-top: 15px; padding: 15px; background: #fff3cd; border: 1px solid #ffeaa7; border-radius: 8px;">
                            <div style="display: flex; align-items: center; justify-content: space-between;">
                                <div>
                                    <i class="fas fa-exclamation-triangle" style="color: #f39c12; margin-right: 8px;"></i>
                                    <strong style="color: #856404;">PDF Images Missing</strong>
                                    <p style="margin: 5px 0 0 0; color: #856404; font-size: 14px;">
                                        This quiz has no PDF images. Click the button to re-extract them from the original question paper.
                                    </p>
                                </div>
                                <button id="reextract-pdf-btn" class="btn btn-warning" style="white-space: nowrap;">
                                    <i class="fas fa-sync-alt"></i> Re-extract PDF Images
                                </button>
                            </div>
                        </div>
                    <% } %>
                    
                    <!-- Student Notice for Missing PDF Images -->
                    <% if (quiz.pdfImages && quiz.pdfImages.length === 0 && quiz.questionPaperUrl && user && user.role === 'student') { %>
                        <div class="reextract-section" style="margin-top: 15px; padding: 15px; background: #e3f2fd; border: 1px solid #2196f3; border-radius: 8px;">
                            <div style="display: flex; align-items: center;">
                                <div>
                                    <i class="fas fa-info-circle" style="color: #2196f3; margin-right: 8px;"></i>
                                    <strong style="color: #1976d2;">PDF Images Missing</strong>
                                    <p style="margin: 5px 0 0 0; color: #1976d2; font-size: 14px;">
                                        This quiz is missing PDF images. Please contact your teacher to fix this issue.
                                    </p>
                                </div>
                            </div>
                        </div>
                    <% } %>
                </div>
                
                <div class="quiz-timer">
                    <div class="timer-display">
                        <i class="fas fa-clock"></i>
                        <span id="timer">00:00</span>
                    </div>
                </div>
            </div>

            <div class="progress-info">
                <span id="current-question">Question 1 of <%= quiz.questions.length %></span>
            </div>

            <div class="quiz-progress">
                <div class="progress-bar">
                    <div class="progress-fill" id="progress-fill"></div>
                </div>
            </div>

            <div class="quiz-content">
                <form id="quiz-form">
                    <div id="questions-container">
                        <% quiz.questions.forEach((question, index) => { %>
                            <div class="question-container" id="question-<%= index %>" style="display: <%= index === 0 ? 'block' : 'none' %>;">
                                <div class="question-header">
                                    <h3>Question <%= index + 1 %></h3>
                                    <span class="question-points"><%= question.points %> point<%= question.points !== 1 ? 's' : '' %></span>
                                </div>
                                
                                <div class="question-text">
                                    <%= question.question %>
                                    
                                    <% if (question.image) { %>
                                        <div class="question-image-container" data-s3-key="<%= question.image %>" data-question-index="<%= index %>">
                                            <div class="question-image-loading" style="text-align: center; padding: 20px;">
                                                <i class="fas fa-spinner fa-spin"></i> Loading question image...
                                            </div>
                                            <img class="question-image" style="max-width: 100%; max-height: 300px; margin-top: 15px; border-radius: 8px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); display: none; cursor: pointer;" alt="Question Image">
                                        </div>
                                    <% } %>
                                    
                                    <!-- Document Images Display -->
                                    
                                    <% if (quiz.pdfImages && quiz.pdfImages.length > 0) { %>
                                        <div class="pdf-images-container">
                                            <h4 class="pdf-images-title">
                                                <i class="fas fa-images"></i> Document Images
                                                <span class="document-source">
                                                    <% if (quiz.pdfImages[0].source === 'document-extraction') { %>
                                                        <i class="fas fa-image" title="Extracted Images"></i>
                                                    <% } else if (quiz.pdfImages[0].source === 'docx') { %>
                                                        <i class="fas fa-file-word" title="DOCX Document"></i>
                                                    <% } else { %>
                                                        <i class="fas fa-file-pdf" title="PDF Document"></i>
                                                    <% } %>
                                                </span>
                                            </h4>
                                            <div class="pdf-images-grid">
                                                <% quiz.pdfImages.forEach((pdfImage, imgIndex) => { %>
                                                    <div class="pdf-image-item">
                                                        <div class="pdf-image-header">
                                                            <% if (pdfImage.source === 'document-extraction') { %>
                                                                <span class="pdf-image-label">
                                                                    <i class="fas fa-image"></i> Extracted Image <%= imgIndex + 1 %>
                                                                </span>
                                                                <span class="pdf-image-subtitle"><%= pdfImage.originalName || 'Extracted Image' %></span>
                                                            <% } else if (pdfImage.source === 'docx') { %>
                                                                <span class="pdf-image-label">
                                                                    <i class="fas fa-file-word"></i> Image <%= pdfImage.imageIndex %>
                                                                </span>
                                                            <% } else { %>
                                                                <span class="pdf-image-label">Page <%= pdfImage.page %></span>
                                                                <% if (pdfImage.imageIndex > 1) { %>
                                                                    <span class="pdf-image-subtitle">Image <%= pdfImage.imageIndex %></span>
                                                                <% } %>
                                                            <% } %>
                                                        </div>
                                                        <% if (pdfImage.originalName && pdfImage.originalName.toLowerCase().endsWith('.pdf')) { %>
                                                            <!-- PDF Document Display -->
                                                            <div class="pdf-document-display" style="border: 2px dashed #dee2e6; padding: 20px; text-align: center; background: #f8f9fa; border-radius: 8px;">
                                                                <i class="fas fa-file-pdf" style="font-size: 48px; color: #dc3545; margin-bottom: 15px;"></i>
                                                                <h5 style="margin: 0 0 10px 0; color: #495057;"><%= pdfImage.originalName %></h5>
                                                                <p style="margin: 0 0 15px 0; color: #6c757d;">
                                                                    <% if (pdfImage.isFullDocument && pdfImage.totalPages) { %>
                                                                        Full Document • <%= pdfImage.totalPages %> page<%= pdfImage.totalPages !== 1 ? 's' : '' %>
                                                                    <% } else if (pdfImage.isIndividualPage && pdfImage.totalPages) { %>
                                                                        Page <%= pdfImage.pageNumber %> of <%= pdfImage.totalPages %>
                                                                    <% } else { %>
                                                                        PDF Page <%= pdfImage.page %>
                                                                    <% } %>
                                                                </p>
                                                                <button class="btn btn-primary btn-sm" onclick="openPdfViewer('https://skillon-test.s3.amazonaws.com/<%= pdfImage.s3Key %>', '<%= pdfImage.originalName %>')">
                                                                    <i class="fas fa-eye"></i> View PDF
                                                                </button>
                                                                <button class="btn btn-outline-secondary btn-sm ml-2" onclick="downloadPdf('https://skillon-test.s3.amazonaws.com/<%= pdfImage.s3Key %>', '<%= pdfImage.originalName %>')">
                                                                    <i class="fas fa-download"></i> Download
                                                                </button>
                                                            </div>
                                                        <% } else { %>
                                                            <!-- Regular Image Display -->
                                                            <img src="https://skillon-test.s3.amazonaws.com/<%= pdfImage.s3Key %>" 
                                                                 alt="Document Image" 
                                                                 class="pdf-image" 
                                                                 style="max-width: 100%; max-height: 400px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); cursor: pointer;"
                                                                 onclick="openImageModal('https://skillon-test.s3.amazonaws.com/<%= pdfImage.s3Key %>', 'Document Image')">
                                                        <% } %>
                                                        <div class="image-info">
                                                            <small class="text-muted">
                                                                <% if (pdfImage.source === 'document-extraction') { %>
                                                                    Extracted Image • <%= pdfImage.originalName || 'Document Image' %>
                                                                <% } else if (pdfImage.source === 'docx') { %>
                                                                    DOCX Document • Image <%= pdfImage.imageIndex %>
                                                                <% } else { %>
                                                                    PDF Document • Page <%= pdfImage.page %>
                                                                <% } %>
                                                            </small>
                                                        </div>
                                                    </div>
                                                <% }); %>
                                            </div>
                                        </div>
                                    <% } %>

                                    <!-- Question Images Display -->
                                    <div id="questionImagesContainer" class="question-images-container" style="display: none;">
                                        <h4 class="question-images-title">
                                            <i class="fas fa-image"></i> Question Images
                                        </h4>
                                        <div id="questionImagesGrid" class="question-images-grid">
                                            <!-- Question images will be loaded dynamically -->
                                        </div>
                                        <div class="question-images-loading" style="text-align: center; padding: 20px;">
                                            <i class="fas fa-spinner fa-spin"></i> Loading question images...
                                        </div>
                                    </div>
                                </div>
                                
                                <% if (question.type === 'multiple-choice' && question.options && question.options.length > 0) { %>
                                    <!-- Multiple Choice Options -->
                                    <div class="options-list">
                                        <% question.options.forEach((option, optionIndex) => { %>
                                            <div class="option-item" data-question="<%= index %>" data-option="<%= optionIndex %>">
                                                <input type="radio" 
                                                       id="q<%= index %>-opt<%= optionIndex %>" 
                                                       name="question-<%= index %>" 
                                                       value="<%= option %>"
                                                       data-question="<%= index %>"
                                                       data-option="<%= optionIndex %>">
                                                <label for="q<%= index %>-opt<%= optionIndex %>" class="option-label">
                                                    <%= String.fromCharCode(65 + optionIndex) %>)
                                                </label>
                                                <span class="option-text"><%= option %></span>
                                            </div>
                                        <% }); %>
                                    </div>
                                <% } else if (question.type === 'short-answer' || question.isTextAnswer) { %>
                                    <!-- Text Answer Input with Rich Text Editor and Math Support -->
                                    <div class="text-answer-section">
                                        <label for="text-answer-<%= index %>" class="text-answer-label">
                                            <i class="fas fa-keyboard me-2"></i>Your Answer:
                                        </label>
                                        
                                        <!-- Rich Text Editor Toggle -->
                                        <div class="mb-2">
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button type="button" class="btn btn-outline-primary active" id="plainTextBtn-<%= index %>" onclick="toggleStudentEditor('<%= index %>', 'plain')">
                                                    <i class="fas fa-font"></i> Plain Text
                                                </button>
                                                <button type="button" class="btn btn-outline-primary" id="richTextBtn-<%= index %>" onclick="toggleStudentEditor('<%= index %>', 'rich')">
                                                    <i class="fas fa-edit"></i> Rich Text
                                                </button>
                                            </div>
                                        </div>

                                        <!-- Math Toolbar -->
                                        <div class="math-toolbar">
                                            <div class="btn-group btn-group-sm" role="group">
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\frac{a}{b}')" title="Fraction">
                                                    <i class="fas fa-divide"></i> Fraction
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\sqrt{x}')" title="Square Root">
                                                    √ Root
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', 'x^{2}')" title="Exponent">
                                                    x² Power
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', 'x_{n}')" title="Subscript">
                                                    x₁ Subscript
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\sum_{i=1}^{n}')" title="Sum">
                                                    Σ Sum
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\int_{a}^{b}')" title="Integral">
                                                    ∫ Integral
                                                </button>
                                            </div>
                                            <div class="btn-group btn-group-sm mt-2" role="group">
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\alpha')" title="Alpha">
                                                    α Alpha
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\beta')" title="Beta">
                                                    β Beta
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\theta')" title="Theta">
                                                    θ Theta
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\pi')" title="Pi">
                                                    π Pi
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\pm')" title="Plus-Minus">
                                                    ± Plus-Minus
                                                </button>
                                                <button type="button" class="btn btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\neq')" title="Not Equal">
                                                    ≠ Not Equal
                                                </button>
                                            </div>
                                            <div class="math-help">
                                                <i class="fas fa-info-circle"></i> Use $ for inline math: $x^2$ or $$ for display math: $$\frac{a}{b}$$
                                                <br>
                                                <small class="text-muted">Click any button above to insert common math symbols, or type LaTeX directly.</small>
                                            </div>
                                        </div>
                                        
                                        <!-- Plain Text Input -->
                                        <textarea 
                                            id="text-answer-<%= index %>" 
                                            class="text-answer-input" 
                                            placeholder="Type your answer here. Use $ for math: $x^2 + y^2 = z^2$"
                                            rows="4"
                                            oninput="updateTextAnswer('<%= index %>', this.value)"
                                            data-question="<%= index %>">
                                        </textarea>
                                        
                                        <!-- Rich Text Editor (Hidden by default) -->
                                        <div id="richTextEditor-<%= index %>" style="display: none;">
                                            <div class="rich-text-toolbar mb-2">
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="execStudentCommand('<%= index %>', 'bold')" title="Bold">
                                                    <i class="fas fa-bold"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="execStudentCommand('<%= index %>', 'italic')" title="Italic">
                                                    <i class="fas fa-italic"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="execStudentCommand('<%= index %>', 'underline')" title="Underline">
                                                    <i class="fas fa-underline"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="execStudentCommand('<%= index %>', 'insertUnorderedList')" title="Bullet List">
                                                    <i class="fas fa-list-ul"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="execStudentCommand('<%= index %>', 'insertOrderedList')" title="Numbered List">
                                                    <i class="fas fa-list-ol"></i>
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary" onclick="insertMathInStudentEditor('<%= index %>', '\\frac{a}{b}')" title="Math">
                                                    <i class="fas fa-square-root-alt"></i>
                                                </button>
                                            </div>
                                            <div class="rich-text-content" id="richTextContent-<%= index %>" contenteditable="true" style="border: 1px solid #dee2e6; border-radius: 0.375rem; padding: 0.75rem; min-height: 120px; background: white;" oninput="updateStudentRichTextAnswer('<%= index %>')"></div>
                                        </div>
                                        
                                        <!-- Live Preview -->
                                        <div id="answerPreview-<%= index %>" class="math-preview" style="display: none;">
                                            <strong>Preview:</strong>
                                            <div id="answerPreviewContent-<%= index %>">Your answer preview will appear here...</div>
                                        </div>
                                        
                                        <small class="text-muted">
                                            <i class="fas fa-info-circle me-1"></i>
                                            This is a text answer question. You can use rich text formatting and math equations.
                                        </small>
                                    </div>
                                <% } else if (question.options && question.options.length > 0) { %>
                                    <!-- Fallback to multiple choice if type is not specified but options exist -->
                                    <div class="options-list">
                                        <% question.options.forEach((option, optionIndex) => { %>
                                            <div class="option-item" data-question="<%= index %>" data-option="<%= optionIndex %>">
                                                <input type="radio" 
                                                       id="q<%= index %>-opt<%= optionIndex %>" 
                                                       name="question-<%= index %>" 
                                                       value="<%= option %>"
                                                       data-question="<%= index %>"
                                                       data-option="<%= optionIndex %>">
                                                <label for="q<%= index %>-opt<%= optionIndex %>" class="option-label">
                                                    <%= String.fromCharCode(65 + optionIndex) %>)
                                                </label>
                                                <span class="option-text"><%= option %></span>
                                            </div>
                                        <% }); %>
                                    </div>
                                <% } else { %>
                                    <!-- No options available - show message -->
                                    <div class="no-options-message">
                                        <p class="text-muted">
                                            <i class="fas fa-exclamation-triangle me-2"></i>
                                            No answer options available for this question.
                                        </p>
                                    </div>
                                <% } %>
                            </div>
                        <% }); %>
                    </div>

                    <div class="quiz-navigation">
                        <div class="nav-buttons">
                            <button type="button" id="prev-btn" class="btn btn-secondary" disabled>
                                <i class="fas fa-chevron-left"></i> Previous
                            </button>
                            
                            <button type="button" id="next-btn" class="btn btn-primary">
                                Next <i class="fas fa-chevron-right"></i>
                            </button>
                            
                            <button type="submit" id="submit-btn" class="btn btn-success" style="display: none;">
                                <i class="fas fa-check"></i> Submit Quiz
                            </button>
                        </div>
                        
                        <div class="question-indicators">
                            <% quiz.questions.forEach((question, index) => { %>
                                <div class="question-indicator <%= index === 0 ? 'active' : '' %>" 
                                     id="indicator-<%= index %>">
                                    <%= index + 1 %>
                                </div>
                            <% }); %>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <footer class="footer">
        <div class="footer-content">
            <p>&copy; 2025 SkillOns. All rights reserved.</p>
        </div>
    </footer>

    <script>
        console.log('🚀 Script starting to execute...');
        
        // Global quiz data variables
        let currentQuestion = 0;
        let answers = {};
        let startTime = Date.now();
        let timerInterval;
        const totalQuestions = <%= quiz.questions.length %>;
        const quizId = '<%= quiz._id %>';
        
        // Initialize quiz
        document.addEventListener('DOMContentLoaded', function() {
            startTimer();
            updateProgress();
            initializeAnsweredQuestions();
            
            // Add event listeners for navigation buttons
            document.getElementById('next-btn').addEventListener('click', nextQuestion);
            document.getElementById('prev-btn').addEventListener('click', previousQuestion);
            
            // Add event listeners for question indicators
            document.querySelectorAll('.question-indicator').forEach((indicator, index) => {
                indicator.addEventListener('click', () => goToQuestion(index));
            });
            
            // Add event listeners for option items (click anywhere on the option area)
            document.querySelectorAll('.option-item').forEach((optionItem) => {
                optionItem.addEventListener('click', function() {
                    const questionIndex = this.dataset.question;
                    const optionIndex = this.dataset.option;
                    selectOption(questionIndex, optionIndex);
                });
            });
            
            // Check if this is a single-question quiz and update navigation accordingly
            if (totalQuestions === 1) {
                document.getElementById('next-btn').style.display = 'none';
                document.getElementById('submit-btn').style.display = 'inline-block';
            }
        });

        // Initialize visual feedback for already answered questions
        function initializeAnsweredQuestions() {
            document.querySelectorAll('input[type="radio"]:checked').forEach(radio => {
                const questionIndex = parseInt(radio.dataset.question);
                const optionIndex = parseInt(radio.dataset.option);
                
                // Mark the option as selected
                const questionContainer = document.getElementById(`question-${questionIndex}`);
                if (questionContainer) {
                    const selectedOption = questionContainer.querySelector(`.option-item[data-option="${optionIndex}"]`);
                    if (selectedOption) {
                        selectedOption.classList.add('option-selected');
                    }
                }
                
                // Mark the indicator as answered
                const indicator = document.getElementById(`indicator-${questionIndex}`);
                if (indicator) {
                    indicator.classList.add('answered');
                }
                
                // Store in answers object with correct format
                answers[questionIndex] = {
                    selectedAnswer: radio.value
                };
            });
        }

        // Function to select an option when clicking anywhere on the option area
        function selectOption(questionIndex, optionIndex) {
            console.log('🎯 selectOption called with:', questionIndex, optionIndex);
            // Convert string indices to integers
            questionIndex = parseInt(questionIndex);
            optionIndex = parseInt(optionIndex);
            
            const radioButton = document.getElementById(`q${questionIndex}-opt${optionIndex}`);
            if (radioButton) {
                radioButton.checked = true;
                
                // Update visual feedback for all options in this question
                const questionContainer = document.getElementById(`question-${questionIndex}`);
                const allOptions = questionContainer.querySelectorAll('.option-item');
                
                // Remove selected class from all options
                allOptions.forEach(opt => opt.classList.remove('option-selected'));
                
                // Add selected class to the clicked option
                const selectedOption = questionContainer.querySelector(`.option-item[data-option="${optionIndex}"]`);
                if (selectedOption) {
                    selectedOption.classList.add('option-selected');
                }
                
                // Update the question indicator to show it's been answered
                const indicator = document.getElementById(`indicator-${questionIndex}`);
                if (indicator) {
                    indicator.classList.add('answered');
                }
                
                // Store the answer as an object with selectedAnswer property
                answers[questionIndex] = {
                    selectedAnswer: radioButton.value
                };
                
                // Debug log
                console.log(`Selected option for question ${questionIndex}:`, radioButton.value);
                console.log('Current answers object:', answers);
            }
        }
        
        // Also make it available on window for competitive mode
        window.selectOption = selectOption;

        // Function to handle text answer updates
        function updateTextAnswer(questionIndex, value) {
            questionIndex = parseInt(questionIndex);
            
            // Store the text answer (trimmed to remove extra whitespace)
            answers[questionIndex] = {
                selectedAnswer: value.trim()
            };
            
            // Update the question indicator to show it's been answered
            const indicator = document.getElementById(`indicator-${questionIndex}`);
            if (indicator && value.trim()) {
                indicator.classList.add('answered');
            } else if (indicator) {
                indicator.classList.remove('answered');
            }
            
            // Debug log
            console.log(`Text answer for question ${questionIndex}:`, value);
            console.log('Current answers object:', answers);
        }

        // Timer functions
        function startTimer() {
            timerInterval = setInterval(updateTimer, 1000);
        }

        function updateTimer() {
            const elapsed = Math.floor((Date.now() - startTime) / 1000);
            const minutes = Math.floor(elapsed / 60);
            const seconds = elapsed % 60;
            document.getElementById('timer').textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
        }

        function updateProgress() {
            const progress = ((currentQuestion + 1) / totalQuestions) * 100;
            const progressFill = document.getElementById('progress-fill');
            const currentQuestionSpan = document.getElementById('current-question');
            
            if (progressFill) {
                progressFill.style.width = progress + '%';
            }
            
            if (currentQuestionSpan) {
                currentQuestionSpan.textContent = `Question ${currentQuestion + 1} of ${totalQuestions}`;
            }
        }

        function showQuestion(index) {
            // Hide all questions
            document.querySelectorAll('.question-container').forEach(q => q.style.display = 'none');
            
            // Show the selected question
            document.getElementById(`question-${index}`).style.display = 'block';
            
            // Update active indicator
            document.querySelectorAll('.question-indicator').forEach(ind => ind.classList.remove('active'));
            document.getElementById(`indicator-${index}`).classList.add('active');
            
            // Update navigation buttons
            document.getElementById('prev-btn').disabled = index === 0;
            
            // Handle single-question quiz or last question
            if (totalQuestions === 1 || index === totalQuestions - 1) {
                document.getElementById('next-btn').style.display = 'none';
                document.getElementById('submit-btn').style.display = 'inline-block';
            } else {
                document.getElementById('next-btn').style.display = 'inline-block';
                document.getElementById('submit-btn').style.display = 'none';
            }
            
            updateProgress();
        }

        function nextQuestion() {
            console.log('⏭️ nextQuestion called');
            if (currentQuestion < totalQuestions - 1) {
                currentQuestion++;
                showQuestion(currentQuestion);
            }
        }
        
        // Also make it available on window for competitive mode
        window.nextQuestion = nextQuestion;
        
        console.log('✅ Functions defined:', {
            selectOption: typeof window.selectOption,
            nextQuestion: typeof window.nextQuestion
        });

        function previousQuestion() {
            if (currentQuestion > 0) {
                currentQuestion--;
                showQuestion(currentQuestion);
            }
        }
        
        // Also make it available on window for competitive mode
        window.previousQuestion = previousQuestion;

        function goToQuestion(index) {
            currentQuestion = index;
            showQuestion(currentQuestion);
        }
        
        // Also make it available on window for competitive mode
        window.goToQuestion = goToQuestion;

        // Track answers
        document.addEventListener('change', function(e) {
            if (e.target.type === 'radio') {
                const questionIndex = parseInt(e.target.dataset.question);
                const optionIndex = parseInt(e.target.dataset.option);
                const selectedAnswer = e.target.value;
                
                answers[questionIndex] = {
                    selectedAnswer: selectedAnswer,
                    optionIndex: optionIndex
                };
                
                // Mark indicator as answered
                document.getElementById(`indicator-${questionIndex}`).classList.add('answered');
            }
        });

        // Handle form submission
        document.getElementById('quiz-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Validate that all questions are answered
            if (!validateAllQuestionsAnswered()) {
                return; // Stop submission if validation fails
            }
            
            const timeTaken = Math.floor((Date.now() - startTime) / 1000);
            
            // Collect all answers
            const answersArray = [];
            for (let i = 0; i < totalQuestions; i++) {
                if (answers[i]) {
                    answersArray.push({
                        questionIndex: i,
                        selectedAnswer: answers[i].selectedAnswer
                    });
                } else {
                    answersArray.push({
                        questionIndex: i,
                        selectedAnswer: ''
                    });
                }
            }
            
            // Debug: Log what we're sending
            console.log('Sending answers to backend:', answersArray);
            console.log('Raw answers object:', answers);
            
            // Submit quiz
            fetch(`/submit-quiz/${quizId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    answers: answersArray,
                    timeTaken: timeTaken
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Show completion message with results
                    showCompletionMessage(data);
                } else {
                    alert('Error submitting quiz: ' + data.message);
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error submitting quiz. Please try again.');
            });
        });

        // Validation function
        function validateAllQuestionsAnswered() {
            for (let i = 0; i < totalQuestions; i++) {
                if (!answers[i] || !answers[i].selectedAnswer) {
                    alert(`Please answer question ${i + 1} before submitting.`);
                    goToQuestion(i);
                    return false;
                }
            }
            return true;
        }

        // Show completion message
        function showCompletionMessage(data) {
            const message = `
                <div style="text-align: center; padding: 40px;">
                    <h2 style="color: #28a745;">🎉 Quiz Completed!</h2>
                    <p style="font-size: 18px; margin: 20px 0;">
                        You have successfully completed the quiz!
                    </p>
                    <p style="font-size: 16px; color: #6c757d;">
                        Time taken: ${Math.floor(data.timeTaken / 60)}m ${data.timeTaken % 60}s
                    </p>
                    <div style="margin: 30px 0;">
                        <a href="/quiz-result/${quizId}" class="btn btn-primary btn-lg">
                            <i class="fas fa-chart-bar"></i> View Results
                        </a>
                    </div>
                </div>
            `;
            
            document.querySelector('.quiz-taking-container').innerHTML = message;
        }

        // Prevent accidental navigation away from quiz
        let isSubmittingQuiz = false;
        window.addEventListener('beforeunload', function(e) {
            if (!isSubmittingQuiz) {
                e.preventDefault();
                e.returnValue = 'You have unsaved changes. Are you sure you want to leave?';
                return 'You have unsaved changes. Are you sure you want to leave?';
            }
        });

        // Simple image loading functionality
        function loadQuestionImages() {
            const questionImageContainers = document.querySelectorAll('.question-image-container[data-s3-key]');
            
            if (questionImageContainers.length === 0) {
                console.log('No question images found');
                return;
            }

            console.log(`🔗 Loading ${questionImageContainers.length} question images`);

            questionImageContainers.forEach((container) => {
                const s3Key = container.dataset.s3Key;
                const questionIndex = container.dataset.questionIndex;
                const loadingDiv = container.querySelector('.question-image-loading');
                const img = container.querySelector('.question-image');

                if (!s3Key || !loadingDiv || !img) {
                    console.log(`Missing required elements for question ${questionIndex}`);
                    return;
                }

                // Use direct S3 URL
                const s3Url = `https://skillon-test.s3.amazonaws.com/${s3Key}`;
                console.log(`🔗 Loading image for question ${questionIndex}: ${s3Url}`);

                // Load the image
                img.onload = function() {
                    loadingDiv.style.display = 'none';
                    img.style.display = 'block';
                    console.log(`✅ Image loaded for question ${questionIndex}`);
                };

                img.onerror = function() {
                    loadingDiv.innerHTML = `
                        <div style="text-align: center; padding: 20px; color: #dc3545;">
                            <i class="fas fa-exclamation-triangle"></i> Failed to load image
                        </div>
                    `;
                    console.error(`❌ Failed to load image for question ${questionIndex}`);
                };

                img.src = s3Url;
            });
        }

        // PDF document images loading functionality
        function loadPdfImages() {
            const pdfImages = document.querySelectorAll('.pdf-image');
            const pdfImagesContainer = document.querySelector('.pdf-images-container');
            
            if (!pdfImagesContainer) {
                console.log('📋 No PDF images container found - quiz may not have PDF images');
                return;
            }
            
            if (pdfImages.length === 0) {
                console.log('📋 No PDF image elements found in container');
                return;
            }

            console.log(`🔗 Loading ${pdfImages.length} PDF document images`);

            pdfImages.forEach((img, index) => {
                // Get the current src attribute
                const currentSrc = img.getAttribute('src');
                
                if (!currentSrc || currentSrc === 'undefined' || currentSrc.includes('undefined')) {
                    console.log(`❌ PDF image ${index} has invalid src: "${currentSrc}"`);
                    return;
                }

                console.log(`🔗 Loading PDF image ${index + 1}: ${currentSrc}`);

                // Add loading state
                img.style.opacity = '0.5';
                img.style.filter = 'grayscale(100%)';

                // Load the image
                img.onload = function() {
                    img.style.opacity = '1';
                    img.style.filter = 'none';
                    console.log(`✅ PDF image ${index + 1} loaded successfully`);
                };

                img.onerror = function() {
                    img.style.opacity = '0.3';
                    img.style.filter = 'grayscale(100%)';
                    
                    // Add error overlay
                    const errorOverlay = document.createElement('div');
                    errorOverlay.style.cssText = `
                        position: absolute;
                        top: 0;
                        left: 0;
                        right: 0;
                        bottom: 0;
                        background: rgba(220, 53, 69, 0.8);
                        color: white;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        text-align: center;
                        border-radius: 8px;
                        font-size: 12px;
                        padding: 10px;
                    `;
                    errorOverlay.innerHTML = '<i class="fas fa-exclamation-triangle"></i><br>Image failed to load';
                    
                    // Make the image container relative positioned
                    const container = img.closest('.pdf-image-item');
                    if (container) {
                        container.style.position = 'relative';
                        container.appendChild(errorOverlay);
                    }
                    
                    console.error(`❌ PDF image ${index + 1} failed to load: ${currentSrc}`);
                };

                // Force reload the image
                img.src = currentSrc;
            });
        }

        // Load images when page loads
        document.addEventListener('DOMContentLoaded', function() {
            console.log('🔄 DOM Content Loaded - Starting image loading...');
            
            // Debug: Check what images exist
            const questionImageContainers = document.querySelectorAll('.question-image-container');
            const pdfImages = document.querySelectorAll('.pdf-image');
            const pdfDocuments = document.querySelectorAll('.pdf-document-display');
            const pdfImagesContainer = document.querySelector('.pdf-images-container');
            
            console.log('🔍 Image Debug Info:');
            console.log('  - Question image containers found:', questionImageContainers.length);
            console.log('  - PDF images found:', pdfImages.length);
            console.log('  - PDF documents found:', pdfDocuments.length);
            console.log('  - PDF images container exists:', !!pdfImagesContainer);
            
            // Debug: Check quiz data from EJS
            console.log('🔍 Quiz Data Debug:');
            console.log('  - Quiz ID:', '<%= quiz._id %>');
            console.log('  - Quiz title:', '<%= quiz.title %>');
            console.log('  - PDF Images property:', '<%= quiz.pdfImages ? "exists" : "missing" %>');
            console.log('  - PDF Images length:', '<%= quiz.pdfImages ? quiz.pdfImages.length : "undefined" %>');
            
            if (questionImageContainers.length > 0) {
                questionImageContainers.forEach((container, index) => {
                    const s3Key = container.dataset.s3Key;
                    const questionIndex = container.dataset.questionIndex;
                    console.log(`  - Question ${index}: s3Key="${s3Key}", questionIndex="${questionIndex}"`);
                });
            }
            
            if (pdfImages.length > 0) {
                pdfImages.forEach((img, index) => {
                    const src = img.getAttribute('src');
                    console.log(`  - PDF Image ${index}: src="${src}"`);
                });
            }
            
            if (pdfDocuments.length > 0) {
                pdfDocuments.forEach((doc, index) => {
                    const title = doc.querySelector('h5')?.textContent || 'Unknown PDF';
                    console.log(`  - PDF Document ${index}: "${title}"`);
                });
            }
            
            // Load question images after a short delay
            setTimeout(loadQuestionImages, 500);
            // Load PDF document images after a short delay
            setTimeout(loadPdfImages, 800);
        });

        // Image modal functions
        window.openImageModal = function(imageUrl, title) {
            const modal = document.getElementById('imageModal');
            const modalImg = document.getElementById('modalImage');
            const modalTitle = document.getElementById('modalImageTitle');
            
            if (modal && modalImg && modalTitle) {
                modalTitle.textContent = title;
                modalImg.src = imageUrl;
                modal.style.display = 'block';
            }
        };

        window.closeImageModal = function() {
            const modal = document.getElementById('imageModal');
            if (modal) {
                modal.style.display = 'none';
            }
        };

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('imageModal');
            if (event.target === modal) {
                closeImageModal();
            }
        };

        // PDF Viewer and Download functions
        window.openPdfViewer = function(pdfUrl, fileName) {
            try {
                // Open PDF in a new tab/window
                const newWindow = window.open(pdfUrl, '_blank');
                if (!newWindow) {
                    // If popup blocked, show alert
                    alert('Popup blocked! Please allow popups for this site to view PDFs.');
                }
            } catch (error) {
                console.error('Error opening PDF viewer:', error);
                alert('Error opening PDF. Please try again.');
            }
        };

        window.downloadPdf = function(pdfUrl, fileName) {
            try {
                // Create a temporary link element for download
                const link = document.createElement('a');
                link.href = pdfUrl;
                link.download = fileName;
                link.target = '_blank';
                
                // Append to body, click, and remove
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                console.log('PDF download initiated:', fileName);
            } catch (error) {
                console.error('Error downloading PDF:', error);
                alert('Error downloading PDF. Please try again.');
            }
        };

        // Re-extract PDF Images functionality
        document.addEventListener('DOMContentLoaded', function() {
            const reextractBtn = document.getElementById('reextract-pdf-btn');
            if (reextractBtn) {
                reextractBtn.addEventListener('click', async function() {
                    // Store original button state BEFORE any async operations
                    const originalText = reextractBtn.innerHTML;
                    const originalDisabled = reextractBtn.disabled;
                    
                    try {
                        // Show loading state
                        reextractBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Extracting...';
                        reextractBtn.disabled = true;
                        
                        console.log('🔄 Starting PDF image re-extraction for quiz:', quizId);
                        
                        // Call the re-extraction API
                        const response = await fetch(`/api/reextract-pdf-images/${quizId}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            }
                        });
                        
                        if (!response.ok) {
                            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                        }
                        
                        const data = await response.json();
                        console.log('✅ Re-extraction result:', data);
                        
                        if (data.success) {
                            // Show success message
                            alert(`🎉 Success! Extracted ${data.imagesCount} images from the PDF.\n\nPlease refresh the page to see the images.`);
                            
                            // Hide the re-extract section
                            const reextractSection = document.querySelector('.reextract-section');
                            if (reextractSection) {
                                reextractSection.style.display = 'none';
                            }
                        } else {
                            // Show error message
                            alert(`❌ Error: ${data.message}`);
                        }
                        
                    } catch (error) {
                        console.error('❌ Error during re-extraction:', error);
                        
                        // Show more specific error message
                        if (error.message.includes('HTTP 403')) {
                            alert('❌ Access Denied (403). You may not have permission to re-extract images for this quiz, or your session has expired. Please check the console for details.');
                        } else if (error.message.includes('HTTP 401')) {
                            alert('❌ Unauthorized (401). Please log in again.');
                        } else {
                            alert('❌ Error during re-extraction. Please check the console for details.');
                        }
                    } finally {
                        // Restore button state
                        reextractBtn.innerHTML = originalText;
                        reextractBtn.disabled = originalDisabled;
                    }
                });
                
                console.log('✅ Re-extract button event listener added');
            }
        });

        // Final debug log to confirm all functions are defined
        console.log('🎯 All functions registered:', {
            selectOption: typeof window.selectOption,
            nextQuestion: typeof window.nextQuestion,
            previousQuestion: typeof window.previousQuestion,
            goToQuestion: typeof window.goToQuestion,
            openImageModal: typeof window.openImageModal,
            closeImageModal: typeof window.closeImageModal
        });
        
        console.log('🚀 Script execution completed!');
    </script>
    
    <!-- Image Modal -->
    <div id="imageModal" class="image-modal" style="display: none;">
        <div class="image-modal-content">
            <span class="image-modal-close" onclick="closeImageModal()">&times;</span>
            <h3 id="modalImageTitle"></h3>
            <img id="modalImage" class="modal-image" alt="Full size image">
        </div>
    </div>
    
    <!-- Session timeout management -->
    <script src="/js/session-timeout.js"></script>
</body>
</html> 