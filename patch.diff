commit 0bdf9b9ddf9e549e8fae5a86de3944aa1447c5ca
Author: kattisarika <sarika.katti@gmail.com>
Date:   Sun Aug 17 12:38:40 2025 -0500

    Fix subdomain validation: allow mixed case input, implement case-insensitive checking, and add helpful suggestions for taken subdomains

diff --git a/routes/organization.js b/routes/organization.js
index 1189cd9..f9c2c65 100644
--- a/routes/organization.js
+++ b/routes/organization.js
@@ -26,29 +26,37 @@ router.get('/api/check-subdomain/:subdomain', async (req, res) => {
   try {
     const { subdomain } = req.params;
     
-    // Validate subdomain format
-    if (!/^[a-z0-9-]+$/.test(subdomain) || subdomain.length < 3 || subdomain.length > 50) {
+    // Validate subdomain format (allow mixed case, will be converted to lowercase)
+    if (!/^[a-zA-Z0-9-]+$/.test(subdomain) || subdomain.length < 3 || subdomain.length > 50) {
       return res.json({ 
         available: false, 
-        error: 'Subdomain must be 3-50 characters long and contain only lowercase letters, numbers, and hyphens.' 
+        error: 'Subdomain must be 3-50 characters long and contain only letters, numbers, and hyphens.' 
       });
     }
     
-    // Check reserved subdomains
+    // Check reserved subdomains (case-insensitive)
     const reserved = ['www', 'app', 'api', 'admin', 'mail', 'ftp', 'blog', 'help', 'support', 'docs'];
-    if (reserved.includes(subdomain)) {
+    const normalizedSubdomain = subdomain.toLowerCase();
+    if (reserved.includes(normalizedSubdomain)) {
       return res.json({ 
         available: false, 
         error: 'This subdomain is reserved.' 
       });
     }
     
-    // Check if subdomain exists
-    const existing = await Organization.findOne({ subdomain });
+    // Check if subdomain exists (case-insensitive)
+    const existing = await Organization.findOne({ subdomain: normalizedSubdomain });
+    
+    console.log('Subdomain check:', { 
+      original: subdomain, 
+      normalized: normalizedSubdomain, 
+      available: !existing 
+    });
     
     res.json({ 
       available: !existing,
-      subdomain: subdomain
+      subdomain: subdomain,
+      normalizedSubdomain: normalizedSubdomain
     });
   } catch (error) {
     console.error('Error checking subdomain:', error);
@@ -99,17 +107,45 @@ router.post('/api/create-organization', async (req, res) => {
       return res.status(400).json({ error: 'Invalid email format' });
     }
     
-    // Validate subdomain
-    if (!/^[a-z0-9-]+$/.test(subdomain) || subdomain.length < 3 || subdomain.length > 50) {
-      return res.status(400).json({ error: 'Invalid subdomain format' });
+    // Validate subdomain format (allow mixed case, will be converted to lowercase)
+    if (!/^[a-zA-Z0-9-]+$/.test(subdomain) || subdomain.length < 3 || subdomain.length > 50) {
+      return res.status(400).json({ 
+        error: 'Invalid subdomain format. Use only letters, numbers, and hyphens (3-50 characters).' 
+      });
     }
     
-    // Check if subdomain is available
-    const existingOrg = await Organization.findOne({ subdomain });
+    // Check if subdomain is available (case-insensitive)
+    const normalizedSubdomain = subdomain.toLowerCase();
+    console.log('Checking subdomain availability:', { 
+      original: subdomain, 
+      normalized: normalizedSubdomain 
+    });
+    
+    const existingOrg = await Organization.findOne({ subdomain: normalizedSubdomain });
     if (existingOrg) {
-      return res.status(400).json({ error: 'Subdomain already taken' });
+      console.log('Subdomain conflict found:', { 
+        requested: normalizedSubdomain, 
+        existingOrgId: existingOrg._id,
+        existingOrgName: existingOrg.name 
+      });
+      
+      // Suggest alternative subdomains
+      const alternatives = [
+        `${normalizedSubdomain}1`,
+        `${normalizedSubdomain}2`,
+        `${normalizedSubdomain}2025`,
+        `${normalizedSubdomain}edu`,
+        `${normalizedSubdomain}school`
+      ];
+      
+      return res.status(400).json({ 
+        error: 'Subdomain already taken. Please choose a different one.',
+        suggestions: alternatives
+      });
     }
     
+    console.log('Subdomain is available:', normalizedSubdomain);
+    
     // Check if user already exists
     const existingUser = await User.findOne({ email });
     if (existingUser) {
